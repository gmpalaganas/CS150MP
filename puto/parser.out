Created by PLY version 3.6 (http://www.dabeaz.com/ply)

Unused terminals:

    MULTILINE_COMMENT
    COND_OP
    NULL
    LINE_COMMENT

Grammar

Rule 0     S' -> start
Rule 1     start -> external_declaration main external_declaration
Rule 2     external_declaration -> assignment_expression external_declaration
Rule 3     external_declaration -> fxn_var_statement external_declaration
Rule 4     external_declaration -> empty
Rule 5     main -> MAIN LPAREN empty RPAREN compound_statement
Rule 6     fxn_var_statement -> fxn_prot
Rule 7     fxn_var_statement -> fxn_definition
Rule 8     declaration -> init_declarator_list SEMI
Rule 9     declaration_list -> declaration
Rule 10    declaration_list -> declaration_list declaration
Rule 11    init_declarator_list -> init_declarator
Rule 12    init_declarator_list -> init_declarator_list COMMA init_declarator
Rule 13    init_declarator -> declarator
Rule 14    init_declarator -> declarator ASSIGN_OP initializer
Rule 15    declarator -> VAR identifier
Rule 16    declarator -> LPAREN declarator RPAREN
Rule 17    declarator -> declarator LBRACKET constant_expression_opt RBRACKET
Rule 18    initializer -> assignment_expression
Rule 19    initializer -> LBRACE initializer_list RBRACE
Rule 20    initializer -> LBRACE initializer_list COMMA RBRACE
Rule 21    initializer_list -> initializer
Rule 22    initializer_list -> initializer_list COMMA initializer
Rule 23    fxn_prot -> fxn_declaration SEMI
Rule 24    fxn_definition -> fxn_declaration compound_statement
Rule 25    fxn_declaration -> VAR identifier LPAREN fxn_prot_args RPAREN
Rule 26    fxn_declaration -> VAR identifier LPAREN empty RPAREN
Rule 27    fxn_prot_args -> identifier COMMA fxn_prot_args
Rule 28    fxn_prot_args -> identifier
Rule 29    statement -> labeled_statement
Rule 30    statement -> expression_statement
Rule 31    statement -> compound_statement
Rule 32    statement -> selection_statement
Rule 33    statement -> iteration_statement
Rule 34    statement -> jump_statement
Rule 35    labeled_statement -> CASE constant_expression COLON statement
Rule 36    labeled_statement -> DEFAULT COLON statement
Rule 37    expression_statement -> expression_opt SEMI
Rule 38    compound_statement -> LBRACE mix_list RBRACE
Rule 39    compound_statement -> LBRACE RBRACE
Rule 40    mix_list -> statement_list
Rule 41    mix_list -> declaration_list
Rule 42    mix_list -> statement_list mix_list
Rule 43    mix_list -> declaration_list mix_list
Rule 44    statement_list -> statement
Rule 45    statement_list -> statement_list statement
Rule 46    selection_statement -> IF LPAREN expression RPAREN statement
Rule 47    selection_statement -> IF LPAREN expression RPAREN statement ELSE statement
Rule 48    selection_statement -> SWITCH LPAREN expression RPAREN statement
Rule 49    iteration_statement -> WHILE LPAREN expression RPAREN statement
Rule 50    iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
Rule 51    iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI
Rule 52    jump_statement -> CONTINUE SEMI
Rule 53    jump_statement -> BREAK SEMI
Rule 54    jump_statement -> RETURN expression_opt SEMI
Rule 55    expression_opt -> empty
Rule 56    expression_opt -> expression
Rule 57    expression -> print_expression
Rule 58    expression -> expression COMMA print_expression
Rule 59    print_expression -> assignment_expression
Rule 60    print_expression -> PRINT LPAREN scan_expression RPAREN
Rule 61    print_expression -> PRINTLN LPAREN scan_expression RPAREN
Rule 62    assignment_expression -> scan_expression
Rule 63    assignment_expression -> unary_expression ASSIGN_OP assignment_expression
Rule 64    assignment_expression -> unary_expression ADD_ASSIGN assignment_expression
Rule 65    assignment_expression -> unary_expression MIN_ASSIGN assignment_expression
Rule 66    assignment_expression -> unary_expression MUL_ASSIGN assignment_expression
Rule 67    assignment_expression -> unary_expression DIV_ASSIGN assignment_expression
Rule 68    assignment_expression -> unary_expression MOD_ASSIGN assignment_expression
Rule 69    scan_expression -> logical_or_expression
Rule 70    scan_expression -> SCAN LPAREN RPAREN
Rule 71    constant_expression_opt -> empty
Rule 72    constant_expression_opt -> constant_expression
Rule 73    constant_expression -> logical_or_expression
Rule 74    logical_or_expression -> logical_and_expression
Rule 75    logical_or_expression -> logical_and_expression OR logical_or_expression
Rule 76    logical_and_expression -> equality_expression
Rule 77    logical_and_expression -> logical_and_expression AND equality_expression
Rule 78    equality_expression -> relational_expression
Rule 79    equality_expression -> equality_expression EQ relational_expression
Rule 80    equality_expression -> equality_expression NEQ relational_expression
Rule 81    relational_expression -> add_expression
Rule 82    relational_expression -> relational_expression LT add_expression
Rule 83    relational_expression -> relational_expression GT add_expression
Rule 84    relational_expression -> relational_expression LE add_expression
Rule 85    relational_expression -> relational_expression GE add_expression
Rule 86    add_expression -> mult_expression
Rule 87    add_expression -> add_expression ADD_OP mult_expression
Rule 88    add_expression -> add_expression SUB_OP mult_expression
Rule 89    mult_expression -> unary_expression
Rule 90    mult_expression -> mult_expression MULT_OP unary_expression
Rule 91    mult_expression -> mult_expression DIV_OP unary_expression
Rule 92    mult_expression -> mult_expression MOD_OP unary_expression
Rule 93    unary_expression -> postfix_expression
Rule 94    unary_expression -> INC unary_expression
Rule 95    unary_expression -> DEC unary_expression
Rule 96    unary_expression -> SUB_OP add_expression
Rule 97    unary_expression -> NOT logical_or_expression
Rule 98    postfix_expression -> primary_expression
Rule 99    postfix_expression -> postfix_expression LBRACKET expression RBRACKET
Rule 100   postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN
Rule 101   postfix_expression -> postfix_expression LPAREN RPAREN
Rule 102   postfix_expression -> postfix_expression INC
Rule 103   postfix_expression -> postfix_expression DEC
Rule 104   primary_expression -> identifier
Rule 105   primary_expression -> constant
Rule 106   primary_expression -> LPAREN expression RPAREN
Rule 107   argument_expression_list -> assignment_expression
Rule 108   argument_expression_list -> argument_expression_list COMMA assignment_expression
Rule 109   identifier -> FLOAT_ID
Rule 110   identifier -> INT_ID
Rule 111   identifier -> CHAR_ID
Rule 112   identifier -> STR_ID
Rule 113   identifier -> VOID_ID
Rule 114   constant -> FLOAT_LIT
Rule 115   constant -> INT_LIT
Rule 116   constant -> CHAR_LIT
Rule 117   constant -> STR_LIT
Rule 118   empty -> <empty>

Terminals, with rules where they appear

ADD_ASSIGN           : 64
ADD_OP               : 87
AND                  : 77
ASSIGN_OP            : 14 63
BREAK                : 53
CASE                 : 35
CHAR_ID              : 111
CHAR_LIT             : 116
COLON                : 35 36
COMMA                : 12 20 22 27 58 108
COND_OP              : 
CONTINUE             : 52
DEC                  : 95 103
DEFAULT              : 36
DIV_ASSIGN           : 67
DIV_OP               : 91
DO                   : 51
ELSE                 : 47
EQ                   : 79
FLOAT_ID             : 109
FLOAT_LIT            : 114
FOR                  : 50
GE                   : 85
GT                   : 83
IF                   : 46 47
INC                  : 94 102
INT_ID               : 110
INT_LIT              : 115
LBRACE               : 19 20 38 39
LBRACKET             : 17 99
LE                   : 84
LINE_COMMENT         : 
LPAREN               : 5 16 25 26 46 47 48 49 50 51 60 61 70 100 101 106
LT                   : 82
MAIN                 : 5
MIN_ASSIGN           : 65
MOD_ASSIGN           : 68
MOD_OP               : 92
MULTILINE_COMMENT    : 
MULT_OP              : 90
MUL_ASSIGN           : 66
NEQ                  : 80
NOT                  : 97
NULL                 : 
OR                   : 75
PRINT                : 60
PRINTLN              : 61
RBRACE               : 19 20 38 39
RBRACKET             : 17 99
RETURN               : 54
RPAREN               : 5 16 25 26 46 47 48 49 50 51 60 61 70 100 101 106
SCAN                 : 70
SEMI                 : 8 23 37 50 50 51 52 53 54
STR_ID               : 112
STR_LIT              : 117
SUB_OP               : 88 96
SWITCH               : 48
VAR                  : 15 25 26
VOID_ID              : 113
WHILE                : 49 51
error                : 

Nonterminals, with rules where they appear

add_expression       : 81 82 83 84 85 87 88 96
argument_expression_list : 100 108
assignment_expression : 2 18 59 63 64 65 66 67 68 107 108
compound_statement   : 5 24 31
constant             : 105
constant_expression  : 35 72
constant_expression_opt : 17
declaration          : 9 10
declaration_list     : 10 41 43
declarator           : 13 14 16 17
empty                : 4 5 26 55 71
equality_expression  : 76 77 79 80
expression           : 46 47 48 49 51 56 58 99 106
expression_opt       : 37 50 50 50 54
expression_statement : 30
external_declaration : 1 1 2 3
fxn_declaration      : 23 24
fxn_definition       : 7
fxn_prot             : 6
fxn_prot_args        : 25 27
fxn_var_statement    : 3
identifier           : 15 25 26 27 28 104
init_declarator      : 11 12
init_declarator_list : 8 12
initializer          : 14 21 22
initializer_list     : 19 20 22
iteration_statement  : 33
jump_statement       : 34
labeled_statement    : 29
logical_and_expression : 74 75 77
logical_or_expression : 69 73 75 97
main                 : 1
mix_list             : 38 42 43
mult_expression      : 86 87 88 90 91 92
postfix_expression   : 93 99 100 101 102 103
primary_expression   : 98
print_expression     : 57 58
relational_expression : 78 79 80 82 83 84 85
scan_expression      : 60 61 62
selection_statement  : 32
start                : 0
statement            : 35 36 44 45 46 47 47 48 49 50 51
statement_list       : 40 42 45
unary_expression     : 63 64 65 66 67 68 89 90 91 92 94 95

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . external_declaration main external_declaration
    (2) external_declaration -> . assignment_expression external_declaration
    (3) external_declaration -> . fxn_var_statement external_declaration
    (4) external_declaration -> . empty
    (62) assignment_expression -> . scan_expression
    (63) assignment_expression -> . unary_expression ASSIGN_OP assignment_expression
    (64) assignment_expression -> . unary_expression ADD_ASSIGN assignment_expression
    (65) assignment_expression -> . unary_expression MIN_ASSIGN assignment_expression
    (66) assignment_expression -> . unary_expression MUL_ASSIGN assignment_expression
    (67) assignment_expression -> . unary_expression DIV_ASSIGN assignment_expression
    (68) assignment_expression -> . unary_expression MOD_ASSIGN assignment_expression
    (6) fxn_var_statement -> . fxn_prot
    (7) fxn_var_statement -> . fxn_definition
    (118) empty -> .
    (69) scan_expression -> . logical_or_expression
    (70) scan_expression -> . SCAN LPAREN RPAREN
    (93) unary_expression -> . postfix_expression
    (94) unary_expression -> . INC unary_expression
    (95) unary_expression -> . DEC unary_expression
    (96) unary_expression -> . SUB_OP add_expression
    (97) unary_expression -> . NOT logical_or_expression
    (23) fxn_prot -> . fxn_declaration SEMI
    (24) fxn_definition -> . fxn_declaration compound_statement
    (74) logical_or_expression -> . logical_and_expression
    (75) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (98) postfix_expression -> . primary_expression
    (99) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (100) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (101) postfix_expression -> . postfix_expression LPAREN RPAREN
    (102) postfix_expression -> . postfix_expression INC
    (103) postfix_expression -> . postfix_expression DEC
    (25) fxn_declaration -> . VAR identifier LPAREN fxn_prot_args RPAREN
    (26) fxn_declaration -> . VAR identifier LPAREN empty RPAREN
    (76) logical_and_expression -> . equality_expression
    (77) logical_and_expression -> . logical_and_expression AND equality_expression
    (104) primary_expression -> . identifier
    (105) primary_expression -> . constant
    (106) primary_expression -> . LPAREN expression RPAREN
    (78) equality_expression -> . relational_expression
    (79) equality_expression -> . equality_expression EQ relational_expression
    (80) equality_expression -> . equality_expression NEQ relational_expression
    (109) identifier -> . FLOAT_ID
    (110) identifier -> . INT_ID
    (111) identifier -> . CHAR_ID
    (112) identifier -> . STR_ID
    (113) identifier -> . VOID_ID
    (114) constant -> . FLOAT_LIT
    (115) constant -> . INT_LIT
    (116) constant -> . CHAR_LIT
    (117) constant -> . STR_LIT
    (81) relational_expression -> . add_expression
    (82) relational_expression -> . relational_expression LT add_expression
    (83) relational_expression -> . relational_expression GT add_expression
    (84) relational_expression -> . relational_expression LE add_expression
    (85) relational_expression -> . relational_expression GE add_expression
    (86) add_expression -> . mult_expression
    (87) add_expression -> . add_expression ADD_OP mult_expression
    (88) add_expression -> . add_expression SUB_OP mult_expression
    (89) mult_expression -> . unary_expression
    (90) mult_expression -> . mult_expression MULT_OP unary_expression
    (91) mult_expression -> . mult_expression DIV_OP unary_expression
    (92) mult_expression -> . mult_expression MOD_OP unary_expression

    MAIN            reduce using rule 118 (empty -> .)
    SCAN            shift and go to state 4
    INC             shift and go to state 36
    DEC             shift and go to state 7
    SUB_OP          shift and go to state 32
    NOT             shift and go to state 34
    VAR             shift and go to state 27
    LPAREN          shift and go to state 2
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 30
    CHAR_ID         shift and go to state 13
    STR_ID          shift and go to state 19
    VOID_ID         shift and go to state 23
    FLOAT_LIT       shift and go to state 31
    INT_LIT         shift and go to state 33
    CHAR_LIT        shift and go to state 12
    STR_LIT         shift and go to state 9

    constant                       shift and go to state 1
    unary_expression               shift and go to state 3
    fxn_var_statement              shift and go to state 6
    scan_expression                shift and go to state 10
    external_declaration           shift and go to state 11
    fxn_declaration                shift and go to state 14
    postfix_expression             shift and go to state 15
    start                          shift and go to state 16
    relational_expression          shift and go to state 17
    fxn_definition                 shift and go to state 18
    fxn_prot                       shift and go to state 20
    logical_or_expression          shift and go to state 21
    empty                          shift and go to state 22
    assignment_expression          shift and go to state 24
    primary_expression             shift and go to state 26
    logical_and_expression         shift and go to state 8
    add_expression                 shift and go to state 28
    equality_expression            shift and go to state 29
    mult_expression                shift and go to state 25
    identifier                     shift and go to state 35

state 1

    (105) primary_expression -> constant .

    LBRACKET        reduce using rule 105 (primary_expression -> constant .)
    LPAREN          reduce using rule 105 (primary_expression -> constant .)
    INC             reduce using rule 105 (primary_expression -> constant .)
    DEC             reduce using rule 105 (primary_expression -> constant .)
    ASSIGN_OP       reduce using rule 105 (primary_expression -> constant .)
    ADD_ASSIGN      reduce using rule 105 (primary_expression -> constant .)
    MIN_ASSIGN      reduce using rule 105 (primary_expression -> constant .)
    MUL_ASSIGN      reduce using rule 105 (primary_expression -> constant .)
    DIV_ASSIGN      reduce using rule 105 (primary_expression -> constant .)
    MOD_ASSIGN      reduce using rule 105 (primary_expression -> constant .)
    MULT_OP         reduce using rule 105 (primary_expression -> constant .)
    DIV_OP          reduce using rule 105 (primary_expression -> constant .)
    MOD_OP          reduce using rule 105 (primary_expression -> constant .)
    ADD_OP          reduce using rule 105 (primary_expression -> constant .)
    SUB_OP          reduce using rule 105 (primary_expression -> constant .)
    LT              reduce using rule 105 (primary_expression -> constant .)
    GT              reduce using rule 105 (primary_expression -> constant .)
    LE              reduce using rule 105 (primary_expression -> constant .)
    GE              reduce using rule 105 (primary_expression -> constant .)
    EQ              reduce using rule 105 (primary_expression -> constant .)
    NEQ             reduce using rule 105 (primary_expression -> constant .)
    OR              reduce using rule 105 (primary_expression -> constant .)
    AND             reduce using rule 105 (primary_expression -> constant .)
    COMMA           reduce using rule 105 (primary_expression -> constant .)
    SEMI            reduce using rule 105 (primary_expression -> constant .)
    SCAN            reduce using rule 105 (primary_expression -> constant .)
    NOT             reduce using rule 105 (primary_expression -> constant .)
    VAR             reduce using rule 105 (primary_expression -> constant .)
    FLOAT_ID        reduce using rule 105 (primary_expression -> constant .)
    INT_ID          reduce using rule 105 (primary_expression -> constant .)
    CHAR_ID         reduce using rule 105 (primary_expression -> constant .)
    STR_ID          reduce using rule 105 (primary_expression -> constant .)
    VOID_ID         reduce using rule 105 (primary_expression -> constant .)
    FLOAT_LIT       reduce using rule 105 (primary_expression -> constant .)
    INT_LIT         reduce using rule 105 (primary_expression -> constant .)
    CHAR_LIT        reduce using rule 105 (primary_expression -> constant .)
    STR_LIT         reduce using rule 105 (primary_expression -> constant .)
    MAIN            reduce using rule 105 (primary_expression -> constant .)
    RPAREN          reduce using rule 105 (primary_expression -> constant .)
    $end            reduce using rule 105 (primary_expression -> constant .)
    RBRACKET        reduce using rule 105 (primary_expression -> constant .)
    RBRACE          reduce using rule 105 (primary_expression -> constant .)
    COLON           reduce using rule 105 (primary_expression -> constant .)


state 2

    (106) primary_expression -> LPAREN . expression RPAREN
    (57) expression -> . print_expression
    (58) expression -> . expression COMMA print_expression
    (59) print_expression -> . assignment_expression
    (60) print_expression -> . PRINT LPAREN scan_expression RPAREN
    (61) print_expression -> . PRINTLN LPAREN scan_expression RPAREN
    (62) assignment_expression -> . scan_expression
    (63) assignment_expression -> . unary_expression ASSIGN_OP assignment_expression
    (64) assignment_expression -> . unary_expression ADD_ASSIGN assignment_expression
    (65) assignment_expression -> . unary_expression MIN_ASSIGN assignment_expression
    (66) assignment_expression -> . unary_expression MUL_ASSIGN assignment_expression
    (67) assignment_expression -> . unary_expression DIV_ASSIGN assignment_expression
    (68) assignment_expression -> . unary_expression MOD_ASSIGN assignment_expression
    (69) scan_expression -> . logical_or_expression
    (70) scan_expression -> . SCAN LPAREN RPAREN
    (93) unary_expression -> . postfix_expression
    (94) unary_expression -> . INC unary_expression
    (95) unary_expression -> . DEC unary_expression
    (96) unary_expression -> . SUB_OP add_expression
    (97) unary_expression -> . NOT logical_or_expression
    (74) logical_or_expression -> . logical_and_expression
    (75) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (98) postfix_expression -> . primary_expression
    (99) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (100) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (101) postfix_expression -> . postfix_expression LPAREN RPAREN
    (102) postfix_expression -> . postfix_expression INC
    (103) postfix_expression -> . postfix_expression DEC
    (76) logical_and_expression -> . equality_expression
    (77) logical_and_expression -> . logical_and_expression AND equality_expression
    (104) primary_expression -> . identifier
    (105) primary_expression -> . constant
    (106) primary_expression -> . LPAREN expression RPAREN
    (78) equality_expression -> . relational_expression
    (79) equality_expression -> . equality_expression EQ relational_expression
    (80) equality_expression -> . equality_expression NEQ relational_expression
    (109) identifier -> . FLOAT_ID
    (110) identifier -> . INT_ID
    (111) identifier -> . CHAR_ID
    (112) identifier -> . STR_ID
    (113) identifier -> . VOID_ID
    (114) constant -> . FLOAT_LIT
    (115) constant -> . INT_LIT
    (116) constant -> . CHAR_LIT
    (117) constant -> . STR_LIT
    (81) relational_expression -> . add_expression
    (82) relational_expression -> . relational_expression LT add_expression
    (83) relational_expression -> . relational_expression GT add_expression
    (84) relational_expression -> . relational_expression LE add_expression
    (85) relational_expression -> . relational_expression GE add_expression
    (86) add_expression -> . mult_expression
    (87) add_expression -> . add_expression ADD_OP mult_expression
    (88) add_expression -> . add_expression SUB_OP mult_expression
    (89) mult_expression -> . unary_expression
    (90) mult_expression -> . mult_expression MULT_OP unary_expression
    (91) mult_expression -> . mult_expression DIV_OP unary_expression
    (92) mult_expression -> . mult_expression MOD_OP unary_expression

    PRINT           shift and go to state 37
    PRINTLN         shift and go to state 38
    SCAN            shift and go to state 4
    INC             shift and go to state 36
    DEC             shift and go to state 7
    SUB_OP          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 2
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 30
    CHAR_ID         shift and go to state 13
    STR_ID          shift and go to state 19
    VOID_ID         shift and go to state 23
    FLOAT_LIT       shift and go to state 31
    INT_LIT         shift and go to state 33
    CHAR_LIT        shift and go to state 12
    STR_LIT         shift and go to state 9

    constant                       shift and go to state 1
    assignment_expression          shift and go to state 39
    unary_expression               shift and go to state 3
    relational_expression          shift and go to state 17
    add_expression                 shift and go to state 28
    print_expression               shift and go to state 40
    postfix_expression             shift and go to state 15
    primary_expression             shift and go to state 26
    mult_expression                shift and go to state 25
    logical_and_expression         shift and go to state 8
    identifier                     shift and go to state 35
    expression                     shift and go to state 41
    logical_or_expression          shift and go to state 21
    equality_expression            shift and go to state 29
    scan_expression                shift and go to state 10

state 3

    (63) assignment_expression -> unary_expression . ASSIGN_OP assignment_expression
    (64) assignment_expression -> unary_expression . ADD_ASSIGN assignment_expression
    (65) assignment_expression -> unary_expression . MIN_ASSIGN assignment_expression
    (66) assignment_expression -> unary_expression . MUL_ASSIGN assignment_expression
    (67) assignment_expression -> unary_expression . DIV_ASSIGN assignment_expression
    (68) assignment_expression -> unary_expression . MOD_ASSIGN assignment_expression
    (89) mult_expression -> unary_expression .

    ASSIGN_OP       shift and go to state 45
    ADD_ASSIGN      shift and go to state 47
    MIN_ASSIGN      shift and go to state 46
    MUL_ASSIGN      shift and go to state 43
    DIV_ASSIGN      shift and go to state 44
    MOD_ASSIGN      shift and go to state 42
    MULT_OP         reduce using rule 89 (mult_expression -> unary_expression .)
    DIV_OP          reduce using rule 89 (mult_expression -> unary_expression .)
    MOD_OP          reduce using rule 89 (mult_expression -> unary_expression .)
    ADD_OP          reduce using rule 89 (mult_expression -> unary_expression .)
    SUB_OP          reduce using rule 89 (mult_expression -> unary_expression .)
    LT              reduce using rule 89 (mult_expression -> unary_expression .)
    GT              reduce using rule 89 (mult_expression -> unary_expression .)
    LE              reduce using rule 89 (mult_expression -> unary_expression .)
    GE              reduce using rule 89 (mult_expression -> unary_expression .)
    EQ              reduce using rule 89 (mult_expression -> unary_expression .)
    NEQ             reduce using rule 89 (mult_expression -> unary_expression .)
    OR              reduce using rule 89 (mult_expression -> unary_expression .)
    AND             reduce using rule 89 (mult_expression -> unary_expression .)
    RPAREN          reduce using rule 89 (mult_expression -> unary_expression .)
    COMMA           reduce using rule 89 (mult_expression -> unary_expression .)
    SEMI            reduce using rule 89 (mult_expression -> unary_expression .)
    SCAN            reduce using rule 89 (mult_expression -> unary_expression .)
    INC             reduce using rule 89 (mult_expression -> unary_expression .)
    DEC             reduce using rule 89 (mult_expression -> unary_expression .)
    NOT             reduce using rule 89 (mult_expression -> unary_expression .)
    VAR             reduce using rule 89 (mult_expression -> unary_expression .)
    LPAREN          reduce using rule 89 (mult_expression -> unary_expression .)
    FLOAT_ID        reduce using rule 89 (mult_expression -> unary_expression .)
    INT_ID          reduce using rule 89 (mult_expression -> unary_expression .)
    CHAR_ID         reduce using rule 89 (mult_expression -> unary_expression .)
    STR_ID          reduce using rule 89 (mult_expression -> unary_expression .)
    VOID_ID         reduce using rule 89 (mult_expression -> unary_expression .)
    FLOAT_LIT       reduce using rule 89 (mult_expression -> unary_expression .)
    INT_LIT         reduce using rule 89 (mult_expression -> unary_expression .)
    CHAR_LIT        reduce using rule 89 (mult_expression -> unary_expression .)
    STR_LIT         reduce using rule 89 (mult_expression -> unary_expression .)
    $end            reduce using rule 89 (mult_expression -> unary_expression .)
    MAIN            reduce using rule 89 (mult_expression -> unary_expression .)
    RBRACKET        reduce using rule 89 (mult_expression -> unary_expression .)
    RBRACE          reduce using rule 89 (mult_expression -> unary_expression .)


state 4

    (70) scan_expression -> SCAN . LPAREN RPAREN

    LPAREN          shift and go to state 48


state 5

    (109) identifier -> FLOAT_ID .

    LBRACKET        reduce using rule 109 (identifier -> FLOAT_ID .)
    LPAREN          reduce using rule 109 (identifier -> FLOAT_ID .)
    INC             reduce using rule 109 (identifier -> FLOAT_ID .)
    DEC             reduce using rule 109 (identifier -> FLOAT_ID .)
    ASSIGN_OP       reduce using rule 109 (identifier -> FLOAT_ID .)
    ADD_ASSIGN      reduce using rule 109 (identifier -> FLOAT_ID .)
    MIN_ASSIGN      reduce using rule 109 (identifier -> FLOAT_ID .)
    MUL_ASSIGN      reduce using rule 109 (identifier -> FLOAT_ID .)
    DIV_ASSIGN      reduce using rule 109 (identifier -> FLOAT_ID .)
    MOD_ASSIGN      reduce using rule 109 (identifier -> FLOAT_ID .)
    MULT_OP         reduce using rule 109 (identifier -> FLOAT_ID .)
    DIV_OP          reduce using rule 109 (identifier -> FLOAT_ID .)
    MOD_OP          reduce using rule 109 (identifier -> FLOAT_ID .)
    ADD_OP          reduce using rule 109 (identifier -> FLOAT_ID .)
    SUB_OP          reduce using rule 109 (identifier -> FLOAT_ID .)
    LT              reduce using rule 109 (identifier -> FLOAT_ID .)
    GT              reduce using rule 109 (identifier -> FLOAT_ID .)
    LE              reduce using rule 109 (identifier -> FLOAT_ID .)
    GE              reduce using rule 109 (identifier -> FLOAT_ID .)
    EQ              reduce using rule 109 (identifier -> FLOAT_ID .)
    NEQ             reduce using rule 109 (identifier -> FLOAT_ID .)
    OR              reduce using rule 109 (identifier -> FLOAT_ID .)
    AND             reduce using rule 109 (identifier -> FLOAT_ID .)
    COMMA           reduce using rule 109 (identifier -> FLOAT_ID .)
    SEMI            reduce using rule 109 (identifier -> FLOAT_ID .)
    RPAREN          reduce using rule 109 (identifier -> FLOAT_ID .)
    SCAN            reduce using rule 109 (identifier -> FLOAT_ID .)
    NOT             reduce using rule 109 (identifier -> FLOAT_ID .)
    VAR             reduce using rule 109 (identifier -> FLOAT_ID .)
    FLOAT_ID        reduce using rule 109 (identifier -> FLOAT_ID .)
    INT_ID          reduce using rule 109 (identifier -> FLOAT_ID .)
    CHAR_ID         reduce using rule 109 (identifier -> FLOAT_ID .)
    STR_ID          reduce using rule 109 (identifier -> FLOAT_ID .)
    VOID_ID         reduce using rule 109 (identifier -> FLOAT_ID .)
    FLOAT_LIT       reduce using rule 109 (identifier -> FLOAT_ID .)
    INT_LIT         reduce using rule 109 (identifier -> FLOAT_ID .)
    CHAR_LIT        reduce using rule 109 (identifier -> FLOAT_ID .)
    STR_LIT         reduce using rule 109 (identifier -> FLOAT_ID .)
    MAIN            reduce using rule 109 (identifier -> FLOAT_ID .)
    $end            reduce using rule 109 (identifier -> FLOAT_ID .)
    RBRACKET        reduce using rule 109 (identifier -> FLOAT_ID .)
    RBRACE          reduce using rule 109 (identifier -> FLOAT_ID .)
    COLON           reduce using rule 109 (identifier -> FLOAT_ID .)


state 6

    (3) external_declaration -> fxn_var_statement . external_declaration
    (2) external_declaration -> . assignment_expression external_declaration
    (3) external_declaration -> . fxn_var_statement external_declaration
    (4) external_declaration -> . empty
    (62) assignment_expression -> . scan_expression
    (63) assignment_expression -> . unary_expression ASSIGN_OP assignment_expression
    (64) assignment_expression -> . unary_expression ADD_ASSIGN assignment_expression
    (65) assignment_expression -> . unary_expression MIN_ASSIGN assignment_expression
    (66) assignment_expression -> . unary_expression MUL_ASSIGN assignment_expression
    (67) assignment_expression -> . unary_expression DIV_ASSIGN assignment_expression
    (68) assignment_expression -> . unary_expression MOD_ASSIGN assignment_expression
    (6) fxn_var_statement -> . fxn_prot
    (7) fxn_var_statement -> . fxn_definition
    (118) empty -> .
    (69) scan_expression -> . logical_or_expression
    (70) scan_expression -> . SCAN LPAREN RPAREN
    (93) unary_expression -> . postfix_expression
    (94) unary_expression -> . INC unary_expression
    (95) unary_expression -> . DEC unary_expression
    (96) unary_expression -> . SUB_OP add_expression
    (97) unary_expression -> . NOT logical_or_expression
    (23) fxn_prot -> . fxn_declaration SEMI
    (24) fxn_definition -> . fxn_declaration compound_statement
    (74) logical_or_expression -> . logical_and_expression
    (75) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (98) postfix_expression -> . primary_expression
    (99) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (100) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (101) postfix_expression -> . postfix_expression LPAREN RPAREN
    (102) postfix_expression -> . postfix_expression INC
    (103) postfix_expression -> . postfix_expression DEC
    (25) fxn_declaration -> . VAR identifier LPAREN fxn_prot_args RPAREN
    (26) fxn_declaration -> . VAR identifier LPAREN empty RPAREN
    (76) logical_and_expression -> . equality_expression
    (77) logical_and_expression -> . logical_and_expression AND equality_expression
    (104) primary_expression -> . identifier
    (105) primary_expression -> . constant
    (106) primary_expression -> . LPAREN expression RPAREN
    (78) equality_expression -> . relational_expression
    (79) equality_expression -> . equality_expression EQ relational_expression
    (80) equality_expression -> . equality_expression NEQ relational_expression
    (109) identifier -> . FLOAT_ID
    (110) identifier -> . INT_ID
    (111) identifier -> . CHAR_ID
    (112) identifier -> . STR_ID
    (113) identifier -> . VOID_ID
    (114) constant -> . FLOAT_LIT
    (115) constant -> . INT_LIT
    (116) constant -> . CHAR_LIT
    (117) constant -> . STR_LIT
    (81) relational_expression -> . add_expression
    (82) relational_expression -> . relational_expression LT add_expression
    (83) relational_expression -> . relational_expression GT add_expression
    (84) relational_expression -> . relational_expression LE add_expression
    (85) relational_expression -> . relational_expression GE add_expression
    (86) add_expression -> . mult_expression
    (87) add_expression -> . add_expression ADD_OP mult_expression
    (88) add_expression -> . add_expression SUB_OP mult_expression
    (89) mult_expression -> . unary_expression
    (90) mult_expression -> . mult_expression MULT_OP unary_expression
    (91) mult_expression -> . mult_expression DIV_OP unary_expression
    (92) mult_expression -> . mult_expression MOD_OP unary_expression

    MAIN            reduce using rule 118 (empty -> .)
    $end            reduce using rule 118 (empty -> .)
    SCAN            shift and go to state 4
    INC             shift and go to state 36
    DEC             shift and go to state 7
    SUB_OP          shift and go to state 32
    NOT             shift and go to state 34
    VAR             shift and go to state 27
    LPAREN          shift and go to state 2
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 30
    CHAR_ID         shift and go to state 13
    STR_ID          shift and go to state 19
    VOID_ID         shift and go to state 23
    FLOAT_LIT       shift and go to state 31
    INT_LIT         shift and go to state 33
    CHAR_LIT        shift and go to state 12
    STR_LIT         shift and go to state 9

    constant                       shift and go to state 1
    unary_expression               shift and go to state 3
    fxn_var_statement              shift and go to state 6
    scan_expression                shift and go to state 10
    external_declaration           shift and go to state 49
    fxn_declaration                shift and go to state 14
    postfix_expression             shift and go to state 15
    relational_expression          shift and go to state 17
    fxn_definition                 shift and go to state 18
    fxn_prot                       shift and go to state 20
    logical_or_expression          shift and go to state 21
    empty                          shift and go to state 22
    assignment_expression          shift and go to state 24
    primary_expression             shift and go to state 26
    logical_and_expression         shift and go to state 8
    add_expression                 shift and go to state 28
    equality_expression            shift and go to state 29
    mult_expression                shift and go to state 25
    identifier                     shift and go to state 35

state 7

    (95) unary_expression -> DEC . unary_expression
    (93) unary_expression -> . postfix_expression
    (94) unary_expression -> . INC unary_expression
    (95) unary_expression -> . DEC unary_expression
    (96) unary_expression -> . SUB_OP add_expression
    (97) unary_expression -> . NOT logical_or_expression
    (98) postfix_expression -> . primary_expression
    (99) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (100) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (101) postfix_expression -> . postfix_expression LPAREN RPAREN
    (102) postfix_expression -> . postfix_expression INC
    (103) postfix_expression -> . postfix_expression DEC
    (104) primary_expression -> . identifier
    (105) primary_expression -> . constant
    (106) primary_expression -> . LPAREN expression RPAREN
    (109) identifier -> . FLOAT_ID
    (110) identifier -> . INT_ID
    (111) identifier -> . CHAR_ID
    (112) identifier -> . STR_ID
    (113) identifier -> . VOID_ID
    (114) constant -> . FLOAT_LIT
    (115) constant -> . INT_LIT
    (116) constant -> . CHAR_LIT
    (117) constant -> . STR_LIT

    INC             shift and go to state 36
    DEC             shift and go to state 7
    SUB_OP          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 2
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 30
    CHAR_ID         shift and go to state 13
    STR_ID          shift and go to state 19
    VOID_ID         shift and go to state 23
    FLOAT_LIT       shift and go to state 31
    INT_LIT         shift and go to state 33
    CHAR_LIT        shift and go to state 12
    STR_LIT         shift and go to state 9

    constant                       shift and go to state 1
    unary_expression               shift and go to state 50
    postfix_expression             shift and go to state 15
    primary_expression             shift and go to state 26
    identifier                     shift and go to state 35

state 8

    (74) logical_or_expression -> logical_and_expression .
    (75) logical_or_expression -> logical_and_expression . OR logical_or_expression
    (77) logical_and_expression -> logical_and_expression . AND equality_expression

  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    RBRACKET        reduce using rule 74 (logical_or_expression -> logical_and_expression .)
    COMMA           reduce using rule 74 (logical_or_expression -> logical_and_expression .)
    SEMI            reduce using rule 74 (logical_or_expression -> logical_and_expression .)
    RPAREN          reduce using rule 74 (logical_or_expression -> logical_and_expression .)
    SCAN            reduce using rule 74 (logical_or_expression -> logical_and_expression .)
    INC             reduce using rule 74 (logical_or_expression -> logical_and_expression .)
    DEC             reduce using rule 74 (logical_or_expression -> logical_and_expression .)
    SUB_OP          reduce using rule 74 (logical_or_expression -> logical_and_expression .)
    NOT             reduce using rule 74 (logical_or_expression -> logical_and_expression .)
    VAR             reduce using rule 74 (logical_or_expression -> logical_and_expression .)
    LPAREN          reduce using rule 74 (logical_or_expression -> logical_and_expression .)
    FLOAT_ID        reduce using rule 74 (logical_or_expression -> logical_and_expression .)
    INT_ID          reduce using rule 74 (logical_or_expression -> logical_and_expression .)
    CHAR_ID         reduce using rule 74 (logical_or_expression -> logical_and_expression .)
    STR_ID          reduce using rule 74 (logical_or_expression -> logical_and_expression .)
    VOID_ID         reduce using rule 74 (logical_or_expression -> logical_and_expression .)
    FLOAT_LIT       reduce using rule 74 (logical_or_expression -> logical_and_expression .)
    INT_LIT         reduce using rule 74 (logical_or_expression -> logical_and_expression .)
    CHAR_LIT        reduce using rule 74 (logical_or_expression -> logical_and_expression .)
    STR_LIT         reduce using rule 74 (logical_or_expression -> logical_and_expression .)
    MAIN            reduce using rule 74 (logical_or_expression -> logical_and_expression .)
    $end            reduce using rule 74 (logical_or_expression -> logical_and_expression .)
    RBRACE          reduce using rule 74 (logical_or_expression -> logical_and_expression .)
    ASSIGN_OP       reduce using rule 74 (logical_or_expression -> logical_and_expression .)
    ADD_ASSIGN      reduce using rule 74 (logical_or_expression -> logical_and_expression .)
    MIN_ASSIGN      reduce using rule 74 (logical_or_expression -> logical_and_expression .)
    MUL_ASSIGN      reduce using rule 74 (logical_or_expression -> logical_and_expression .)
    DIV_ASSIGN      reduce using rule 74 (logical_or_expression -> logical_and_expression .)
    MOD_ASSIGN      reduce using rule 74 (logical_or_expression -> logical_and_expression .)
    MULT_OP         reduce using rule 74 (logical_or_expression -> logical_and_expression .)
    DIV_OP          reduce using rule 74 (logical_or_expression -> logical_and_expression .)
    MOD_OP          reduce using rule 74 (logical_or_expression -> logical_and_expression .)
    ADD_OP          reduce using rule 74 (logical_or_expression -> logical_and_expression .)
    LT              reduce using rule 74 (logical_or_expression -> logical_and_expression .)
    GT              reduce using rule 74 (logical_or_expression -> logical_and_expression .)
    LE              reduce using rule 74 (logical_or_expression -> logical_and_expression .)
    GE              reduce using rule 74 (logical_or_expression -> logical_and_expression .)
    EQ              reduce using rule 74 (logical_or_expression -> logical_and_expression .)
    NEQ             reduce using rule 74 (logical_or_expression -> logical_and_expression .)
    COLON           reduce using rule 74 (logical_or_expression -> logical_and_expression .)
    OR              shift and go to state 52
    AND             shift and go to state 51

  ! OR              [ reduce using rule 74 (logical_or_expression -> logical_and_expression .) ]
  ! AND             [ reduce using rule 74 (logical_or_expression -> logical_and_expression .) ]


state 9

    (117) constant -> STR_LIT .

    LBRACKET        reduce using rule 117 (constant -> STR_LIT .)
    LPAREN          reduce using rule 117 (constant -> STR_LIT .)
    INC             reduce using rule 117 (constant -> STR_LIT .)
    DEC             reduce using rule 117 (constant -> STR_LIT .)
    ASSIGN_OP       reduce using rule 117 (constant -> STR_LIT .)
    ADD_ASSIGN      reduce using rule 117 (constant -> STR_LIT .)
    MIN_ASSIGN      reduce using rule 117 (constant -> STR_LIT .)
    MUL_ASSIGN      reduce using rule 117 (constant -> STR_LIT .)
    DIV_ASSIGN      reduce using rule 117 (constant -> STR_LIT .)
    MOD_ASSIGN      reduce using rule 117 (constant -> STR_LIT .)
    MULT_OP         reduce using rule 117 (constant -> STR_LIT .)
    DIV_OP          reduce using rule 117 (constant -> STR_LIT .)
    MOD_OP          reduce using rule 117 (constant -> STR_LIT .)
    ADD_OP          reduce using rule 117 (constant -> STR_LIT .)
    SUB_OP          reduce using rule 117 (constant -> STR_LIT .)
    LT              reduce using rule 117 (constant -> STR_LIT .)
    GT              reduce using rule 117 (constant -> STR_LIT .)
    LE              reduce using rule 117 (constant -> STR_LIT .)
    GE              reduce using rule 117 (constant -> STR_LIT .)
    EQ              reduce using rule 117 (constant -> STR_LIT .)
    NEQ             reduce using rule 117 (constant -> STR_LIT .)
    OR              reduce using rule 117 (constant -> STR_LIT .)
    AND             reduce using rule 117 (constant -> STR_LIT .)
    SCAN            reduce using rule 117 (constant -> STR_LIT .)
    NOT             reduce using rule 117 (constant -> STR_LIT .)
    VAR             reduce using rule 117 (constant -> STR_LIT .)
    FLOAT_ID        reduce using rule 117 (constant -> STR_LIT .)
    INT_ID          reduce using rule 117 (constant -> STR_LIT .)
    CHAR_ID         reduce using rule 117 (constant -> STR_LIT .)
    STR_ID          reduce using rule 117 (constant -> STR_LIT .)
    VOID_ID         reduce using rule 117 (constant -> STR_LIT .)
    FLOAT_LIT       reduce using rule 117 (constant -> STR_LIT .)
    INT_LIT         reduce using rule 117 (constant -> STR_LIT .)
    CHAR_LIT        reduce using rule 117 (constant -> STR_LIT .)
    STR_LIT         reduce using rule 117 (constant -> STR_LIT .)
    MAIN            reduce using rule 117 (constant -> STR_LIT .)
    RPAREN          reduce using rule 117 (constant -> STR_LIT .)
    COMMA           reduce using rule 117 (constant -> STR_LIT .)
    $end            reduce using rule 117 (constant -> STR_LIT .)
    SEMI            reduce using rule 117 (constant -> STR_LIT .)
    RBRACKET        reduce using rule 117 (constant -> STR_LIT .)
    RBRACE          reduce using rule 117 (constant -> STR_LIT .)
    COLON           reduce using rule 117 (constant -> STR_LIT .)


state 10

    (62) assignment_expression -> scan_expression .

    COMMA           reduce using rule 62 (assignment_expression -> scan_expression .)
    SEMI            reduce using rule 62 (assignment_expression -> scan_expression .)
    SCAN            reduce using rule 62 (assignment_expression -> scan_expression .)
    INC             reduce using rule 62 (assignment_expression -> scan_expression .)
    DEC             reduce using rule 62 (assignment_expression -> scan_expression .)
    SUB_OP          reduce using rule 62 (assignment_expression -> scan_expression .)
    NOT             reduce using rule 62 (assignment_expression -> scan_expression .)
    VAR             reduce using rule 62 (assignment_expression -> scan_expression .)
    LPAREN          reduce using rule 62 (assignment_expression -> scan_expression .)
    FLOAT_ID        reduce using rule 62 (assignment_expression -> scan_expression .)
    INT_ID          reduce using rule 62 (assignment_expression -> scan_expression .)
    CHAR_ID         reduce using rule 62 (assignment_expression -> scan_expression .)
    STR_ID          reduce using rule 62 (assignment_expression -> scan_expression .)
    VOID_ID         reduce using rule 62 (assignment_expression -> scan_expression .)
    FLOAT_LIT       reduce using rule 62 (assignment_expression -> scan_expression .)
    INT_LIT         reduce using rule 62 (assignment_expression -> scan_expression .)
    CHAR_LIT        reduce using rule 62 (assignment_expression -> scan_expression .)
    STR_LIT         reduce using rule 62 (assignment_expression -> scan_expression .)
    MAIN            reduce using rule 62 (assignment_expression -> scan_expression .)
    RPAREN          reduce using rule 62 (assignment_expression -> scan_expression .)
    $end            reduce using rule 62 (assignment_expression -> scan_expression .)
    RBRACKET        reduce using rule 62 (assignment_expression -> scan_expression .)
    RBRACE          reduce using rule 62 (assignment_expression -> scan_expression .)


state 11

    (1) start -> external_declaration . main external_declaration
    (5) main -> . MAIN LPAREN empty RPAREN compound_statement

    MAIN            shift and go to state 53

    main                           shift and go to state 54

state 12

    (116) constant -> CHAR_LIT .

    LBRACKET        reduce using rule 116 (constant -> CHAR_LIT .)
    LPAREN          reduce using rule 116 (constant -> CHAR_LIT .)
    INC             reduce using rule 116 (constant -> CHAR_LIT .)
    DEC             reduce using rule 116 (constant -> CHAR_LIT .)
    ASSIGN_OP       reduce using rule 116 (constant -> CHAR_LIT .)
    ADD_ASSIGN      reduce using rule 116 (constant -> CHAR_LIT .)
    MIN_ASSIGN      reduce using rule 116 (constant -> CHAR_LIT .)
    MUL_ASSIGN      reduce using rule 116 (constant -> CHAR_LIT .)
    DIV_ASSIGN      reduce using rule 116 (constant -> CHAR_LIT .)
    MOD_ASSIGN      reduce using rule 116 (constant -> CHAR_LIT .)
    MULT_OP         reduce using rule 116 (constant -> CHAR_LIT .)
    DIV_OP          reduce using rule 116 (constant -> CHAR_LIT .)
    MOD_OP          reduce using rule 116 (constant -> CHAR_LIT .)
    ADD_OP          reduce using rule 116 (constant -> CHAR_LIT .)
    SUB_OP          reduce using rule 116 (constant -> CHAR_LIT .)
    LT              reduce using rule 116 (constant -> CHAR_LIT .)
    GT              reduce using rule 116 (constant -> CHAR_LIT .)
    LE              reduce using rule 116 (constant -> CHAR_LIT .)
    GE              reduce using rule 116 (constant -> CHAR_LIT .)
    EQ              reduce using rule 116 (constant -> CHAR_LIT .)
    NEQ             reduce using rule 116 (constant -> CHAR_LIT .)
    OR              reduce using rule 116 (constant -> CHAR_LIT .)
    AND             reduce using rule 116 (constant -> CHAR_LIT .)
    SCAN            reduce using rule 116 (constant -> CHAR_LIT .)
    NOT             reduce using rule 116 (constant -> CHAR_LIT .)
    VAR             reduce using rule 116 (constant -> CHAR_LIT .)
    FLOAT_ID        reduce using rule 116 (constant -> CHAR_LIT .)
    INT_ID          reduce using rule 116 (constant -> CHAR_LIT .)
    CHAR_ID         reduce using rule 116 (constant -> CHAR_LIT .)
    STR_ID          reduce using rule 116 (constant -> CHAR_LIT .)
    VOID_ID         reduce using rule 116 (constant -> CHAR_LIT .)
    FLOAT_LIT       reduce using rule 116 (constant -> CHAR_LIT .)
    INT_LIT         reduce using rule 116 (constant -> CHAR_LIT .)
    CHAR_LIT        reduce using rule 116 (constant -> CHAR_LIT .)
    STR_LIT         reduce using rule 116 (constant -> CHAR_LIT .)
    MAIN            reduce using rule 116 (constant -> CHAR_LIT .)
    RPAREN          reduce using rule 116 (constant -> CHAR_LIT .)
    COMMA           reduce using rule 116 (constant -> CHAR_LIT .)
    $end            reduce using rule 116 (constant -> CHAR_LIT .)
    SEMI            reduce using rule 116 (constant -> CHAR_LIT .)
    RBRACKET        reduce using rule 116 (constant -> CHAR_LIT .)
    RBRACE          reduce using rule 116 (constant -> CHAR_LIT .)
    COLON           reduce using rule 116 (constant -> CHAR_LIT .)


state 13

    (111) identifier -> CHAR_ID .

    LBRACKET        reduce using rule 111 (identifier -> CHAR_ID .)
    LPAREN          reduce using rule 111 (identifier -> CHAR_ID .)
    INC             reduce using rule 111 (identifier -> CHAR_ID .)
    DEC             reduce using rule 111 (identifier -> CHAR_ID .)
    ASSIGN_OP       reduce using rule 111 (identifier -> CHAR_ID .)
    ADD_ASSIGN      reduce using rule 111 (identifier -> CHAR_ID .)
    MIN_ASSIGN      reduce using rule 111 (identifier -> CHAR_ID .)
    MUL_ASSIGN      reduce using rule 111 (identifier -> CHAR_ID .)
    DIV_ASSIGN      reduce using rule 111 (identifier -> CHAR_ID .)
    MOD_ASSIGN      reduce using rule 111 (identifier -> CHAR_ID .)
    MULT_OP         reduce using rule 111 (identifier -> CHAR_ID .)
    DIV_OP          reduce using rule 111 (identifier -> CHAR_ID .)
    MOD_OP          reduce using rule 111 (identifier -> CHAR_ID .)
    ADD_OP          reduce using rule 111 (identifier -> CHAR_ID .)
    SUB_OP          reduce using rule 111 (identifier -> CHAR_ID .)
    LT              reduce using rule 111 (identifier -> CHAR_ID .)
    GT              reduce using rule 111 (identifier -> CHAR_ID .)
    LE              reduce using rule 111 (identifier -> CHAR_ID .)
    GE              reduce using rule 111 (identifier -> CHAR_ID .)
    EQ              reduce using rule 111 (identifier -> CHAR_ID .)
    NEQ             reduce using rule 111 (identifier -> CHAR_ID .)
    OR              reduce using rule 111 (identifier -> CHAR_ID .)
    AND             reduce using rule 111 (identifier -> CHAR_ID .)
    COMMA           reduce using rule 111 (identifier -> CHAR_ID .)
    SEMI            reduce using rule 111 (identifier -> CHAR_ID .)
    RPAREN          reduce using rule 111 (identifier -> CHAR_ID .)
    SCAN            reduce using rule 111 (identifier -> CHAR_ID .)
    NOT             reduce using rule 111 (identifier -> CHAR_ID .)
    VAR             reduce using rule 111 (identifier -> CHAR_ID .)
    FLOAT_ID        reduce using rule 111 (identifier -> CHAR_ID .)
    INT_ID          reduce using rule 111 (identifier -> CHAR_ID .)
    CHAR_ID         reduce using rule 111 (identifier -> CHAR_ID .)
    STR_ID          reduce using rule 111 (identifier -> CHAR_ID .)
    VOID_ID         reduce using rule 111 (identifier -> CHAR_ID .)
    FLOAT_LIT       reduce using rule 111 (identifier -> CHAR_ID .)
    INT_LIT         reduce using rule 111 (identifier -> CHAR_ID .)
    CHAR_LIT        reduce using rule 111 (identifier -> CHAR_ID .)
    STR_LIT         reduce using rule 111 (identifier -> CHAR_ID .)
    MAIN            reduce using rule 111 (identifier -> CHAR_ID .)
    $end            reduce using rule 111 (identifier -> CHAR_ID .)
    RBRACKET        reduce using rule 111 (identifier -> CHAR_ID .)
    RBRACE          reduce using rule 111 (identifier -> CHAR_ID .)
    COLON           reduce using rule 111 (identifier -> CHAR_ID .)


state 14

    (23) fxn_prot -> fxn_declaration . SEMI
    (24) fxn_definition -> fxn_declaration . compound_statement
    (38) compound_statement -> . LBRACE mix_list RBRACE
    (39) compound_statement -> . LBRACE RBRACE

    SEMI            shift and go to state 56
    LBRACE          shift and go to state 55

    compound_statement             shift and go to state 57

state 15

    (93) unary_expression -> postfix_expression .
    (99) postfix_expression -> postfix_expression . LBRACKET expression RBRACKET
    (100) postfix_expression -> postfix_expression . LPAREN argument_expression_list RPAREN
    (101) postfix_expression -> postfix_expression . LPAREN RPAREN
    (102) postfix_expression -> postfix_expression . INC
    (103) postfix_expression -> postfix_expression . DEC

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for INC resolved as shift
  ! shift/reduce conflict for DEC resolved as shift
    ASSIGN_OP       reduce using rule 93 (unary_expression -> postfix_expression .)
    ADD_ASSIGN      reduce using rule 93 (unary_expression -> postfix_expression .)
    MIN_ASSIGN      reduce using rule 93 (unary_expression -> postfix_expression .)
    MUL_ASSIGN      reduce using rule 93 (unary_expression -> postfix_expression .)
    DIV_ASSIGN      reduce using rule 93 (unary_expression -> postfix_expression .)
    MOD_ASSIGN      reduce using rule 93 (unary_expression -> postfix_expression .)
    MULT_OP         reduce using rule 93 (unary_expression -> postfix_expression .)
    DIV_OP          reduce using rule 93 (unary_expression -> postfix_expression .)
    MOD_OP          reduce using rule 93 (unary_expression -> postfix_expression .)
    ADD_OP          reduce using rule 93 (unary_expression -> postfix_expression .)
    SUB_OP          reduce using rule 93 (unary_expression -> postfix_expression .)
    LT              reduce using rule 93 (unary_expression -> postfix_expression .)
    GT              reduce using rule 93 (unary_expression -> postfix_expression .)
    LE              reduce using rule 93 (unary_expression -> postfix_expression .)
    GE              reduce using rule 93 (unary_expression -> postfix_expression .)
    EQ              reduce using rule 93 (unary_expression -> postfix_expression .)
    NEQ             reduce using rule 93 (unary_expression -> postfix_expression .)
    OR              reduce using rule 93 (unary_expression -> postfix_expression .)
    AND             reduce using rule 93 (unary_expression -> postfix_expression .)
    SCAN            reduce using rule 93 (unary_expression -> postfix_expression .)
    NOT             reduce using rule 93 (unary_expression -> postfix_expression .)
    VAR             reduce using rule 93 (unary_expression -> postfix_expression .)
    FLOAT_ID        reduce using rule 93 (unary_expression -> postfix_expression .)
    INT_ID          reduce using rule 93 (unary_expression -> postfix_expression .)
    CHAR_ID         reduce using rule 93 (unary_expression -> postfix_expression .)
    STR_ID          reduce using rule 93 (unary_expression -> postfix_expression .)
    VOID_ID         reduce using rule 93 (unary_expression -> postfix_expression .)
    FLOAT_LIT       reduce using rule 93 (unary_expression -> postfix_expression .)
    INT_LIT         reduce using rule 93 (unary_expression -> postfix_expression .)
    CHAR_LIT        reduce using rule 93 (unary_expression -> postfix_expression .)
    STR_LIT         reduce using rule 93 (unary_expression -> postfix_expression .)
    MAIN            reduce using rule 93 (unary_expression -> postfix_expression .)
    RPAREN          reduce using rule 93 (unary_expression -> postfix_expression .)
    COMMA           reduce using rule 93 (unary_expression -> postfix_expression .)
    $end            reduce using rule 93 (unary_expression -> postfix_expression .)
    SEMI            reduce using rule 93 (unary_expression -> postfix_expression .)
    RBRACKET        reduce using rule 93 (unary_expression -> postfix_expression .)
    RBRACE          reduce using rule 93 (unary_expression -> postfix_expression .)
    COLON           reduce using rule 93 (unary_expression -> postfix_expression .)
    LBRACKET        shift and go to state 58
    LPAREN          shift and go to state 59
    INC             shift and go to state 61
    DEC             shift and go to state 60

  ! INC             [ reduce using rule 93 (unary_expression -> postfix_expression .) ]
  ! DEC             [ reduce using rule 93 (unary_expression -> postfix_expression .) ]
  ! LPAREN          [ reduce using rule 93 (unary_expression -> postfix_expression .) ]


state 16

    (0) S' -> start .



state 17

    (78) equality_expression -> relational_expression .
    (82) relational_expression -> relational_expression . LT add_expression
    (83) relational_expression -> relational_expression . GT add_expression
    (84) relational_expression -> relational_expression . LE add_expression
    (85) relational_expression -> relational_expression . GE add_expression

  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    EQ              reduce using rule 78 (equality_expression -> relational_expression .)
    NEQ             reduce using rule 78 (equality_expression -> relational_expression .)
    OR              reduce using rule 78 (equality_expression -> relational_expression .)
    AND             reduce using rule 78 (equality_expression -> relational_expression .)
    RPAREN          reduce using rule 78 (equality_expression -> relational_expression .)
    COMMA           reduce using rule 78 (equality_expression -> relational_expression .)
    SEMI            reduce using rule 78 (equality_expression -> relational_expression .)
    ASSIGN_OP       reduce using rule 78 (equality_expression -> relational_expression .)
    ADD_ASSIGN      reduce using rule 78 (equality_expression -> relational_expression .)
    MIN_ASSIGN      reduce using rule 78 (equality_expression -> relational_expression .)
    MUL_ASSIGN      reduce using rule 78 (equality_expression -> relational_expression .)
    DIV_ASSIGN      reduce using rule 78 (equality_expression -> relational_expression .)
    MOD_ASSIGN      reduce using rule 78 (equality_expression -> relational_expression .)
    MULT_OP         reduce using rule 78 (equality_expression -> relational_expression .)
    DIV_OP          reduce using rule 78 (equality_expression -> relational_expression .)
    MOD_OP          reduce using rule 78 (equality_expression -> relational_expression .)
    ADD_OP          reduce using rule 78 (equality_expression -> relational_expression .)
    SUB_OP          reduce using rule 78 (equality_expression -> relational_expression .)
    SCAN            reduce using rule 78 (equality_expression -> relational_expression .)
    INC             reduce using rule 78 (equality_expression -> relational_expression .)
    DEC             reduce using rule 78 (equality_expression -> relational_expression .)
    NOT             reduce using rule 78 (equality_expression -> relational_expression .)
    VAR             reduce using rule 78 (equality_expression -> relational_expression .)
    LPAREN          reduce using rule 78 (equality_expression -> relational_expression .)
    FLOAT_ID        reduce using rule 78 (equality_expression -> relational_expression .)
    INT_ID          reduce using rule 78 (equality_expression -> relational_expression .)
    CHAR_ID         reduce using rule 78 (equality_expression -> relational_expression .)
    STR_ID          reduce using rule 78 (equality_expression -> relational_expression .)
    VOID_ID         reduce using rule 78 (equality_expression -> relational_expression .)
    FLOAT_LIT       reduce using rule 78 (equality_expression -> relational_expression .)
    INT_LIT         reduce using rule 78 (equality_expression -> relational_expression .)
    CHAR_LIT        reduce using rule 78 (equality_expression -> relational_expression .)
    STR_LIT         reduce using rule 78 (equality_expression -> relational_expression .)
    MAIN            reduce using rule 78 (equality_expression -> relational_expression .)
    $end            reduce using rule 78 (equality_expression -> relational_expression .)
    RBRACKET        reduce using rule 78 (equality_expression -> relational_expression .)
    RBRACE          reduce using rule 78 (equality_expression -> relational_expression .)
    COLON           reduce using rule 78 (equality_expression -> relational_expression .)
    LT              shift and go to state 63
    GT              shift and go to state 62
    LE              shift and go to state 65
    GE              shift and go to state 64

  ! LT              [ reduce using rule 78 (equality_expression -> relational_expression .) ]
  ! GT              [ reduce using rule 78 (equality_expression -> relational_expression .) ]
  ! LE              [ reduce using rule 78 (equality_expression -> relational_expression .) ]
  ! GE              [ reduce using rule 78 (equality_expression -> relational_expression .) ]


state 18

    (7) fxn_var_statement -> fxn_definition .

    SCAN            reduce using rule 7 (fxn_var_statement -> fxn_definition .)
    INC             reduce using rule 7 (fxn_var_statement -> fxn_definition .)
    DEC             reduce using rule 7 (fxn_var_statement -> fxn_definition .)
    SUB_OP          reduce using rule 7 (fxn_var_statement -> fxn_definition .)
    NOT             reduce using rule 7 (fxn_var_statement -> fxn_definition .)
    VAR             reduce using rule 7 (fxn_var_statement -> fxn_definition .)
    LPAREN          reduce using rule 7 (fxn_var_statement -> fxn_definition .)
    FLOAT_ID        reduce using rule 7 (fxn_var_statement -> fxn_definition .)
    INT_ID          reduce using rule 7 (fxn_var_statement -> fxn_definition .)
    CHAR_ID         reduce using rule 7 (fxn_var_statement -> fxn_definition .)
    STR_ID          reduce using rule 7 (fxn_var_statement -> fxn_definition .)
    VOID_ID         reduce using rule 7 (fxn_var_statement -> fxn_definition .)
    FLOAT_LIT       reduce using rule 7 (fxn_var_statement -> fxn_definition .)
    INT_LIT         reduce using rule 7 (fxn_var_statement -> fxn_definition .)
    CHAR_LIT        reduce using rule 7 (fxn_var_statement -> fxn_definition .)
    STR_LIT         reduce using rule 7 (fxn_var_statement -> fxn_definition .)
    MAIN            reduce using rule 7 (fxn_var_statement -> fxn_definition .)
    $end            reduce using rule 7 (fxn_var_statement -> fxn_definition .)


state 19

    (112) identifier -> STR_ID .

    LBRACKET        reduce using rule 112 (identifier -> STR_ID .)
    LPAREN          reduce using rule 112 (identifier -> STR_ID .)
    INC             reduce using rule 112 (identifier -> STR_ID .)
    DEC             reduce using rule 112 (identifier -> STR_ID .)
    ASSIGN_OP       reduce using rule 112 (identifier -> STR_ID .)
    ADD_ASSIGN      reduce using rule 112 (identifier -> STR_ID .)
    MIN_ASSIGN      reduce using rule 112 (identifier -> STR_ID .)
    MUL_ASSIGN      reduce using rule 112 (identifier -> STR_ID .)
    DIV_ASSIGN      reduce using rule 112 (identifier -> STR_ID .)
    MOD_ASSIGN      reduce using rule 112 (identifier -> STR_ID .)
    MULT_OP         reduce using rule 112 (identifier -> STR_ID .)
    DIV_OP          reduce using rule 112 (identifier -> STR_ID .)
    MOD_OP          reduce using rule 112 (identifier -> STR_ID .)
    ADD_OP          reduce using rule 112 (identifier -> STR_ID .)
    SUB_OP          reduce using rule 112 (identifier -> STR_ID .)
    LT              reduce using rule 112 (identifier -> STR_ID .)
    GT              reduce using rule 112 (identifier -> STR_ID .)
    LE              reduce using rule 112 (identifier -> STR_ID .)
    GE              reduce using rule 112 (identifier -> STR_ID .)
    EQ              reduce using rule 112 (identifier -> STR_ID .)
    NEQ             reduce using rule 112 (identifier -> STR_ID .)
    OR              reduce using rule 112 (identifier -> STR_ID .)
    AND             reduce using rule 112 (identifier -> STR_ID .)
    COMMA           reduce using rule 112 (identifier -> STR_ID .)
    SEMI            reduce using rule 112 (identifier -> STR_ID .)
    RPAREN          reduce using rule 112 (identifier -> STR_ID .)
    SCAN            reduce using rule 112 (identifier -> STR_ID .)
    NOT             reduce using rule 112 (identifier -> STR_ID .)
    VAR             reduce using rule 112 (identifier -> STR_ID .)
    FLOAT_ID        reduce using rule 112 (identifier -> STR_ID .)
    INT_ID          reduce using rule 112 (identifier -> STR_ID .)
    CHAR_ID         reduce using rule 112 (identifier -> STR_ID .)
    STR_ID          reduce using rule 112 (identifier -> STR_ID .)
    VOID_ID         reduce using rule 112 (identifier -> STR_ID .)
    FLOAT_LIT       reduce using rule 112 (identifier -> STR_ID .)
    INT_LIT         reduce using rule 112 (identifier -> STR_ID .)
    CHAR_LIT        reduce using rule 112 (identifier -> STR_ID .)
    STR_LIT         reduce using rule 112 (identifier -> STR_ID .)
    MAIN            reduce using rule 112 (identifier -> STR_ID .)
    $end            reduce using rule 112 (identifier -> STR_ID .)
    RBRACKET        reduce using rule 112 (identifier -> STR_ID .)
    RBRACE          reduce using rule 112 (identifier -> STR_ID .)
    COLON           reduce using rule 112 (identifier -> STR_ID .)


state 20

    (6) fxn_var_statement -> fxn_prot .

    SCAN            reduce using rule 6 (fxn_var_statement -> fxn_prot .)
    INC             reduce using rule 6 (fxn_var_statement -> fxn_prot .)
    DEC             reduce using rule 6 (fxn_var_statement -> fxn_prot .)
    SUB_OP          reduce using rule 6 (fxn_var_statement -> fxn_prot .)
    NOT             reduce using rule 6 (fxn_var_statement -> fxn_prot .)
    VAR             reduce using rule 6 (fxn_var_statement -> fxn_prot .)
    LPAREN          reduce using rule 6 (fxn_var_statement -> fxn_prot .)
    FLOAT_ID        reduce using rule 6 (fxn_var_statement -> fxn_prot .)
    INT_ID          reduce using rule 6 (fxn_var_statement -> fxn_prot .)
    CHAR_ID         reduce using rule 6 (fxn_var_statement -> fxn_prot .)
    STR_ID          reduce using rule 6 (fxn_var_statement -> fxn_prot .)
    VOID_ID         reduce using rule 6 (fxn_var_statement -> fxn_prot .)
    FLOAT_LIT       reduce using rule 6 (fxn_var_statement -> fxn_prot .)
    INT_LIT         reduce using rule 6 (fxn_var_statement -> fxn_prot .)
    CHAR_LIT        reduce using rule 6 (fxn_var_statement -> fxn_prot .)
    STR_LIT         reduce using rule 6 (fxn_var_statement -> fxn_prot .)
    MAIN            reduce using rule 6 (fxn_var_statement -> fxn_prot .)
    $end            reduce using rule 6 (fxn_var_statement -> fxn_prot .)


state 21

    (69) scan_expression -> logical_or_expression .

    SCAN            reduce using rule 69 (scan_expression -> logical_or_expression .)
    INC             reduce using rule 69 (scan_expression -> logical_or_expression .)
    DEC             reduce using rule 69 (scan_expression -> logical_or_expression .)
    SUB_OP          reduce using rule 69 (scan_expression -> logical_or_expression .)
    NOT             reduce using rule 69 (scan_expression -> logical_or_expression .)
    VAR             reduce using rule 69 (scan_expression -> logical_or_expression .)
    LPAREN          reduce using rule 69 (scan_expression -> logical_or_expression .)
    FLOAT_ID        reduce using rule 69 (scan_expression -> logical_or_expression .)
    INT_ID          reduce using rule 69 (scan_expression -> logical_or_expression .)
    CHAR_ID         reduce using rule 69 (scan_expression -> logical_or_expression .)
    STR_ID          reduce using rule 69 (scan_expression -> logical_or_expression .)
    VOID_ID         reduce using rule 69 (scan_expression -> logical_or_expression .)
    FLOAT_LIT       reduce using rule 69 (scan_expression -> logical_or_expression .)
    INT_LIT         reduce using rule 69 (scan_expression -> logical_or_expression .)
    CHAR_LIT        reduce using rule 69 (scan_expression -> logical_or_expression .)
    STR_LIT         reduce using rule 69 (scan_expression -> logical_or_expression .)
    MAIN            reduce using rule 69 (scan_expression -> logical_or_expression .)
    $end            reduce using rule 69 (scan_expression -> logical_or_expression .)
    RPAREN          reduce using rule 69 (scan_expression -> logical_or_expression .)
    COMMA           reduce using rule 69 (scan_expression -> logical_or_expression .)
    SEMI            reduce using rule 69 (scan_expression -> logical_or_expression .)
    RBRACKET        reduce using rule 69 (scan_expression -> logical_or_expression .)
    RBRACE          reduce using rule 69 (scan_expression -> logical_or_expression .)


state 22

    (4) external_declaration -> empty .

    MAIN            reduce using rule 4 (external_declaration -> empty .)
    $end            reduce using rule 4 (external_declaration -> empty .)


state 23

    (113) identifier -> VOID_ID .

    LBRACKET        reduce using rule 113 (identifier -> VOID_ID .)
    LPAREN          reduce using rule 113 (identifier -> VOID_ID .)
    INC             reduce using rule 113 (identifier -> VOID_ID .)
    DEC             reduce using rule 113 (identifier -> VOID_ID .)
    ASSIGN_OP       reduce using rule 113 (identifier -> VOID_ID .)
    ADD_ASSIGN      reduce using rule 113 (identifier -> VOID_ID .)
    MIN_ASSIGN      reduce using rule 113 (identifier -> VOID_ID .)
    MUL_ASSIGN      reduce using rule 113 (identifier -> VOID_ID .)
    DIV_ASSIGN      reduce using rule 113 (identifier -> VOID_ID .)
    MOD_ASSIGN      reduce using rule 113 (identifier -> VOID_ID .)
    MULT_OP         reduce using rule 113 (identifier -> VOID_ID .)
    DIV_OP          reduce using rule 113 (identifier -> VOID_ID .)
    MOD_OP          reduce using rule 113 (identifier -> VOID_ID .)
    ADD_OP          reduce using rule 113 (identifier -> VOID_ID .)
    SUB_OP          reduce using rule 113 (identifier -> VOID_ID .)
    LT              reduce using rule 113 (identifier -> VOID_ID .)
    GT              reduce using rule 113 (identifier -> VOID_ID .)
    LE              reduce using rule 113 (identifier -> VOID_ID .)
    GE              reduce using rule 113 (identifier -> VOID_ID .)
    EQ              reduce using rule 113 (identifier -> VOID_ID .)
    NEQ             reduce using rule 113 (identifier -> VOID_ID .)
    OR              reduce using rule 113 (identifier -> VOID_ID .)
    AND             reduce using rule 113 (identifier -> VOID_ID .)
    COMMA           reduce using rule 113 (identifier -> VOID_ID .)
    SEMI            reduce using rule 113 (identifier -> VOID_ID .)
    RPAREN          reduce using rule 113 (identifier -> VOID_ID .)
    SCAN            reduce using rule 113 (identifier -> VOID_ID .)
    NOT             reduce using rule 113 (identifier -> VOID_ID .)
    VAR             reduce using rule 113 (identifier -> VOID_ID .)
    FLOAT_ID        reduce using rule 113 (identifier -> VOID_ID .)
    INT_ID          reduce using rule 113 (identifier -> VOID_ID .)
    CHAR_ID         reduce using rule 113 (identifier -> VOID_ID .)
    STR_ID          reduce using rule 113 (identifier -> VOID_ID .)
    VOID_ID         reduce using rule 113 (identifier -> VOID_ID .)
    FLOAT_LIT       reduce using rule 113 (identifier -> VOID_ID .)
    INT_LIT         reduce using rule 113 (identifier -> VOID_ID .)
    CHAR_LIT        reduce using rule 113 (identifier -> VOID_ID .)
    STR_LIT         reduce using rule 113 (identifier -> VOID_ID .)
    MAIN            reduce using rule 113 (identifier -> VOID_ID .)
    $end            reduce using rule 113 (identifier -> VOID_ID .)
    RBRACKET        reduce using rule 113 (identifier -> VOID_ID .)
    RBRACE          reduce using rule 113 (identifier -> VOID_ID .)
    COLON           reduce using rule 113 (identifier -> VOID_ID .)


state 24

    (2) external_declaration -> assignment_expression . external_declaration
    (2) external_declaration -> . assignment_expression external_declaration
    (3) external_declaration -> . fxn_var_statement external_declaration
    (4) external_declaration -> . empty
    (62) assignment_expression -> . scan_expression
    (63) assignment_expression -> . unary_expression ASSIGN_OP assignment_expression
    (64) assignment_expression -> . unary_expression ADD_ASSIGN assignment_expression
    (65) assignment_expression -> . unary_expression MIN_ASSIGN assignment_expression
    (66) assignment_expression -> . unary_expression MUL_ASSIGN assignment_expression
    (67) assignment_expression -> . unary_expression DIV_ASSIGN assignment_expression
    (68) assignment_expression -> . unary_expression MOD_ASSIGN assignment_expression
    (6) fxn_var_statement -> . fxn_prot
    (7) fxn_var_statement -> . fxn_definition
    (118) empty -> .
    (69) scan_expression -> . logical_or_expression
    (70) scan_expression -> . SCAN LPAREN RPAREN
    (93) unary_expression -> . postfix_expression
    (94) unary_expression -> . INC unary_expression
    (95) unary_expression -> . DEC unary_expression
    (96) unary_expression -> . SUB_OP add_expression
    (97) unary_expression -> . NOT logical_or_expression
    (23) fxn_prot -> . fxn_declaration SEMI
    (24) fxn_definition -> . fxn_declaration compound_statement
    (74) logical_or_expression -> . logical_and_expression
    (75) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (98) postfix_expression -> . primary_expression
    (99) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (100) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (101) postfix_expression -> . postfix_expression LPAREN RPAREN
    (102) postfix_expression -> . postfix_expression INC
    (103) postfix_expression -> . postfix_expression DEC
    (25) fxn_declaration -> . VAR identifier LPAREN fxn_prot_args RPAREN
    (26) fxn_declaration -> . VAR identifier LPAREN empty RPAREN
    (76) logical_and_expression -> . equality_expression
    (77) logical_and_expression -> . logical_and_expression AND equality_expression
    (104) primary_expression -> . identifier
    (105) primary_expression -> . constant
    (106) primary_expression -> . LPAREN expression RPAREN
    (78) equality_expression -> . relational_expression
    (79) equality_expression -> . equality_expression EQ relational_expression
    (80) equality_expression -> . equality_expression NEQ relational_expression
    (109) identifier -> . FLOAT_ID
    (110) identifier -> . INT_ID
    (111) identifier -> . CHAR_ID
    (112) identifier -> . STR_ID
    (113) identifier -> . VOID_ID
    (114) constant -> . FLOAT_LIT
    (115) constant -> . INT_LIT
    (116) constant -> . CHAR_LIT
    (117) constant -> . STR_LIT
    (81) relational_expression -> . add_expression
    (82) relational_expression -> . relational_expression LT add_expression
    (83) relational_expression -> . relational_expression GT add_expression
    (84) relational_expression -> . relational_expression LE add_expression
    (85) relational_expression -> . relational_expression GE add_expression
    (86) add_expression -> . mult_expression
    (87) add_expression -> . add_expression ADD_OP mult_expression
    (88) add_expression -> . add_expression SUB_OP mult_expression
    (89) mult_expression -> . unary_expression
    (90) mult_expression -> . mult_expression MULT_OP unary_expression
    (91) mult_expression -> . mult_expression DIV_OP unary_expression
    (92) mult_expression -> . mult_expression MOD_OP unary_expression

    MAIN            reduce using rule 118 (empty -> .)
    $end            reduce using rule 118 (empty -> .)
    SCAN            shift and go to state 4
    INC             shift and go to state 36
    DEC             shift and go to state 7
    SUB_OP          shift and go to state 32
    NOT             shift and go to state 34
    VAR             shift and go to state 27
    LPAREN          shift and go to state 2
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 30
    CHAR_ID         shift and go to state 13
    STR_ID          shift and go to state 19
    VOID_ID         shift and go to state 23
    FLOAT_LIT       shift and go to state 31
    INT_LIT         shift and go to state 33
    CHAR_LIT        shift and go to state 12
    STR_LIT         shift and go to state 9

    constant                       shift and go to state 1
    unary_expression               shift and go to state 3
    fxn_var_statement              shift and go to state 6
    scan_expression                shift and go to state 10
    external_declaration           shift and go to state 66
    fxn_declaration                shift and go to state 14
    postfix_expression             shift and go to state 15
    relational_expression          shift and go to state 17
    fxn_definition                 shift and go to state 18
    fxn_prot                       shift and go to state 20
    logical_or_expression          shift and go to state 21
    empty                          shift and go to state 22
    assignment_expression          shift and go to state 24
    primary_expression             shift and go to state 26
    logical_and_expression         shift and go to state 8
    add_expression                 shift and go to state 28
    equality_expression            shift and go to state 29
    mult_expression                shift and go to state 25
    identifier                     shift and go to state 35

state 25

    (86) add_expression -> mult_expression .
    (90) mult_expression -> mult_expression . MULT_OP unary_expression
    (91) mult_expression -> mult_expression . DIV_OP unary_expression
    (92) mult_expression -> mult_expression . MOD_OP unary_expression

  ! shift/reduce conflict for MULT_OP resolved as shift
  ! shift/reduce conflict for DIV_OP resolved as shift
  ! shift/reduce conflict for MOD_OP resolved as shift
    ASSIGN_OP       reduce using rule 86 (add_expression -> mult_expression .)
    ADD_ASSIGN      reduce using rule 86 (add_expression -> mult_expression .)
    MIN_ASSIGN      reduce using rule 86 (add_expression -> mult_expression .)
    MUL_ASSIGN      reduce using rule 86 (add_expression -> mult_expression .)
    DIV_ASSIGN      reduce using rule 86 (add_expression -> mult_expression .)
    MOD_ASSIGN      reduce using rule 86 (add_expression -> mult_expression .)
    ADD_OP          reduce using rule 86 (add_expression -> mult_expression .)
    SUB_OP          reduce using rule 86 (add_expression -> mult_expression .)
    LT              reduce using rule 86 (add_expression -> mult_expression .)
    GT              reduce using rule 86 (add_expression -> mult_expression .)
    LE              reduce using rule 86 (add_expression -> mult_expression .)
    GE              reduce using rule 86 (add_expression -> mult_expression .)
    EQ              reduce using rule 86 (add_expression -> mult_expression .)
    NEQ             reduce using rule 86 (add_expression -> mult_expression .)
    OR              reduce using rule 86 (add_expression -> mult_expression .)
    AND             reduce using rule 86 (add_expression -> mult_expression .)
    SCAN            reduce using rule 86 (add_expression -> mult_expression .)
    INC             reduce using rule 86 (add_expression -> mult_expression .)
    DEC             reduce using rule 86 (add_expression -> mult_expression .)
    NOT             reduce using rule 86 (add_expression -> mult_expression .)
    VAR             reduce using rule 86 (add_expression -> mult_expression .)
    LPAREN          reduce using rule 86 (add_expression -> mult_expression .)
    FLOAT_ID        reduce using rule 86 (add_expression -> mult_expression .)
    INT_ID          reduce using rule 86 (add_expression -> mult_expression .)
    CHAR_ID         reduce using rule 86 (add_expression -> mult_expression .)
    STR_ID          reduce using rule 86 (add_expression -> mult_expression .)
    VOID_ID         reduce using rule 86 (add_expression -> mult_expression .)
    FLOAT_LIT       reduce using rule 86 (add_expression -> mult_expression .)
    INT_LIT         reduce using rule 86 (add_expression -> mult_expression .)
    CHAR_LIT        reduce using rule 86 (add_expression -> mult_expression .)
    STR_LIT         reduce using rule 86 (add_expression -> mult_expression .)
    MAIN            reduce using rule 86 (add_expression -> mult_expression .)
    RPAREN          reduce using rule 86 (add_expression -> mult_expression .)
    COMMA           reduce using rule 86 (add_expression -> mult_expression .)
    $end            reduce using rule 86 (add_expression -> mult_expression .)
    SEMI            reduce using rule 86 (add_expression -> mult_expression .)
    RBRACKET        reduce using rule 86 (add_expression -> mult_expression .)
    RBRACE          reduce using rule 86 (add_expression -> mult_expression .)
    COLON           reduce using rule 86 (add_expression -> mult_expression .)
    MULT_OP         shift and go to state 67
    DIV_OP          shift and go to state 69
    MOD_OP          shift and go to state 68

  ! MULT_OP         [ reduce using rule 86 (add_expression -> mult_expression .) ]
  ! DIV_OP          [ reduce using rule 86 (add_expression -> mult_expression .) ]
  ! MOD_OP          [ reduce using rule 86 (add_expression -> mult_expression .) ]


state 26

    (98) postfix_expression -> primary_expression .

    LBRACKET        reduce using rule 98 (postfix_expression -> primary_expression .)
    LPAREN          reduce using rule 98 (postfix_expression -> primary_expression .)
    INC             reduce using rule 98 (postfix_expression -> primary_expression .)
    DEC             reduce using rule 98 (postfix_expression -> primary_expression .)
    ASSIGN_OP       reduce using rule 98 (postfix_expression -> primary_expression .)
    ADD_ASSIGN      reduce using rule 98 (postfix_expression -> primary_expression .)
    MIN_ASSIGN      reduce using rule 98 (postfix_expression -> primary_expression .)
    MUL_ASSIGN      reduce using rule 98 (postfix_expression -> primary_expression .)
    DIV_ASSIGN      reduce using rule 98 (postfix_expression -> primary_expression .)
    MOD_ASSIGN      reduce using rule 98 (postfix_expression -> primary_expression .)
    MULT_OP         reduce using rule 98 (postfix_expression -> primary_expression .)
    DIV_OP          reduce using rule 98 (postfix_expression -> primary_expression .)
    MOD_OP          reduce using rule 98 (postfix_expression -> primary_expression .)
    ADD_OP          reduce using rule 98 (postfix_expression -> primary_expression .)
    SUB_OP          reduce using rule 98 (postfix_expression -> primary_expression .)
    LT              reduce using rule 98 (postfix_expression -> primary_expression .)
    GT              reduce using rule 98 (postfix_expression -> primary_expression .)
    LE              reduce using rule 98 (postfix_expression -> primary_expression .)
    GE              reduce using rule 98 (postfix_expression -> primary_expression .)
    EQ              reduce using rule 98 (postfix_expression -> primary_expression .)
    NEQ             reduce using rule 98 (postfix_expression -> primary_expression .)
    OR              reduce using rule 98 (postfix_expression -> primary_expression .)
    AND             reduce using rule 98 (postfix_expression -> primary_expression .)
    SCAN            reduce using rule 98 (postfix_expression -> primary_expression .)
    NOT             reduce using rule 98 (postfix_expression -> primary_expression .)
    VAR             reduce using rule 98 (postfix_expression -> primary_expression .)
    FLOAT_ID        reduce using rule 98 (postfix_expression -> primary_expression .)
    INT_ID          reduce using rule 98 (postfix_expression -> primary_expression .)
    CHAR_ID         reduce using rule 98 (postfix_expression -> primary_expression .)
    STR_ID          reduce using rule 98 (postfix_expression -> primary_expression .)
    VOID_ID         reduce using rule 98 (postfix_expression -> primary_expression .)
    FLOAT_LIT       reduce using rule 98 (postfix_expression -> primary_expression .)
    INT_LIT         reduce using rule 98 (postfix_expression -> primary_expression .)
    CHAR_LIT        reduce using rule 98 (postfix_expression -> primary_expression .)
    STR_LIT         reduce using rule 98 (postfix_expression -> primary_expression .)
    MAIN            reduce using rule 98 (postfix_expression -> primary_expression .)
    RPAREN          reduce using rule 98 (postfix_expression -> primary_expression .)
    COMMA           reduce using rule 98 (postfix_expression -> primary_expression .)
    $end            reduce using rule 98 (postfix_expression -> primary_expression .)
    SEMI            reduce using rule 98 (postfix_expression -> primary_expression .)
    RBRACKET        reduce using rule 98 (postfix_expression -> primary_expression .)
    RBRACE          reduce using rule 98 (postfix_expression -> primary_expression .)
    COLON           reduce using rule 98 (postfix_expression -> primary_expression .)


state 27

    (25) fxn_declaration -> VAR . identifier LPAREN fxn_prot_args RPAREN
    (26) fxn_declaration -> VAR . identifier LPAREN empty RPAREN
    (109) identifier -> . FLOAT_ID
    (110) identifier -> . INT_ID
    (111) identifier -> . CHAR_ID
    (112) identifier -> . STR_ID
    (113) identifier -> . VOID_ID

    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 30
    CHAR_ID         shift and go to state 13
    STR_ID          shift and go to state 19
    VOID_ID         shift and go to state 23

    identifier                     shift and go to state 70

state 28

    (81) relational_expression -> add_expression .
    (87) add_expression -> add_expression . ADD_OP mult_expression
    (88) add_expression -> add_expression . SUB_OP mult_expression

  ! shift/reduce conflict for ADD_OP resolved as shift
  ! shift/reduce conflict for SUB_OP resolved as shift
    LT              reduce using rule 81 (relational_expression -> add_expression .)
    GT              reduce using rule 81 (relational_expression -> add_expression .)
    LE              reduce using rule 81 (relational_expression -> add_expression .)
    GE              reduce using rule 81 (relational_expression -> add_expression .)
    EQ              reduce using rule 81 (relational_expression -> add_expression .)
    NEQ             reduce using rule 81 (relational_expression -> add_expression .)
    OR              reduce using rule 81 (relational_expression -> add_expression .)
    AND             reduce using rule 81 (relational_expression -> add_expression .)
    RPAREN          reduce using rule 81 (relational_expression -> add_expression .)
    COMMA           reduce using rule 81 (relational_expression -> add_expression .)
    SCAN            reduce using rule 81 (relational_expression -> add_expression .)
    INC             reduce using rule 81 (relational_expression -> add_expression .)
    DEC             reduce using rule 81 (relational_expression -> add_expression .)
    NOT             reduce using rule 81 (relational_expression -> add_expression .)
    VAR             reduce using rule 81 (relational_expression -> add_expression .)
    LPAREN          reduce using rule 81 (relational_expression -> add_expression .)
    FLOAT_ID        reduce using rule 81 (relational_expression -> add_expression .)
    INT_ID          reduce using rule 81 (relational_expression -> add_expression .)
    CHAR_ID         reduce using rule 81 (relational_expression -> add_expression .)
    STR_ID          reduce using rule 81 (relational_expression -> add_expression .)
    VOID_ID         reduce using rule 81 (relational_expression -> add_expression .)
    FLOAT_LIT       reduce using rule 81 (relational_expression -> add_expression .)
    INT_LIT         reduce using rule 81 (relational_expression -> add_expression .)
    CHAR_LIT        reduce using rule 81 (relational_expression -> add_expression .)
    STR_LIT         reduce using rule 81 (relational_expression -> add_expression .)
    MAIN            reduce using rule 81 (relational_expression -> add_expression .)
    $end            reduce using rule 81 (relational_expression -> add_expression .)
    SEMI            reduce using rule 81 (relational_expression -> add_expression .)
    RBRACKET        reduce using rule 81 (relational_expression -> add_expression .)
    RBRACE          reduce using rule 81 (relational_expression -> add_expression .)
    ASSIGN_OP       reduce using rule 81 (relational_expression -> add_expression .)
    ADD_ASSIGN      reduce using rule 81 (relational_expression -> add_expression .)
    MIN_ASSIGN      reduce using rule 81 (relational_expression -> add_expression .)
    MUL_ASSIGN      reduce using rule 81 (relational_expression -> add_expression .)
    DIV_ASSIGN      reduce using rule 81 (relational_expression -> add_expression .)
    MOD_ASSIGN      reduce using rule 81 (relational_expression -> add_expression .)
    MULT_OP         reduce using rule 81 (relational_expression -> add_expression .)
    DIV_OP          reduce using rule 81 (relational_expression -> add_expression .)
    MOD_OP          reduce using rule 81 (relational_expression -> add_expression .)
    COLON           reduce using rule 81 (relational_expression -> add_expression .)
    ADD_OP          shift and go to state 72
    SUB_OP          shift and go to state 71

  ! SUB_OP          [ reduce using rule 81 (relational_expression -> add_expression .) ]
  ! ADD_OP          [ reduce using rule 81 (relational_expression -> add_expression .) ]


state 29

    (76) logical_and_expression -> equality_expression .
    (79) equality_expression -> equality_expression . EQ relational_expression
    (80) equality_expression -> equality_expression . NEQ relational_expression

  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
    OR              reduce using rule 76 (logical_and_expression -> equality_expression .)
    AND             reduce using rule 76 (logical_and_expression -> equality_expression .)
    SCAN            reduce using rule 76 (logical_and_expression -> equality_expression .)
    INC             reduce using rule 76 (logical_and_expression -> equality_expression .)
    DEC             reduce using rule 76 (logical_and_expression -> equality_expression .)
    SUB_OP          reduce using rule 76 (logical_and_expression -> equality_expression .)
    NOT             reduce using rule 76 (logical_and_expression -> equality_expression .)
    VAR             reduce using rule 76 (logical_and_expression -> equality_expression .)
    LPAREN          reduce using rule 76 (logical_and_expression -> equality_expression .)
    FLOAT_ID        reduce using rule 76 (logical_and_expression -> equality_expression .)
    INT_ID          reduce using rule 76 (logical_and_expression -> equality_expression .)
    CHAR_ID         reduce using rule 76 (logical_and_expression -> equality_expression .)
    STR_ID          reduce using rule 76 (logical_and_expression -> equality_expression .)
    VOID_ID         reduce using rule 76 (logical_and_expression -> equality_expression .)
    FLOAT_LIT       reduce using rule 76 (logical_and_expression -> equality_expression .)
    INT_LIT         reduce using rule 76 (logical_and_expression -> equality_expression .)
    CHAR_LIT        reduce using rule 76 (logical_and_expression -> equality_expression .)
    STR_LIT         reduce using rule 76 (logical_and_expression -> equality_expression .)
    MAIN            reduce using rule 76 (logical_and_expression -> equality_expression .)
    $end            reduce using rule 76 (logical_and_expression -> equality_expression .)
    COMMA           reduce using rule 76 (logical_and_expression -> equality_expression .)
    SEMI            reduce using rule 76 (logical_and_expression -> equality_expression .)
    RPAREN          reduce using rule 76 (logical_and_expression -> equality_expression .)
    RBRACKET        reduce using rule 76 (logical_and_expression -> equality_expression .)
    RBRACE          reduce using rule 76 (logical_and_expression -> equality_expression .)
    ASSIGN_OP       reduce using rule 76 (logical_and_expression -> equality_expression .)
    ADD_ASSIGN      reduce using rule 76 (logical_and_expression -> equality_expression .)
    MIN_ASSIGN      reduce using rule 76 (logical_and_expression -> equality_expression .)
    MUL_ASSIGN      reduce using rule 76 (logical_and_expression -> equality_expression .)
    DIV_ASSIGN      reduce using rule 76 (logical_and_expression -> equality_expression .)
    MOD_ASSIGN      reduce using rule 76 (logical_and_expression -> equality_expression .)
    MULT_OP         reduce using rule 76 (logical_and_expression -> equality_expression .)
    DIV_OP          reduce using rule 76 (logical_and_expression -> equality_expression .)
    MOD_OP          reduce using rule 76 (logical_and_expression -> equality_expression .)
    ADD_OP          reduce using rule 76 (logical_and_expression -> equality_expression .)
    LT              reduce using rule 76 (logical_and_expression -> equality_expression .)
    GT              reduce using rule 76 (logical_and_expression -> equality_expression .)
    LE              reduce using rule 76 (logical_and_expression -> equality_expression .)
    GE              reduce using rule 76 (logical_and_expression -> equality_expression .)
    COLON           reduce using rule 76 (logical_and_expression -> equality_expression .)
    EQ              shift and go to state 73
    NEQ             shift and go to state 74

  ! EQ              [ reduce using rule 76 (logical_and_expression -> equality_expression .) ]
  ! NEQ             [ reduce using rule 76 (logical_and_expression -> equality_expression .) ]


state 30

    (110) identifier -> INT_ID .

    LBRACKET        reduce using rule 110 (identifier -> INT_ID .)
    LPAREN          reduce using rule 110 (identifier -> INT_ID .)
    INC             reduce using rule 110 (identifier -> INT_ID .)
    DEC             reduce using rule 110 (identifier -> INT_ID .)
    ASSIGN_OP       reduce using rule 110 (identifier -> INT_ID .)
    ADD_ASSIGN      reduce using rule 110 (identifier -> INT_ID .)
    MIN_ASSIGN      reduce using rule 110 (identifier -> INT_ID .)
    MUL_ASSIGN      reduce using rule 110 (identifier -> INT_ID .)
    DIV_ASSIGN      reduce using rule 110 (identifier -> INT_ID .)
    MOD_ASSIGN      reduce using rule 110 (identifier -> INT_ID .)
    MULT_OP         reduce using rule 110 (identifier -> INT_ID .)
    DIV_OP          reduce using rule 110 (identifier -> INT_ID .)
    MOD_OP          reduce using rule 110 (identifier -> INT_ID .)
    ADD_OP          reduce using rule 110 (identifier -> INT_ID .)
    SUB_OP          reduce using rule 110 (identifier -> INT_ID .)
    LT              reduce using rule 110 (identifier -> INT_ID .)
    GT              reduce using rule 110 (identifier -> INT_ID .)
    LE              reduce using rule 110 (identifier -> INT_ID .)
    GE              reduce using rule 110 (identifier -> INT_ID .)
    EQ              reduce using rule 110 (identifier -> INT_ID .)
    NEQ             reduce using rule 110 (identifier -> INT_ID .)
    OR              reduce using rule 110 (identifier -> INT_ID .)
    AND             reduce using rule 110 (identifier -> INT_ID .)
    COMMA           reduce using rule 110 (identifier -> INT_ID .)
    SEMI            reduce using rule 110 (identifier -> INT_ID .)
    RPAREN          reduce using rule 110 (identifier -> INT_ID .)
    SCAN            reduce using rule 110 (identifier -> INT_ID .)
    NOT             reduce using rule 110 (identifier -> INT_ID .)
    VAR             reduce using rule 110 (identifier -> INT_ID .)
    FLOAT_ID        reduce using rule 110 (identifier -> INT_ID .)
    INT_ID          reduce using rule 110 (identifier -> INT_ID .)
    CHAR_ID         reduce using rule 110 (identifier -> INT_ID .)
    STR_ID          reduce using rule 110 (identifier -> INT_ID .)
    VOID_ID         reduce using rule 110 (identifier -> INT_ID .)
    FLOAT_LIT       reduce using rule 110 (identifier -> INT_ID .)
    INT_LIT         reduce using rule 110 (identifier -> INT_ID .)
    CHAR_LIT        reduce using rule 110 (identifier -> INT_ID .)
    STR_LIT         reduce using rule 110 (identifier -> INT_ID .)
    MAIN            reduce using rule 110 (identifier -> INT_ID .)
    $end            reduce using rule 110 (identifier -> INT_ID .)
    RBRACKET        reduce using rule 110 (identifier -> INT_ID .)
    RBRACE          reduce using rule 110 (identifier -> INT_ID .)
    COLON           reduce using rule 110 (identifier -> INT_ID .)


state 31

    (114) constant -> FLOAT_LIT .

    LBRACKET        reduce using rule 114 (constant -> FLOAT_LIT .)
    LPAREN          reduce using rule 114 (constant -> FLOAT_LIT .)
    INC             reduce using rule 114 (constant -> FLOAT_LIT .)
    DEC             reduce using rule 114 (constant -> FLOAT_LIT .)
    ASSIGN_OP       reduce using rule 114 (constant -> FLOAT_LIT .)
    ADD_ASSIGN      reduce using rule 114 (constant -> FLOAT_LIT .)
    MIN_ASSIGN      reduce using rule 114 (constant -> FLOAT_LIT .)
    MUL_ASSIGN      reduce using rule 114 (constant -> FLOAT_LIT .)
    DIV_ASSIGN      reduce using rule 114 (constant -> FLOAT_LIT .)
    MOD_ASSIGN      reduce using rule 114 (constant -> FLOAT_LIT .)
    MULT_OP         reduce using rule 114 (constant -> FLOAT_LIT .)
    DIV_OP          reduce using rule 114 (constant -> FLOAT_LIT .)
    MOD_OP          reduce using rule 114 (constant -> FLOAT_LIT .)
    ADD_OP          reduce using rule 114 (constant -> FLOAT_LIT .)
    SUB_OP          reduce using rule 114 (constant -> FLOAT_LIT .)
    LT              reduce using rule 114 (constant -> FLOAT_LIT .)
    GT              reduce using rule 114 (constant -> FLOAT_LIT .)
    LE              reduce using rule 114 (constant -> FLOAT_LIT .)
    GE              reduce using rule 114 (constant -> FLOAT_LIT .)
    EQ              reduce using rule 114 (constant -> FLOAT_LIT .)
    NEQ             reduce using rule 114 (constant -> FLOAT_LIT .)
    OR              reduce using rule 114 (constant -> FLOAT_LIT .)
    AND             reduce using rule 114 (constant -> FLOAT_LIT .)
    SCAN            reduce using rule 114 (constant -> FLOAT_LIT .)
    NOT             reduce using rule 114 (constant -> FLOAT_LIT .)
    VAR             reduce using rule 114 (constant -> FLOAT_LIT .)
    FLOAT_ID        reduce using rule 114 (constant -> FLOAT_LIT .)
    INT_ID          reduce using rule 114 (constant -> FLOAT_LIT .)
    CHAR_ID         reduce using rule 114 (constant -> FLOAT_LIT .)
    STR_ID          reduce using rule 114 (constant -> FLOAT_LIT .)
    VOID_ID         reduce using rule 114 (constant -> FLOAT_LIT .)
    FLOAT_LIT       reduce using rule 114 (constant -> FLOAT_LIT .)
    INT_LIT         reduce using rule 114 (constant -> FLOAT_LIT .)
    CHAR_LIT        reduce using rule 114 (constant -> FLOAT_LIT .)
    STR_LIT         reduce using rule 114 (constant -> FLOAT_LIT .)
    MAIN            reduce using rule 114 (constant -> FLOAT_LIT .)
    RPAREN          reduce using rule 114 (constant -> FLOAT_LIT .)
    COMMA           reduce using rule 114 (constant -> FLOAT_LIT .)
    $end            reduce using rule 114 (constant -> FLOAT_LIT .)
    SEMI            reduce using rule 114 (constant -> FLOAT_LIT .)
    RBRACKET        reduce using rule 114 (constant -> FLOAT_LIT .)
    RBRACE          reduce using rule 114 (constant -> FLOAT_LIT .)
    COLON           reduce using rule 114 (constant -> FLOAT_LIT .)


state 32

    (96) unary_expression -> SUB_OP . add_expression
    (86) add_expression -> . mult_expression
    (87) add_expression -> . add_expression ADD_OP mult_expression
    (88) add_expression -> . add_expression SUB_OP mult_expression
    (89) mult_expression -> . unary_expression
    (90) mult_expression -> . mult_expression MULT_OP unary_expression
    (91) mult_expression -> . mult_expression DIV_OP unary_expression
    (92) mult_expression -> . mult_expression MOD_OP unary_expression
    (93) unary_expression -> . postfix_expression
    (94) unary_expression -> . INC unary_expression
    (95) unary_expression -> . DEC unary_expression
    (96) unary_expression -> . SUB_OP add_expression
    (97) unary_expression -> . NOT logical_or_expression
    (98) postfix_expression -> . primary_expression
    (99) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (100) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (101) postfix_expression -> . postfix_expression LPAREN RPAREN
    (102) postfix_expression -> . postfix_expression INC
    (103) postfix_expression -> . postfix_expression DEC
    (104) primary_expression -> . identifier
    (105) primary_expression -> . constant
    (106) primary_expression -> . LPAREN expression RPAREN
    (109) identifier -> . FLOAT_ID
    (110) identifier -> . INT_ID
    (111) identifier -> . CHAR_ID
    (112) identifier -> . STR_ID
    (113) identifier -> . VOID_ID
    (114) constant -> . FLOAT_LIT
    (115) constant -> . INT_LIT
    (116) constant -> . CHAR_LIT
    (117) constant -> . STR_LIT

    INC             shift and go to state 36
    DEC             shift and go to state 7
    SUB_OP          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 2
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 30
    CHAR_ID         shift and go to state 13
    STR_ID          shift and go to state 19
    VOID_ID         shift and go to state 23
    FLOAT_LIT       shift and go to state 31
    INT_LIT         shift and go to state 33
    CHAR_LIT        shift and go to state 12
    STR_LIT         shift and go to state 9

    constant                       shift and go to state 1
    unary_expression               shift and go to state 75
    postfix_expression             shift and go to state 15
    primary_expression             shift and go to state 26
    mult_expression                shift and go to state 25
    identifier                     shift and go to state 35
    add_expression                 shift and go to state 76

state 33

    (115) constant -> INT_LIT .

    LBRACKET        reduce using rule 115 (constant -> INT_LIT .)
    LPAREN          reduce using rule 115 (constant -> INT_LIT .)
    INC             reduce using rule 115 (constant -> INT_LIT .)
    DEC             reduce using rule 115 (constant -> INT_LIT .)
    ASSIGN_OP       reduce using rule 115 (constant -> INT_LIT .)
    ADD_ASSIGN      reduce using rule 115 (constant -> INT_LIT .)
    MIN_ASSIGN      reduce using rule 115 (constant -> INT_LIT .)
    MUL_ASSIGN      reduce using rule 115 (constant -> INT_LIT .)
    DIV_ASSIGN      reduce using rule 115 (constant -> INT_LIT .)
    MOD_ASSIGN      reduce using rule 115 (constant -> INT_LIT .)
    MULT_OP         reduce using rule 115 (constant -> INT_LIT .)
    DIV_OP          reduce using rule 115 (constant -> INT_LIT .)
    MOD_OP          reduce using rule 115 (constant -> INT_LIT .)
    ADD_OP          reduce using rule 115 (constant -> INT_LIT .)
    SUB_OP          reduce using rule 115 (constant -> INT_LIT .)
    LT              reduce using rule 115 (constant -> INT_LIT .)
    GT              reduce using rule 115 (constant -> INT_LIT .)
    LE              reduce using rule 115 (constant -> INT_LIT .)
    GE              reduce using rule 115 (constant -> INT_LIT .)
    EQ              reduce using rule 115 (constant -> INT_LIT .)
    NEQ             reduce using rule 115 (constant -> INT_LIT .)
    OR              reduce using rule 115 (constant -> INT_LIT .)
    AND             reduce using rule 115 (constant -> INT_LIT .)
    SCAN            reduce using rule 115 (constant -> INT_LIT .)
    NOT             reduce using rule 115 (constant -> INT_LIT .)
    VAR             reduce using rule 115 (constant -> INT_LIT .)
    FLOAT_ID        reduce using rule 115 (constant -> INT_LIT .)
    INT_ID          reduce using rule 115 (constant -> INT_LIT .)
    CHAR_ID         reduce using rule 115 (constant -> INT_LIT .)
    STR_ID          reduce using rule 115 (constant -> INT_LIT .)
    VOID_ID         reduce using rule 115 (constant -> INT_LIT .)
    FLOAT_LIT       reduce using rule 115 (constant -> INT_LIT .)
    INT_LIT         reduce using rule 115 (constant -> INT_LIT .)
    CHAR_LIT        reduce using rule 115 (constant -> INT_LIT .)
    STR_LIT         reduce using rule 115 (constant -> INT_LIT .)
    MAIN            reduce using rule 115 (constant -> INT_LIT .)
    RPAREN          reduce using rule 115 (constant -> INT_LIT .)
    COMMA           reduce using rule 115 (constant -> INT_LIT .)
    $end            reduce using rule 115 (constant -> INT_LIT .)
    SEMI            reduce using rule 115 (constant -> INT_LIT .)
    RBRACKET        reduce using rule 115 (constant -> INT_LIT .)
    RBRACE          reduce using rule 115 (constant -> INT_LIT .)
    COLON           reduce using rule 115 (constant -> INT_LIT .)


state 34

    (97) unary_expression -> NOT . logical_or_expression
    (74) logical_or_expression -> . logical_and_expression
    (75) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (76) logical_and_expression -> . equality_expression
    (77) logical_and_expression -> . logical_and_expression AND equality_expression
    (78) equality_expression -> . relational_expression
    (79) equality_expression -> . equality_expression EQ relational_expression
    (80) equality_expression -> . equality_expression NEQ relational_expression
    (81) relational_expression -> . add_expression
    (82) relational_expression -> . relational_expression LT add_expression
    (83) relational_expression -> . relational_expression GT add_expression
    (84) relational_expression -> . relational_expression LE add_expression
    (85) relational_expression -> . relational_expression GE add_expression
    (86) add_expression -> . mult_expression
    (87) add_expression -> . add_expression ADD_OP mult_expression
    (88) add_expression -> . add_expression SUB_OP mult_expression
    (89) mult_expression -> . unary_expression
    (90) mult_expression -> . mult_expression MULT_OP unary_expression
    (91) mult_expression -> . mult_expression DIV_OP unary_expression
    (92) mult_expression -> . mult_expression MOD_OP unary_expression
    (93) unary_expression -> . postfix_expression
    (94) unary_expression -> . INC unary_expression
    (95) unary_expression -> . DEC unary_expression
    (96) unary_expression -> . SUB_OP add_expression
    (97) unary_expression -> . NOT logical_or_expression
    (98) postfix_expression -> . primary_expression
    (99) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (100) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (101) postfix_expression -> . postfix_expression LPAREN RPAREN
    (102) postfix_expression -> . postfix_expression INC
    (103) postfix_expression -> . postfix_expression DEC
    (104) primary_expression -> . identifier
    (105) primary_expression -> . constant
    (106) primary_expression -> . LPAREN expression RPAREN
    (109) identifier -> . FLOAT_ID
    (110) identifier -> . INT_ID
    (111) identifier -> . CHAR_ID
    (112) identifier -> . STR_ID
    (113) identifier -> . VOID_ID
    (114) constant -> . FLOAT_LIT
    (115) constant -> . INT_LIT
    (116) constant -> . CHAR_LIT
    (117) constant -> . STR_LIT

    INC             shift and go to state 36
    DEC             shift and go to state 7
    SUB_OP          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 2
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 30
    CHAR_ID         shift and go to state 13
    STR_ID          shift and go to state 19
    VOID_ID         shift and go to state 23
    FLOAT_LIT       shift and go to state 31
    INT_LIT         shift and go to state 33
    CHAR_LIT        shift and go to state 12
    STR_LIT         shift and go to state 9

    constant                       shift and go to state 1
    unary_expression               shift and go to state 75
    postfix_expression             shift and go to state 15
    relational_expression          shift and go to state 17
    mult_expression                shift and go to state 25
    logical_and_expression         shift and go to state 8
    identifier                     shift and go to state 35
    add_expression                 shift and go to state 28
    logical_or_expression          shift and go to state 77
    equality_expression            shift and go to state 29
    primary_expression             shift and go to state 26

state 35

    (104) primary_expression -> identifier .

    LBRACKET        reduce using rule 104 (primary_expression -> identifier .)
    LPAREN          reduce using rule 104 (primary_expression -> identifier .)
    INC             reduce using rule 104 (primary_expression -> identifier .)
    DEC             reduce using rule 104 (primary_expression -> identifier .)
    ASSIGN_OP       reduce using rule 104 (primary_expression -> identifier .)
    ADD_ASSIGN      reduce using rule 104 (primary_expression -> identifier .)
    MIN_ASSIGN      reduce using rule 104 (primary_expression -> identifier .)
    MUL_ASSIGN      reduce using rule 104 (primary_expression -> identifier .)
    DIV_ASSIGN      reduce using rule 104 (primary_expression -> identifier .)
    MOD_ASSIGN      reduce using rule 104 (primary_expression -> identifier .)
    MULT_OP         reduce using rule 104 (primary_expression -> identifier .)
    DIV_OP          reduce using rule 104 (primary_expression -> identifier .)
    MOD_OP          reduce using rule 104 (primary_expression -> identifier .)
    ADD_OP          reduce using rule 104 (primary_expression -> identifier .)
    SUB_OP          reduce using rule 104 (primary_expression -> identifier .)
    LT              reduce using rule 104 (primary_expression -> identifier .)
    GT              reduce using rule 104 (primary_expression -> identifier .)
    LE              reduce using rule 104 (primary_expression -> identifier .)
    GE              reduce using rule 104 (primary_expression -> identifier .)
    EQ              reduce using rule 104 (primary_expression -> identifier .)
    NEQ             reduce using rule 104 (primary_expression -> identifier .)
    OR              reduce using rule 104 (primary_expression -> identifier .)
    AND             reduce using rule 104 (primary_expression -> identifier .)
    COMMA           reduce using rule 104 (primary_expression -> identifier .)
    SEMI            reduce using rule 104 (primary_expression -> identifier .)
    SCAN            reduce using rule 104 (primary_expression -> identifier .)
    NOT             reduce using rule 104 (primary_expression -> identifier .)
    VAR             reduce using rule 104 (primary_expression -> identifier .)
    FLOAT_ID        reduce using rule 104 (primary_expression -> identifier .)
    INT_ID          reduce using rule 104 (primary_expression -> identifier .)
    CHAR_ID         reduce using rule 104 (primary_expression -> identifier .)
    STR_ID          reduce using rule 104 (primary_expression -> identifier .)
    VOID_ID         reduce using rule 104 (primary_expression -> identifier .)
    FLOAT_LIT       reduce using rule 104 (primary_expression -> identifier .)
    INT_LIT         reduce using rule 104 (primary_expression -> identifier .)
    CHAR_LIT        reduce using rule 104 (primary_expression -> identifier .)
    STR_LIT         reduce using rule 104 (primary_expression -> identifier .)
    MAIN            reduce using rule 104 (primary_expression -> identifier .)
    RPAREN          reduce using rule 104 (primary_expression -> identifier .)
    $end            reduce using rule 104 (primary_expression -> identifier .)
    RBRACKET        reduce using rule 104 (primary_expression -> identifier .)
    RBRACE          reduce using rule 104 (primary_expression -> identifier .)
    COLON           reduce using rule 104 (primary_expression -> identifier .)


state 36

    (94) unary_expression -> INC . unary_expression
    (93) unary_expression -> . postfix_expression
    (94) unary_expression -> . INC unary_expression
    (95) unary_expression -> . DEC unary_expression
    (96) unary_expression -> . SUB_OP add_expression
    (97) unary_expression -> . NOT logical_or_expression
    (98) postfix_expression -> . primary_expression
    (99) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (100) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (101) postfix_expression -> . postfix_expression LPAREN RPAREN
    (102) postfix_expression -> . postfix_expression INC
    (103) postfix_expression -> . postfix_expression DEC
    (104) primary_expression -> . identifier
    (105) primary_expression -> . constant
    (106) primary_expression -> . LPAREN expression RPAREN
    (109) identifier -> . FLOAT_ID
    (110) identifier -> . INT_ID
    (111) identifier -> . CHAR_ID
    (112) identifier -> . STR_ID
    (113) identifier -> . VOID_ID
    (114) constant -> . FLOAT_LIT
    (115) constant -> . INT_LIT
    (116) constant -> . CHAR_LIT
    (117) constant -> . STR_LIT

    INC             shift and go to state 36
    DEC             shift and go to state 7
    SUB_OP          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 2
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 30
    CHAR_ID         shift and go to state 13
    STR_ID          shift and go to state 19
    VOID_ID         shift and go to state 23
    FLOAT_LIT       shift and go to state 31
    INT_LIT         shift and go to state 33
    CHAR_LIT        shift and go to state 12
    STR_LIT         shift and go to state 9

    constant                       shift and go to state 1
    unary_expression               shift and go to state 78
    postfix_expression             shift and go to state 15
    primary_expression             shift and go to state 26
    identifier                     shift and go to state 35

state 37

    (60) print_expression -> PRINT . LPAREN scan_expression RPAREN

    LPAREN          shift and go to state 79


state 38

    (61) print_expression -> PRINTLN . LPAREN scan_expression RPAREN

    LPAREN          shift and go to state 80


state 39

    (59) print_expression -> assignment_expression .

    RPAREN          reduce using rule 59 (print_expression -> assignment_expression .)
    COMMA           reduce using rule 59 (print_expression -> assignment_expression .)
    SEMI            reduce using rule 59 (print_expression -> assignment_expression .)
    RBRACKET        reduce using rule 59 (print_expression -> assignment_expression .)


state 40

    (57) expression -> print_expression .

    RPAREN          reduce using rule 57 (expression -> print_expression .)
    COMMA           reduce using rule 57 (expression -> print_expression .)
    SEMI            reduce using rule 57 (expression -> print_expression .)
    RBRACKET        reduce using rule 57 (expression -> print_expression .)


state 41

    (106) primary_expression -> LPAREN expression . RPAREN
    (58) expression -> expression . COMMA print_expression

    RPAREN          shift and go to state 81
    COMMA           shift and go to state 82


state 42

    (68) assignment_expression -> unary_expression MOD_ASSIGN . assignment_expression
    (62) assignment_expression -> . scan_expression
    (63) assignment_expression -> . unary_expression ASSIGN_OP assignment_expression
    (64) assignment_expression -> . unary_expression ADD_ASSIGN assignment_expression
    (65) assignment_expression -> . unary_expression MIN_ASSIGN assignment_expression
    (66) assignment_expression -> . unary_expression MUL_ASSIGN assignment_expression
    (67) assignment_expression -> . unary_expression DIV_ASSIGN assignment_expression
    (68) assignment_expression -> . unary_expression MOD_ASSIGN assignment_expression
    (69) scan_expression -> . logical_or_expression
    (70) scan_expression -> . SCAN LPAREN RPAREN
    (93) unary_expression -> . postfix_expression
    (94) unary_expression -> . INC unary_expression
    (95) unary_expression -> . DEC unary_expression
    (96) unary_expression -> . SUB_OP add_expression
    (97) unary_expression -> . NOT logical_or_expression
    (74) logical_or_expression -> . logical_and_expression
    (75) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (98) postfix_expression -> . primary_expression
    (99) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (100) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (101) postfix_expression -> . postfix_expression LPAREN RPAREN
    (102) postfix_expression -> . postfix_expression INC
    (103) postfix_expression -> . postfix_expression DEC
    (76) logical_and_expression -> . equality_expression
    (77) logical_and_expression -> . logical_and_expression AND equality_expression
    (104) primary_expression -> . identifier
    (105) primary_expression -> . constant
    (106) primary_expression -> . LPAREN expression RPAREN
    (78) equality_expression -> . relational_expression
    (79) equality_expression -> . equality_expression EQ relational_expression
    (80) equality_expression -> . equality_expression NEQ relational_expression
    (109) identifier -> . FLOAT_ID
    (110) identifier -> . INT_ID
    (111) identifier -> . CHAR_ID
    (112) identifier -> . STR_ID
    (113) identifier -> . VOID_ID
    (114) constant -> . FLOAT_LIT
    (115) constant -> . INT_LIT
    (116) constant -> . CHAR_LIT
    (117) constant -> . STR_LIT
    (81) relational_expression -> . add_expression
    (82) relational_expression -> . relational_expression LT add_expression
    (83) relational_expression -> . relational_expression GT add_expression
    (84) relational_expression -> . relational_expression LE add_expression
    (85) relational_expression -> . relational_expression GE add_expression
    (86) add_expression -> . mult_expression
    (87) add_expression -> . add_expression ADD_OP mult_expression
    (88) add_expression -> . add_expression SUB_OP mult_expression
    (89) mult_expression -> . unary_expression
    (90) mult_expression -> . mult_expression MULT_OP unary_expression
    (91) mult_expression -> . mult_expression DIV_OP unary_expression
    (92) mult_expression -> . mult_expression MOD_OP unary_expression

    SCAN            shift and go to state 4
    INC             shift and go to state 36
    DEC             shift and go to state 7
    SUB_OP          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 2
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 30
    CHAR_ID         shift and go to state 13
    STR_ID          shift and go to state 19
    VOID_ID         shift and go to state 23
    FLOAT_LIT       shift and go to state 31
    INT_LIT         shift and go to state 33
    CHAR_LIT        shift and go to state 12
    STR_LIT         shift and go to state 9

    constant                       shift and go to state 1
    assignment_expression          shift and go to state 83
    unary_expression               shift and go to state 3
    relational_expression          shift and go to state 17
    postfix_expression             shift and go to state 15
    primary_expression             shift and go to state 26
    mult_expression                shift and go to state 25
    logical_and_expression         shift and go to state 8
    identifier                     shift and go to state 35
    add_expression                 shift and go to state 28
    logical_or_expression          shift and go to state 21
    equality_expression            shift and go to state 29
    scan_expression                shift and go to state 10

state 43

    (66) assignment_expression -> unary_expression MUL_ASSIGN . assignment_expression
    (62) assignment_expression -> . scan_expression
    (63) assignment_expression -> . unary_expression ASSIGN_OP assignment_expression
    (64) assignment_expression -> . unary_expression ADD_ASSIGN assignment_expression
    (65) assignment_expression -> . unary_expression MIN_ASSIGN assignment_expression
    (66) assignment_expression -> . unary_expression MUL_ASSIGN assignment_expression
    (67) assignment_expression -> . unary_expression DIV_ASSIGN assignment_expression
    (68) assignment_expression -> . unary_expression MOD_ASSIGN assignment_expression
    (69) scan_expression -> . logical_or_expression
    (70) scan_expression -> . SCAN LPAREN RPAREN
    (93) unary_expression -> . postfix_expression
    (94) unary_expression -> . INC unary_expression
    (95) unary_expression -> . DEC unary_expression
    (96) unary_expression -> . SUB_OP add_expression
    (97) unary_expression -> . NOT logical_or_expression
    (74) logical_or_expression -> . logical_and_expression
    (75) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (98) postfix_expression -> . primary_expression
    (99) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (100) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (101) postfix_expression -> . postfix_expression LPAREN RPAREN
    (102) postfix_expression -> . postfix_expression INC
    (103) postfix_expression -> . postfix_expression DEC
    (76) logical_and_expression -> . equality_expression
    (77) logical_and_expression -> . logical_and_expression AND equality_expression
    (104) primary_expression -> . identifier
    (105) primary_expression -> . constant
    (106) primary_expression -> . LPAREN expression RPAREN
    (78) equality_expression -> . relational_expression
    (79) equality_expression -> . equality_expression EQ relational_expression
    (80) equality_expression -> . equality_expression NEQ relational_expression
    (109) identifier -> . FLOAT_ID
    (110) identifier -> . INT_ID
    (111) identifier -> . CHAR_ID
    (112) identifier -> . STR_ID
    (113) identifier -> . VOID_ID
    (114) constant -> . FLOAT_LIT
    (115) constant -> . INT_LIT
    (116) constant -> . CHAR_LIT
    (117) constant -> . STR_LIT
    (81) relational_expression -> . add_expression
    (82) relational_expression -> . relational_expression LT add_expression
    (83) relational_expression -> . relational_expression GT add_expression
    (84) relational_expression -> . relational_expression LE add_expression
    (85) relational_expression -> . relational_expression GE add_expression
    (86) add_expression -> . mult_expression
    (87) add_expression -> . add_expression ADD_OP mult_expression
    (88) add_expression -> . add_expression SUB_OP mult_expression
    (89) mult_expression -> . unary_expression
    (90) mult_expression -> . mult_expression MULT_OP unary_expression
    (91) mult_expression -> . mult_expression DIV_OP unary_expression
    (92) mult_expression -> . mult_expression MOD_OP unary_expression

    SCAN            shift and go to state 4
    INC             shift and go to state 36
    DEC             shift and go to state 7
    SUB_OP          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 2
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 30
    CHAR_ID         shift and go to state 13
    STR_ID          shift and go to state 19
    VOID_ID         shift and go to state 23
    FLOAT_LIT       shift and go to state 31
    INT_LIT         shift and go to state 33
    CHAR_LIT        shift and go to state 12
    STR_LIT         shift and go to state 9

    constant                       shift and go to state 1
    assignment_expression          shift and go to state 84
    unary_expression               shift and go to state 3
    relational_expression          shift and go to state 17
    postfix_expression             shift and go to state 15
    primary_expression             shift and go to state 26
    mult_expression                shift and go to state 25
    logical_and_expression         shift and go to state 8
    identifier                     shift and go to state 35
    add_expression                 shift and go to state 28
    logical_or_expression          shift and go to state 21
    equality_expression            shift and go to state 29
    scan_expression                shift and go to state 10

state 44

    (67) assignment_expression -> unary_expression DIV_ASSIGN . assignment_expression
    (62) assignment_expression -> . scan_expression
    (63) assignment_expression -> . unary_expression ASSIGN_OP assignment_expression
    (64) assignment_expression -> . unary_expression ADD_ASSIGN assignment_expression
    (65) assignment_expression -> . unary_expression MIN_ASSIGN assignment_expression
    (66) assignment_expression -> . unary_expression MUL_ASSIGN assignment_expression
    (67) assignment_expression -> . unary_expression DIV_ASSIGN assignment_expression
    (68) assignment_expression -> . unary_expression MOD_ASSIGN assignment_expression
    (69) scan_expression -> . logical_or_expression
    (70) scan_expression -> . SCAN LPAREN RPAREN
    (93) unary_expression -> . postfix_expression
    (94) unary_expression -> . INC unary_expression
    (95) unary_expression -> . DEC unary_expression
    (96) unary_expression -> . SUB_OP add_expression
    (97) unary_expression -> . NOT logical_or_expression
    (74) logical_or_expression -> . logical_and_expression
    (75) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (98) postfix_expression -> . primary_expression
    (99) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (100) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (101) postfix_expression -> . postfix_expression LPAREN RPAREN
    (102) postfix_expression -> . postfix_expression INC
    (103) postfix_expression -> . postfix_expression DEC
    (76) logical_and_expression -> . equality_expression
    (77) logical_and_expression -> . logical_and_expression AND equality_expression
    (104) primary_expression -> . identifier
    (105) primary_expression -> . constant
    (106) primary_expression -> . LPAREN expression RPAREN
    (78) equality_expression -> . relational_expression
    (79) equality_expression -> . equality_expression EQ relational_expression
    (80) equality_expression -> . equality_expression NEQ relational_expression
    (109) identifier -> . FLOAT_ID
    (110) identifier -> . INT_ID
    (111) identifier -> . CHAR_ID
    (112) identifier -> . STR_ID
    (113) identifier -> . VOID_ID
    (114) constant -> . FLOAT_LIT
    (115) constant -> . INT_LIT
    (116) constant -> . CHAR_LIT
    (117) constant -> . STR_LIT
    (81) relational_expression -> . add_expression
    (82) relational_expression -> . relational_expression LT add_expression
    (83) relational_expression -> . relational_expression GT add_expression
    (84) relational_expression -> . relational_expression LE add_expression
    (85) relational_expression -> . relational_expression GE add_expression
    (86) add_expression -> . mult_expression
    (87) add_expression -> . add_expression ADD_OP mult_expression
    (88) add_expression -> . add_expression SUB_OP mult_expression
    (89) mult_expression -> . unary_expression
    (90) mult_expression -> . mult_expression MULT_OP unary_expression
    (91) mult_expression -> . mult_expression DIV_OP unary_expression
    (92) mult_expression -> . mult_expression MOD_OP unary_expression

    SCAN            shift and go to state 4
    INC             shift and go to state 36
    DEC             shift and go to state 7
    SUB_OP          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 2
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 30
    CHAR_ID         shift and go to state 13
    STR_ID          shift and go to state 19
    VOID_ID         shift and go to state 23
    FLOAT_LIT       shift and go to state 31
    INT_LIT         shift and go to state 33
    CHAR_LIT        shift and go to state 12
    STR_LIT         shift and go to state 9

    constant                       shift and go to state 1
    assignment_expression          shift and go to state 85
    unary_expression               shift and go to state 3
    relational_expression          shift and go to state 17
    postfix_expression             shift and go to state 15
    primary_expression             shift and go to state 26
    mult_expression                shift and go to state 25
    logical_and_expression         shift and go to state 8
    identifier                     shift and go to state 35
    add_expression                 shift and go to state 28
    logical_or_expression          shift and go to state 21
    equality_expression            shift and go to state 29
    scan_expression                shift and go to state 10

state 45

    (63) assignment_expression -> unary_expression ASSIGN_OP . assignment_expression
    (62) assignment_expression -> . scan_expression
    (63) assignment_expression -> . unary_expression ASSIGN_OP assignment_expression
    (64) assignment_expression -> . unary_expression ADD_ASSIGN assignment_expression
    (65) assignment_expression -> . unary_expression MIN_ASSIGN assignment_expression
    (66) assignment_expression -> . unary_expression MUL_ASSIGN assignment_expression
    (67) assignment_expression -> . unary_expression DIV_ASSIGN assignment_expression
    (68) assignment_expression -> . unary_expression MOD_ASSIGN assignment_expression
    (69) scan_expression -> . logical_or_expression
    (70) scan_expression -> . SCAN LPAREN RPAREN
    (93) unary_expression -> . postfix_expression
    (94) unary_expression -> . INC unary_expression
    (95) unary_expression -> . DEC unary_expression
    (96) unary_expression -> . SUB_OP add_expression
    (97) unary_expression -> . NOT logical_or_expression
    (74) logical_or_expression -> . logical_and_expression
    (75) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (98) postfix_expression -> . primary_expression
    (99) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (100) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (101) postfix_expression -> . postfix_expression LPAREN RPAREN
    (102) postfix_expression -> . postfix_expression INC
    (103) postfix_expression -> . postfix_expression DEC
    (76) logical_and_expression -> . equality_expression
    (77) logical_and_expression -> . logical_and_expression AND equality_expression
    (104) primary_expression -> . identifier
    (105) primary_expression -> . constant
    (106) primary_expression -> . LPAREN expression RPAREN
    (78) equality_expression -> . relational_expression
    (79) equality_expression -> . equality_expression EQ relational_expression
    (80) equality_expression -> . equality_expression NEQ relational_expression
    (109) identifier -> . FLOAT_ID
    (110) identifier -> . INT_ID
    (111) identifier -> . CHAR_ID
    (112) identifier -> . STR_ID
    (113) identifier -> . VOID_ID
    (114) constant -> . FLOAT_LIT
    (115) constant -> . INT_LIT
    (116) constant -> . CHAR_LIT
    (117) constant -> . STR_LIT
    (81) relational_expression -> . add_expression
    (82) relational_expression -> . relational_expression LT add_expression
    (83) relational_expression -> . relational_expression GT add_expression
    (84) relational_expression -> . relational_expression LE add_expression
    (85) relational_expression -> . relational_expression GE add_expression
    (86) add_expression -> . mult_expression
    (87) add_expression -> . add_expression ADD_OP mult_expression
    (88) add_expression -> . add_expression SUB_OP mult_expression
    (89) mult_expression -> . unary_expression
    (90) mult_expression -> . mult_expression MULT_OP unary_expression
    (91) mult_expression -> . mult_expression DIV_OP unary_expression
    (92) mult_expression -> . mult_expression MOD_OP unary_expression

    SCAN            shift and go to state 4
    INC             shift and go to state 36
    DEC             shift and go to state 7
    SUB_OP          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 2
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 30
    CHAR_ID         shift and go to state 13
    STR_ID          shift and go to state 19
    VOID_ID         shift and go to state 23
    FLOAT_LIT       shift and go to state 31
    INT_LIT         shift and go to state 33
    CHAR_LIT        shift and go to state 12
    STR_LIT         shift and go to state 9

    constant                       shift and go to state 1
    assignment_expression          shift and go to state 86
    unary_expression               shift and go to state 3
    relational_expression          shift and go to state 17
    postfix_expression             shift and go to state 15
    primary_expression             shift and go to state 26
    mult_expression                shift and go to state 25
    logical_and_expression         shift and go to state 8
    identifier                     shift and go to state 35
    add_expression                 shift and go to state 28
    logical_or_expression          shift and go to state 21
    equality_expression            shift and go to state 29
    scan_expression                shift and go to state 10

state 46

    (65) assignment_expression -> unary_expression MIN_ASSIGN . assignment_expression
    (62) assignment_expression -> . scan_expression
    (63) assignment_expression -> . unary_expression ASSIGN_OP assignment_expression
    (64) assignment_expression -> . unary_expression ADD_ASSIGN assignment_expression
    (65) assignment_expression -> . unary_expression MIN_ASSIGN assignment_expression
    (66) assignment_expression -> . unary_expression MUL_ASSIGN assignment_expression
    (67) assignment_expression -> . unary_expression DIV_ASSIGN assignment_expression
    (68) assignment_expression -> . unary_expression MOD_ASSIGN assignment_expression
    (69) scan_expression -> . logical_or_expression
    (70) scan_expression -> . SCAN LPAREN RPAREN
    (93) unary_expression -> . postfix_expression
    (94) unary_expression -> . INC unary_expression
    (95) unary_expression -> . DEC unary_expression
    (96) unary_expression -> . SUB_OP add_expression
    (97) unary_expression -> . NOT logical_or_expression
    (74) logical_or_expression -> . logical_and_expression
    (75) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (98) postfix_expression -> . primary_expression
    (99) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (100) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (101) postfix_expression -> . postfix_expression LPAREN RPAREN
    (102) postfix_expression -> . postfix_expression INC
    (103) postfix_expression -> . postfix_expression DEC
    (76) logical_and_expression -> . equality_expression
    (77) logical_and_expression -> . logical_and_expression AND equality_expression
    (104) primary_expression -> . identifier
    (105) primary_expression -> . constant
    (106) primary_expression -> . LPAREN expression RPAREN
    (78) equality_expression -> . relational_expression
    (79) equality_expression -> . equality_expression EQ relational_expression
    (80) equality_expression -> . equality_expression NEQ relational_expression
    (109) identifier -> . FLOAT_ID
    (110) identifier -> . INT_ID
    (111) identifier -> . CHAR_ID
    (112) identifier -> . STR_ID
    (113) identifier -> . VOID_ID
    (114) constant -> . FLOAT_LIT
    (115) constant -> . INT_LIT
    (116) constant -> . CHAR_LIT
    (117) constant -> . STR_LIT
    (81) relational_expression -> . add_expression
    (82) relational_expression -> . relational_expression LT add_expression
    (83) relational_expression -> . relational_expression GT add_expression
    (84) relational_expression -> . relational_expression LE add_expression
    (85) relational_expression -> . relational_expression GE add_expression
    (86) add_expression -> . mult_expression
    (87) add_expression -> . add_expression ADD_OP mult_expression
    (88) add_expression -> . add_expression SUB_OP mult_expression
    (89) mult_expression -> . unary_expression
    (90) mult_expression -> . mult_expression MULT_OP unary_expression
    (91) mult_expression -> . mult_expression DIV_OP unary_expression
    (92) mult_expression -> . mult_expression MOD_OP unary_expression

    SCAN            shift and go to state 4
    INC             shift and go to state 36
    DEC             shift and go to state 7
    SUB_OP          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 2
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 30
    CHAR_ID         shift and go to state 13
    STR_ID          shift and go to state 19
    VOID_ID         shift and go to state 23
    FLOAT_LIT       shift and go to state 31
    INT_LIT         shift and go to state 33
    CHAR_LIT        shift and go to state 12
    STR_LIT         shift and go to state 9

    constant                       shift and go to state 1
    assignment_expression          shift and go to state 87
    unary_expression               shift and go to state 3
    relational_expression          shift and go to state 17
    postfix_expression             shift and go to state 15
    primary_expression             shift and go to state 26
    mult_expression                shift and go to state 25
    logical_and_expression         shift and go to state 8
    identifier                     shift and go to state 35
    add_expression                 shift and go to state 28
    logical_or_expression          shift and go to state 21
    equality_expression            shift and go to state 29
    scan_expression                shift and go to state 10

state 47

    (64) assignment_expression -> unary_expression ADD_ASSIGN . assignment_expression
    (62) assignment_expression -> . scan_expression
    (63) assignment_expression -> . unary_expression ASSIGN_OP assignment_expression
    (64) assignment_expression -> . unary_expression ADD_ASSIGN assignment_expression
    (65) assignment_expression -> . unary_expression MIN_ASSIGN assignment_expression
    (66) assignment_expression -> . unary_expression MUL_ASSIGN assignment_expression
    (67) assignment_expression -> . unary_expression DIV_ASSIGN assignment_expression
    (68) assignment_expression -> . unary_expression MOD_ASSIGN assignment_expression
    (69) scan_expression -> . logical_or_expression
    (70) scan_expression -> . SCAN LPAREN RPAREN
    (93) unary_expression -> . postfix_expression
    (94) unary_expression -> . INC unary_expression
    (95) unary_expression -> . DEC unary_expression
    (96) unary_expression -> . SUB_OP add_expression
    (97) unary_expression -> . NOT logical_or_expression
    (74) logical_or_expression -> . logical_and_expression
    (75) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (98) postfix_expression -> . primary_expression
    (99) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (100) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (101) postfix_expression -> . postfix_expression LPAREN RPAREN
    (102) postfix_expression -> . postfix_expression INC
    (103) postfix_expression -> . postfix_expression DEC
    (76) logical_and_expression -> . equality_expression
    (77) logical_and_expression -> . logical_and_expression AND equality_expression
    (104) primary_expression -> . identifier
    (105) primary_expression -> . constant
    (106) primary_expression -> . LPAREN expression RPAREN
    (78) equality_expression -> . relational_expression
    (79) equality_expression -> . equality_expression EQ relational_expression
    (80) equality_expression -> . equality_expression NEQ relational_expression
    (109) identifier -> . FLOAT_ID
    (110) identifier -> . INT_ID
    (111) identifier -> . CHAR_ID
    (112) identifier -> . STR_ID
    (113) identifier -> . VOID_ID
    (114) constant -> . FLOAT_LIT
    (115) constant -> . INT_LIT
    (116) constant -> . CHAR_LIT
    (117) constant -> . STR_LIT
    (81) relational_expression -> . add_expression
    (82) relational_expression -> . relational_expression LT add_expression
    (83) relational_expression -> . relational_expression GT add_expression
    (84) relational_expression -> . relational_expression LE add_expression
    (85) relational_expression -> . relational_expression GE add_expression
    (86) add_expression -> . mult_expression
    (87) add_expression -> . add_expression ADD_OP mult_expression
    (88) add_expression -> . add_expression SUB_OP mult_expression
    (89) mult_expression -> . unary_expression
    (90) mult_expression -> . mult_expression MULT_OP unary_expression
    (91) mult_expression -> . mult_expression DIV_OP unary_expression
    (92) mult_expression -> . mult_expression MOD_OP unary_expression

    SCAN            shift and go to state 4
    INC             shift and go to state 36
    DEC             shift and go to state 7
    SUB_OP          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 2
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 30
    CHAR_ID         shift and go to state 13
    STR_ID          shift and go to state 19
    VOID_ID         shift and go to state 23
    FLOAT_LIT       shift and go to state 31
    INT_LIT         shift and go to state 33
    CHAR_LIT        shift and go to state 12
    STR_LIT         shift and go to state 9

    constant                       shift and go to state 1
    assignment_expression          shift and go to state 88
    unary_expression               shift and go to state 3
    relational_expression          shift and go to state 17
    postfix_expression             shift and go to state 15
    primary_expression             shift and go to state 26
    mult_expression                shift and go to state 25
    logical_and_expression         shift and go to state 8
    identifier                     shift and go to state 35
    add_expression                 shift and go to state 28
    logical_or_expression          shift and go to state 21
    equality_expression            shift and go to state 29
    scan_expression                shift and go to state 10

state 48

    (70) scan_expression -> SCAN LPAREN . RPAREN

    RPAREN          shift and go to state 89


state 49

    (3) external_declaration -> fxn_var_statement external_declaration .

    MAIN            reduce using rule 3 (external_declaration -> fxn_var_statement external_declaration .)
    $end            reduce using rule 3 (external_declaration -> fxn_var_statement external_declaration .)


state 50

    (95) unary_expression -> DEC unary_expression .

    ASSIGN_OP       reduce using rule 95 (unary_expression -> DEC unary_expression .)
    ADD_ASSIGN      reduce using rule 95 (unary_expression -> DEC unary_expression .)
    MIN_ASSIGN      reduce using rule 95 (unary_expression -> DEC unary_expression .)
    MUL_ASSIGN      reduce using rule 95 (unary_expression -> DEC unary_expression .)
    DIV_ASSIGN      reduce using rule 95 (unary_expression -> DEC unary_expression .)
    MOD_ASSIGN      reduce using rule 95 (unary_expression -> DEC unary_expression .)
    MULT_OP         reduce using rule 95 (unary_expression -> DEC unary_expression .)
    DIV_OP          reduce using rule 95 (unary_expression -> DEC unary_expression .)
    MOD_OP          reduce using rule 95 (unary_expression -> DEC unary_expression .)
    ADD_OP          reduce using rule 95 (unary_expression -> DEC unary_expression .)
    SUB_OP          reduce using rule 95 (unary_expression -> DEC unary_expression .)
    LT              reduce using rule 95 (unary_expression -> DEC unary_expression .)
    GT              reduce using rule 95 (unary_expression -> DEC unary_expression .)
    LE              reduce using rule 95 (unary_expression -> DEC unary_expression .)
    GE              reduce using rule 95 (unary_expression -> DEC unary_expression .)
    EQ              reduce using rule 95 (unary_expression -> DEC unary_expression .)
    NEQ             reduce using rule 95 (unary_expression -> DEC unary_expression .)
    OR              reduce using rule 95 (unary_expression -> DEC unary_expression .)
    AND             reduce using rule 95 (unary_expression -> DEC unary_expression .)
    SCAN            reduce using rule 95 (unary_expression -> DEC unary_expression .)
    INC             reduce using rule 95 (unary_expression -> DEC unary_expression .)
    DEC             reduce using rule 95 (unary_expression -> DEC unary_expression .)
    NOT             reduce using rule 95 (unary_expression -> DEC unary_expression .)
    VAR             reduce using rule 95 (unary_expression -> DEC unary_expression .)
    LPAREN          reduce using rule 95 (unary_expression -> DEC unary_expression .)
    FLOAT_ID        reduce using rule 95 (unary_expression -> DEC unary_expression .)
    INT_ID          reduce using rule 95 (unary_expression -> DEC unary_expression .)
    CHAR_ID         reduce using rule 95 (unary_expression -> DEC unary_expression .)
    STR_ID          reduce using rule 95 (unary_expression -> DEC unary_expression .)
    VOID_ID         reduce using rule 95 (unary_expression -> DEC unary_expression .)
    FLOAT_LIT       reduce using rule 95 (unary_expression -> DEC unary_expression .)
    INT_LIT         reduce using rule 95 (unary_expression -> DEC unary_expression .)
    CHAR_LIT        reduce using rule 95 (unary_expression -> DEC unary_expression .)
    STR_LIT         reduce using rule 95 (unary_expression -> DEC unary_expression .)
    MAIN            reduce using rule 95 (unary_expression -> DEC unary_expression .)
    RPAREN          reduce using rule 95 (unary_expression -> DEC unary_expression .)
    COMMA           reduce using rule 95 (unary_expression -> DEC unary_expression .)
    $end            reduce using rule 95 (unary_expression -> DEC unary_expression .)
    SEMI            reduce using rule 95 (unary_expression -> DEC unary_expression .)
    RBRACKET        reduce using rule 95 (unary_expression -> DEC unary_expression .)
    RBRACE          reduce using rule 95 (unary_expression -> DEC unary_expression .)
    COLON           reduce using rule 95 (unary_expression -> DEC unary_expression .)


state 51

    (77) logical_and_expression -> logical_and_expression AND . equality_expression
    (78) equality_expression -> . relational_expression
    (79) equality_expression -> . equality_expression EQ relational_expression
    (80) equality_expression -> . equality_expression NEQ relational_expression
    (81) relational_expression -> . add_expression
    (82) relational_expression -> . relational_expression LT add_expression
    (83) relational_expression -> . relational_expression GT add_expression
    (84) relational_expression -> . relational_expression LE add_expression
    (85) relational_expression -> . relational_expression GE add_expression
    (86) add_expression -> . mult_expression
    (87) add_expression -> . add_expression ADD_OP mult_expression
    (88) add_expression -> . add_expression SUB_OP mult_expression
    (89) mult_expression -> . unary_expression
    (90) mult_expression -> . mult_expression MULT_OP unary_expression
    (91) mult_expression -> . mult_expression DIV_OP unary_expression
    (92) mult_expression -> . mult_expression MOD_OP unary_expression
    (93) unary_expression -> . postfix_expression
    (94) unary_expression -> . INC unary_expression
    (95) unary_expression -> . DEC unary_expression
    (96) unary_expression -> . SUB_OP add_expression
    (97) unary_expression -> . NOT logical_or_expression
    (98) postfix_expression -> . primary_expression
    (99) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (100) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (101) postfix_expression -> . postfix_expression LPAREN RPAREN
    (102) postfix_expression -> . postfix_expression INC
    (103) postfix_expression -> . postfix_expression DEC
    (104) primary_expression -> . identifier
    (105) primary_expression -> . constant
    (106) primary_expression -> . LPAREN expression RPAREN
    (109) identifier -> . FLOAT_ID
    (110) identifier -> . INT_ID
    (111) identifier -> . CHAR_ID
    (112) identifier -> . STR_ID
    (113) identifier -> . VOID_ID
    (114) constant -> . FLOAT_LIT
    (115) constant -> . INT_LIT
    (116) constant -> . CHAR_LIT
    (117) constant -> . STR_LIT

    INC             shift and go to state 36
    DEC             shift and go to state 7
    SUB_OP          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 2
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 30
    CHAR_ID         shift and go to state 13
    STR_ID          shift and go to state 19
    VOID_ID         shift and go to state 23
    FLOAT_LIT       shift and go to state 31
    INT_LIT         shift and go to state 33
    CHAR_LIT        shift and go to state 12
    STR_LIT         shift and go to state 9

    constant                       shift and go to state 1
    unary_expression               shift and go to state 75
    postfix_expression             shift and go to state 15
    relational_expression          shift and go to state 17
    mult_expression                shift and go to state 25
    identifier                     shift and go to state 35
    add_expression                 shift and go to state 28
    equality_expression            shift and go to state 90
    primary_expression             shift and go to state 26

state 52

    (75) logical_or_expression -> logical_and_expression OR . logical_or_expression
    (74) logical_or_expression -> . logical_and_expression
    (75) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (76) logical_and_expression -> . equality_expression
    (77) logical_and_expression -> . logical_and_expression AND equality_expression
    (78) equality_expression -> . relational_expression
    (79) equality_expression -> . equality_expression EQ relational_expression
    (80) equality_expression -> . equality_expression NEQ relational_expression
    (81) relational_expression -> . add_expression
    (82) relational_expression -> . relational_expression LT add_expression
    (83) relational_expression -> . relational_expression GT add_expression
    (84) relational_expression -> . relational_expression LE add_expression
    (85) relational_expression -> . relational_expression GE add_expression
    (86) add_expression -> . mult_expression
    (87) add_expression -> . add_expression ADD_OP mult_expression
    (88) add_expression -> . add_expression SUB_OP mult_expression
    (89) mult_expression -> . unary_expression
    (90) mult_expression -> . mult_expression MULT_OP unary_expression
    (91) mult_expression -> . mult_expression DIV_OP unary_expression
    (92) mult_expression -> . mult_expression MOD_OP unary_expression
    (93) unary_expression -> . postfix_expression
    (94) unary_expression -> . INC unary_expression
    (95) unary_expression -> . DEC unary_expression
    (96) unary_expression -> . SUB_OP add_expression
    (97) unary_expression -> . NOT logical_or_expression
    (98) postfix_expression -> . primary_expression
    (99) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (100) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (101) postfix_expression -> . postfix_expression LPAREN RPAREN
    (102) postfix_expression -> . postfix_expression INC
    (103) postfix_expression -> . postfix_expression DEC
    (104) primary_expression -> . identifier
    (105) primary_expression -> . constant
    (106) primary_expression -> . LPAREN expression RPAREN
    (109) identifier -> . FLOAT_ID
    (110) identifier -> . INT_ID
    (111) identifier -> . CHAR_ID
    (112) identifier -> . STR_ID
    (113) identifier -> . VOID_ID
    (114) constant -> . FLOAT_LIT
    (115) constant -> . INT_LIT
    (116) constant -> . CHAR_LIT
    (117) constant -> . STR_LIT

    INC             shift and go to state 36
    DEC             shift and go to state 7
    SUB_OP          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 2
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 30
    CHAR_ID         shift and go to state 13
    STR_ID          shift and go to state 19
    VOID_ID         shift and go to state 23
    FLOAT_LIT       shift and go to state 31
    INT_LIT         shift and go to state 33
    CHAR_LIT        shift and go to state 12
    STR_LIT         shift and go to state 9

    constant                       shift and go to state 1
    unary_expression               shift and go to state 75
    postfix_expression             shift and go to state 15
    relational_expression          shift and go to state 17
    mult_expression                shift and go to state 25
    logical_and_expression         shift and go to state 8
    identifier                     shift and go to state 35
    add_expression                 shift and go to state 28
    logical_or_expression          shift and go to state 91
    equality_expression            shift and go to state 29
    primary_expression             shift and go to state 26

state 53

    (5) main -> MAIN . LPAREN empty RPAREN compound_statement

    LPAREN          shift and go to state 92


state 54

    (1) start -> external_declaration main . external_declaration
    (2) external_declaration -> . assignment_expression external_declaration
    (3) external_declaration -> . fxn_var_statement external_declaration
    (4) external_declaration -> . empty
    (62) assignment_expression -> . scan_expression
    (63) assignment_expression -> . unary_expression ASSIGN_OP assignment_expression
    (64) assignment_expression -> . unary_expression ADD_ASSIGN assignment_expression
    (65) assignment_expression -> . unary_expression MIN_ASSIGN assignment_expression
    (66) assignment_expression -> . unary_expression MUL_ASSIGN assignment_expression
    (67) assignment_expression -> . unary_expression DIV_ASSIGN assignment_expression
    (68) assignment_expression -> . unary_expression MOD_ASSIGN assignment_expression
    (6) fxn_var_statement -> . fxn_prot
    (7) fxn_var_statement -> . fxn_definition
    (118) empty -> .
    (69) scan_expression -> . logical_or_expression
    (70) scan_expression -> . SCAN LPAREN RPAREN
    (93) unary_expression -> . postfix_expression
    (94) unary_expression -> . INC unary_expression
    (95) unary_expression -> . DEC unary_expression
    (96) unary_expression -> . SUB_OP add_expression
    (97) unary_expression -> . NOT logical_or_expression
    (23) fxn_prot -> . fxn_declaration SEMI
    (24) fxn_definition -> . fxn_declaration compound_statement
    (74) logical_or_expression -> . logical_and_expression
    (75) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (98) postfix_expression -> . primary_expression
    (99) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (100) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (101) postfix_expression -> . postfix_expression LPAREN RPAREN
    (102) postfix_expression -> . postfix_expression INC
    (103) postfix_expression -> . postfix_expression DEC
    (25) fxn_declaration -> . VAR identifier LPAREN fxn_prot_args RPAREN
    (26) fxn_declaration -> . VAR identifier LPAREN empty RPAREN
    (76) logical_and_expression -> . equality_expression
    (77) logical_and_expression -> . logical_and_expression AND equality_expression
    (104) primary_expression -> . identifier
    (105) primary_expression -> . constant
    (106) primary_expression -> . LPAREN expression RPAREN
    (78) equality_expression -> . relational_expression
    (79) equality_expression -> . equality_expression EQ relational_expression
    (80) equality_expression -> . equality_expression NEQ relational_expression
    (109) identifier -> . FLOAT_ID
    (110) identifier -> . INT_ID
    (111) identifier -> . CHAR_ID
    (112) identifier -> . STR_ID
    (113) identifier -> . VOID_ID
    (114) constant -> . FLOAT_LIT
    (115) constant -> . INT_LIT
    (116) constant -> . CHAR_LIT
    (117) constant -> . STR_LIT
    (81) relational_expression -> . add_expression
    (82) relational_expression -> . relational_expression LT add_expression
    (83) relational_expression -> . relational_expression GT add_expression
    (84) relational_expression -> . relational_expression LE add_expression
    (85) relational_expression -> . relational_expression GE add_expression
    (86) add_expression -> . mult_expression
    (87) add_expression -> . add_expression ADD_OP mult_expression
    (88) add_expression -> . add_expression SUB_OP mult_expression
    (89) mult_expression -> . unary_expression
    (90) mult_expression -> . mult_expression MULT_OP unary_expression
    (91) mult_expression -> . mult_expression DIV_OP unary_expression
    (92) mult_expression -> . mult_expression MOD_OP unary_expression

    $end            reduce using rule 118 (empty -> .)
    SCAN            shift and go to state 4
    INC             shift and go to state 36
    DEC             shift and go to state 7
    SUB_OP          shift and go to state 32
    NOT             shift and go to state 34
    VAR             shift and go to state 27
    LPAREN          shift and go to state 2
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 30
    CHAR_ID         shift and go to state 13
    STR_ID          shift and go to state 19
    VOID_ID         shift and go to state 23
    FLOAT_LIT       shift and go to state 31
    INT_LIT         shift and go to state 33
    CHAR_LIT        shift and go to state 12
    STR_LIT         shift and go to state 9

    constant                       shift and go to state 1
    unary_expression               shift and go to state 3
    fxn_var_statement              shift and go to state 6
    scan_expression                shift and go to state 10
    external_declaration           shift and go to state 93
    fxn_declaration                shift and go to state 14
    postfix_expression             shift and go to state 15
    relational_expression          shift and go to state 17
    fxn_definition                 shift and go to state 18
    fxn_prot                       shift and go to state 20
    logical_or_expression          shift and go to state 21
    empty                          shift and go to state 22
    assignment_expression          shift and go to state 24
    primary_expression             shift and go to state 26
    logical_and_expression         shift and go to state 8
    add_expression                 shift and go to state 28
    equality_expression            shift and go to state 29
    mult_expression                shift and go to state 25
    identifier                     shift and go to state 35

state 55

    (38) compound_statement -> LBRACE . mix_list RBRACE
    (39) compound_statement -> LBRACE . RBRACE
    (40) mix_list -> . statement_list
    (41) mix_list -> . declaration_list
    (42) mix_list -> . statement_list mix_list
    (43) mix_list -> . declaration_list mix_list
    (44) statement_list -> . statement
    (45) statement_list -> . statement_list statement
    (9) declaration_list -> . declaration
    (10) declaration_list -> . declaration_list declaration
    (29) statement -> . labeled_statement
    (30) statement -> . expression_statement
    (31) statement -> . compound_statement
    (32) statement -> . selection_statement
    (33) statement -> . iteration_statement
    (34) statement -> . jump_statement
    (8) declaration -> . init_declarator_list SEMI
    (35) labeled_statement -> . CASE constant_expression COLON statement
    (36) labeled_statement -> . DEFAULT COLON statement
    (37) expression_statement -> . expression_opt SEMI
    (38) compound_statement -> . LBRACE mix_list RBRACE
    (39) compound_statement -> . LBRACE RBRACE
    (46) selection_statement -> . IF LPAREN expression RPAREN statement
    (47) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (48) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (49) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (50) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (51) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (52) jump_statement -> . CONTINUE SEMI
    (53) jump_statement -> . BREAK SEMI
    (54) jump_statement -> . RETURN expression_opt SEMI
    (11) init_declarator_list -> . init_declarator
    (12) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (55) expression_opt -> . empty
    (56) expression_opt -> . expression
    (13) init_declarator -> . declarator
    (14) init_declarator -> . declarator ASSIGN_OP initializer
    (118) empty -> .
    (57) expression -> . print_expression
    (58) expression -> . expression COMMA print_expression
    (15) declarator -> . VAR identifier
    (16) declarator -> . LPAREN declarator RPAREN
    (17) declarator -> . declarator LBRACKET constant_expression_opt RBRACKET
    (59) print_expression -> . assignment_expression
    (60) print_expression -> . PRINT LPAREN scan_expression RPAREN
    (61) print_expression -> . PRINTLN LPAREN scan_expression RPAREN
    (62) assignment_expression -> . scan_expression
    (63) assignment_expression -> . unary_expression ASSIGN_OP assignment_expression
    (64) assignment_expression -> . unary_expression ADD_ASSIGN assignment_expression
    (65) assignment_expression -> . unary_expression MIN_ASSIGN assignment_expression
    (66) assignment_expression -> . unary_expression MUL_ASSIGN assignment_expression
    (67) assignment_expression -> . unary_expression DIV_ASSIGN assignment_expression
    (68) assignment_expression -> . unary_expression MOD_ASSIGN assignment_expression
    (69) scan_expression -> . logical_or_expression
    (70) scan_expression -> . SCAN LPAREN RPAREN
    (93) unary_expression -> . postfix_expression
    (94) unary_expression -> . INC unary_expression
    (95) unary_expression -> . DEC unary_expression
    (96) unary_expression -> . SUB_OP add_expression
    (97) unary_expression -> . NOT logical_or_expression
    (74) logical_or_expression -> . logical_and_expression
    (75) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (98) postfix_expression -> . primary_expression
    (99) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (100) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (101) postfix_expression -> . postfix_expression LPAREN RPAREN
    (102) postfix_expression -> . postfix_expression INC
    (103) postfix_expression -> . postfix_expression DEC
    (76) logical_and_expression -> . equality_expression
    (77) logical_and_expression -> . logical_and_expression AND equality_expression
    (104) primary_expression -> . identifier
    (105) primary_expression -> . constant
    (106) primary_expression -> . LPAREN expression RPAREN
    (78) equality_expression -> . relational_expression
    (79) equality_expression -> . equality_expression EQ relational_expression
    (80) equality_expression -> . equality_expression NEQ relational_expression
    (109) identifier -> . FLOAT_ID
    (110) identifier -> . INT_ID
    (111) identifier -> . CHAR_ID
    (112) identifier -> . STR_ID
    (113) identifier -> . VOID_ID
    (114) constant -> . FLOAT_LIT
    (115) constant -> . INT_LIT
    (116) constant -> . CHAR_LIT
    (117) constant -> . STR_LIT
    (81) relational_expression -> . add_expression
    (82) relational_expression -> . relational_expression LT add_expression
    (83) relational_expression -> . relational_expression GT add_expression
    (84) relational_expression -> . relational_expression LE add_expression
    (85) relational_expression -> . relational_expression GE add_expression
    (86) add_expression -> . mult_expression
    (87) add_expression -> . add_expression ADD_OP mult_expression
    (88) add_expression -> . add_expression SUB_OP mult_expression
    (89) mult_expression -> . unary_expression
    (90) mult_expression -> . mult_expression MULT_OP unary_expression
    (91) mult_expression -> . mult_expression DIV_OP unary_expression
    (92) mult_expression -> . mult_expression MOD_OP unary_expression

    RBRACE          shift and go to state 97
    CASE            shift and go to state 112
    DEFAULT         shift and go to state 110
    LBRACE          shift and go to state 55
    IF              shift and go to state 122
    SWITCH          shift and go to state 113
    WHILE           shift and go to state 111
    FOR             shift and go to state 105
    DO              shift and go to state 119
    CONTINUE        shift and go to state 107
    BREAK           shift and go to state 117
    RETURN          shift and go to state 102
    SEMI            reduce using rule 118 (empty -> .)
    VAR             shift and go to state 98
    LPAREN          shift and go to state 109
    PRINT           shift and go to state 37
    PRINTLN         shift and go to state 38
    SCAN            shift and go to state 4
    INC             shift and go to state 36
    DEC             shift and go to state 7
    SUB_OP          shift and go to state 32
    NOT             shift and go to state 34
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 30
    CHAR_ID         shift and go to state 13
    STR_ID          shift and go to state 19
    VOID_ID         shift and go to state 23
    FLOAT_LIT       shift and go to state 31
    INT_LIT         shift and go to state 33
    CHAR_LIT        shift and go to state 12
    STR_LIT         shift and go to state 9

    expression_statement           shift and go to state 94
    constant                       shift and go to state 1
    unary_expression               shift and go to state 3
    iteration_statement            shift and go to state 96
    scan_expression                shift and go to state 10
    compound_statement             shift and go to state 104
    selection_statement            shift and go to state 120
    postfix_expression             shift and go to state 15
    relational_expression          shift and go to state 17
    statement                      shift and go to state 114
    logical_or_expression          shift and go to state 21
    empty                          shift and go to state 118
    assignment_expression          shift and go to state 39
    declarator                     shift and go to state 100
    print_expression               shift and go to state 40
    mult_expression                shift and go to state 25
    expression_opt                 shift and go to state 123
    primary_expression             shift and go to state 26
    declaration                    shift and go to state 115
    logical_and_expression         shift and go to state 8
    init_declarator_list           shift and go to state 95
    add_expression                 shift and go to state 28
    equality_expression            shift and go to state 29
    jump_statement                 shift and go to state 116
    labeled_statement              shift and go to state 103
    declaration_list               shift and go to state 99
    init_declarator                shift and go to state 106
    statement_list                 shift and go to state 121
    mix_list                       shift and go to state 101
    identifier                     shift and go to state 35
    expression                     shift and go to state 108

state 56

    (23) fxn_prot -> fxn_declaration SEMI .

    SCAN            reduce using rule 23 (fxn_prot -> fxn_declaration SEMI .)
    INC             reduce using rule 23 (fxn_prot -> fxn_declaration SEMI .)
    DEC             reduce using rule 23 (fxn_prot -> fxn_declaration SEMI .)
    SUB_OP          reduce using rule 23 (fxn_prot -> fxn_declaration SEMI .)
    NOT             reduce using rule 23 (fxn_prot -> fxn_declaration SEMI .)
    VAR             reduce using rule 23 (fxn_prot -> fxn_declaration SEMI .)
    LPAREN          reduce using rule 23 (fxn_prot -> fxn_declaration SEMI .)
    FLOAT_ID        reduce using rule 23 (fxn_prot -> fxn_declaration SEMI .)
    INT_ID          reduce using rule 23 (fxn_prot -> fxn_declaration SEMI .)
    CHAR_ID         reduce using rule 23 (fxn_prot -> fxn_declaration SEMI .)
    STR_ID          reduce using rule 23 (fxn_prot -> fxn_declaration SEMI .)
    VOID_ID         reduce using rule 23 (fxn_prot -> fxn_declaration SEMI .)
    FLOAT_LIT       reduce using rule 23 (fxn_prot -> fxn_declaration SEMI .)
    INT_LIT         reduce using rule 23 (fxn_prot -> fxn_declaration SEMI .)
    CHAR_LIT        reduce using rule 23 (fxn_prot -> fxn_declaration SEMI .)
    STR_LIT         reduce using rule 23 (fxn_prot -> fxn_declaration SEMI .)
    MAIN            reduce using rule 23 (fxn_prot -> fxn_declaration SEMI .)
    $end            reduce using rule 23 (fxn_prot -> fxn_declaration SEMI .)


state 57

    (24) fxn_definition -> fxn_declaration compound_statement .

    SCAN            reduce using rule 24 (fxn_definition -> fxn_declaration compound_statement .)
    INC             reduce using rule 24 (fxn_definition -> fxn_declaration compound_statement .)
    DEC             reduce using rule 24 (fxn_definition -> fxn_declaration compound_statement .)
    SUB_OP          reduce using rule 24 (fxn_definition -> fxn_declaration compound_statement .)
    NOT             reduce using rule 24 (fxn_definition -> fxn_declaration compound_statement .)
    VAR             reduce using rule 24 (fxn_definition -> fxn_declaration compound_statement .)
    LPAREN          reduce using rule 24 (fxn_definition -> fxn_declaration compound_statement .)
    FLOAT_ID        reduce using rule 24 (fxn_definition -> fxn_declaration compound_statement .)
    INT_ID          reduce using rule 24 (fxn_definition -> fxn_declaration compound_statement .)
    CHAR_ID         reduce using rule 24 (fxn_definition -> fxn_declaration compound_statement .)
    STR_ID          reduce using rule 24 (fxn_definition -> fxn_declaration compound_statement .)
    VOID_ID         reduce using rule 24 (fxn_definition -> fxn_declaration compound_statement .)
    FLOAT_LIT       reduce using rule 24 (fxn_definition -> fxn_declaration compound_statement .)
    INT_LIT         reduce using rule 24 (fxn_definition -> fxn_declaration compound_statement .)
    CHAR_LIT        reduce using rule 24 (fxn_definition -> fxn_declaration compound_statement .)
    STR_LIT         reduce using rule 24 (fxn_definition -> fxn_declaration compound_statement .)
    $end            reduce using rule 24 (fxn_definition -> fxn_declaration compound_statement .)
    MAIN            reduce using rule 24 (fxn_definition -> fxn_declaration compound_statement .)


state 58

    (99) postfix_expression -> postfix_expression LBRACKET . expression RBRACKET
    (57) expression -> . print_expression
    (58) expression -> . expression COMMA print_expression
    (59) print_expression -> . assignment_expression
    (60) print_expression -> . PRINT LPAREN scan_expression RPAREN
    (61) print_expression -> . PRINTLN LPAREN scan_expression RPAREN
    (62) assignment_expression -> . scan_expression
    (63) assignment_expression -> . unary_expression ASSIGN_OP assignment_expression
    (64) assignment_expression -> . unary_expression ADD_ASSIGN assignment_expression
    (65) assignment_expression -> . unary_expression MIN_ASSIGN assignment_expression
    (66) assignment_expression -> . unary_expression MUL_ASSIGN assignment_expression
    (67) assignment_expression -> . unary_expression DIV_ASSIGN assignment_expression
    (68) assignment_expression -> . unary_expression MOD_ASSIGN assignment_expression
    (69) scan_expression -> . logical_or_expression
    (70) scan_expression -> . SCAN LPAREN RPAREN
    (93) unary_expression -> . postfix_expression
    (94) unary_expression -> . INC unary_expression
    (95) unary_expression -> . DEC unary_expression
    (96) unary_expression -> . SUB_OP add_expression
    (97) unary_expression -> . NOT logical_or_expression
    (74) logical_or_expression -> . logical_and_expression
    (75) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (98) postfix_expression -> . primary_expression
    (99) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (100) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (101) postfix_expression -> . postfix_expression LPAREN RPAREN
    (102) postfix_expression -> . postfix_expression INC
    (103) postfix_expression -> . postfix_expression DEC
    (76) logical_and_expression -> . equality_expression
    (77) logical_and_expression -> . logical_and_expression AND equality_expression
    (104) primary_expression -> . identifier
    (105) primary_expression -> . constant
    (106) primary_expression -> . LPAREN expression RPAREN
    (78) equality_expression -> . relational_expression
    (79) equality_expression -> . equality_expression EQ relational_expression
    (80) equality_expression -> . equality_expression NEQ relational_expression
    (109) identifier -> . FLOAT_ID
    (110) identifier -> . INT_ID
    (111) identifier -> . CHAR_ID
    (112) identifier -> . STR_ID
    (113) identifier -> . VOID_ID
    (114) constant -> . FLOAT_LIT
    (115) constant -> . INT_LIT
    (116) constant -> . CHAR_LIT
    (117) constant -> . STR_LIT
    (81) relational_expression -> . add_expression
    (82) relational_expression -> . relational_expression LT add_expression
    (83) relational_expression -> . relational_expression GT add_expression
    (84) relational_expression -> . relational_expression LE add_expression
    (85) relational_expression -> . relational_expression GE add_expression
    (86) add_expression -> . mult_expression
    (87) add_expression -> . add_expression ADD_OP mult_expression
    (88) add_expression -> . add_expression SUB_OP mult_expression
    (89) mult_expression -> . unary_expression
    (90) mult_expression -> . mult_expression MULT_OP unary_expression
    (91) mult_expression -> . mult_expression DIV_OP unary_expression
    (92) mult_expression -> . mult_expression MOD_OP unary_expression

    PRINT           shift and go to state 37
    PRINTLN         shift and go to state 38
    SCAN            shift and go to state 4
    INC             shift and go to state 36
    DEC             shift and go to state 7
    SUB_OP          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 2
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 30
    CHAR_ID         shift and go to state 13
    STR_ID          shift and go to state 19
    VOID_ID         shift and go to state 23
    FLOAT_LIT       shift and go to state 31
    INT_LIT         shift and go to state 33
    CHAR_LIT        shift and go to state 12
    STR_LIT         shift and go to state 9

    constant                       shift and go to state 1
    assignment_expression          shift and go to state 39
    unary_expression               shift and go to state 3
    relational_expression          shift and go to state 17
    add_expression                 shift and go to state 28
    print_expression               shift and go to state 40
    postfix_expression             shift and go to state 15
    primary_expression             shift and go to state 26
    mult_expression                shift and go to state 25
    logical_and_expression         shift and go to state 8
    identifier                     shift and go to state 35
    expression                     shift and go to state 124
    logical_or_expression          shift and go to state 21
    equality_expression            shift and go to state 29
    scan_expression                shift and go to state 10

state 59

    (100) postfix_expression -> postfix_expression LPAREN . argument_expression_list RPAREN
    (101) postfix_expression -> postfix_expression LPAREN . RPAREN
    (107) argument_expression_list -> . assignment_expression
    (108) argument_expression_list -> . argument_expression_list COMMA assignment_expression
    (62) assignment_expression -> . scan_expression
    (63) assignment_expression -> . unary_expression ASSIGN_OP assignment_expression
    (64) assignment_expression -> . unary_expression ADD_ASSIGN assignment_expression
    (65) assignment_expression -> . unary_expression MIN_ASSIGN assignment_expression
    (66) assignment_expression -> . unary_expression MUL_ASSIGN assignment_expression
    (67) assignment_expression -> . unary_expression DIV_ASSIGN assignment_expression
    (68) assignment_expression -> . unary_expression MOD_ASSIGN assignment_expression
    (69) scan_expression -> . logical_or_expression
    (70) scan_expression -> . SCAN LPAREN RPAREN
    (93) unary_expression -> . postfix_expression
    (94) unary_expression -> . INC unary_expression
    (95) unary_expression -> . DEC unary_expression
    (96) unary_expression -> . SUB_OP add_expression
    (97) unary_expression -> . NOT logical_or_expression
    (74) logical_or_expression -> . logical_and_expression
    (75) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (98) postfix_expression -> . primary_expression
    (99) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (100) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (101) postfix_expression -> . postfix_expression LPAREN RPAREN
    (102) postfix_expression -> . postfix_expression INC
    (103) postfix_expression -> . postfix_expression DEC
    (76) logical_and_expression -> . equality_expression
    (77) logical_and_expression -> . logical_and_expression AND equality_expression
    (104) primary_expression -> . identifier
    (105) primary_expression -> . constant
    (106) primary_expression -> . LPAREN expression RPAREN
    (78) equality_expression -> . relational_expression
    (79) equality_expression -> . equality_expression EQ relational_expression
    (80) equality_expression -> . equality_expression NEQ relational_expression
    (109) identifier -> . FLOAT_ID
    (110) identifier -> . INT_ID
    (111) identifier -> . CHAR_ID
    (112) identifier -> . STR_ID
    (113) identifier -> . VOID_ID
    (114) constant -> . FLOAT_LIT
    (115) constant -> . INT_LIT
    (116) constant -> . CHAR_LIT
    (117) constant -> . STR_LIT
    (81) relational_expression -> . add_expression
    (82) relational_expression -> . relational_expression LT add_expression
    (83) relational_expression -> . relational_expression GT add_expression
    (84) relational_expression -> . relational_expression LE add_expression
    (85) relational_expression -> . relational_expression GE add_expression
    (86) add_expression -> . mult_expression
    (87) add_expression -> . add_expression ADD_OP mult_expression
    (88) add_expression -> . add_expression SUB_OP mult_expression
    (89) mult_expression -> . unary_expression
    (90) mult_expression -> . mult_expression MULT_OP unary_expression
    (91) mult_expression -> . mult_expression DIV_OP unary_expression
    (92) mult_expression -> . mult_expression MOD_OP unary_expression

    RPAREN          shift and go to state 125
    SCAN            shift and go to state 4
    INC             shift and go to state 36
    DEC             shift and go to state 7
    SUB_OP          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 2
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 30
    CHAR_ID         shift and go to state 13
    STR_ID          shift and go to state 19
    VOID_ID         shift and go to state 23
    FLOAT_LIT       shift and go to state 31
    INT_LIT         shift and go to state 33
    CHAR_LIT        shift and go to state 12
    STR_LIT         shift and go to state 9

    constant                       shift and go to state 1
    assignment_expression          shift and go to state 126
    unary_expression               shift and go to state 3
    relational_expression          shift and go to state 17
    argument_expression_list       shift and go to state 127
    postfix_expression             shift and go to state 15
    primary_expression             shift and go to state 26
    mult_expression                shift and go to state 25
    logical_and_expression         shift and go to state 8
    identifier                     shift and go to state 35
    add_expression                 shift and go to state 28
    logical_or_expression          shift and go to state 21
    equality_expression            shift and go to state 29
    scan_expression                shift and go to state 10

state 60

    (103) postfix_expression -> postfix_expression DEC .

    LBRACKET        reduce using rule 103 (postfix_expression -> postfix_expression DEC .)
    LPAREN          reduce using rule 103 (postfix_expression -> postfix_expression DEC .)
    INC             reduce using rule 103 (postfix_expression -> postfix_expression DEC .)
    DEC             reduce using rule 103 (postfix_expression -> postfix_expression DEC .)
    ASSIGN_OP       reduce using rule 103 (postfix_expression -> postfix_expression DEC .)
    ADD_ASSIGN      reduce using rule 103 (postfix_expression -> postfix_expression DEC .)
    MIN_ASSIGN      reduce using rule 103 (postfix_expression -> postfix_expression DEC .)
    MUL_ASSIGN      reduce using rule 103 (postfix_expression -> postfix_expression DEC .)
    DIV_ASSIGN      reduce using rule 103 (postfix_expression -> postfix_expression DEC .)
    MOD_ASSIGN      reduce using rule 103 (postfix_expression -> postfix_expression DEC .)
    MULT_OP         reduce using rule 103 (postfix_expression -> postfix_expression DEC .)
    DIV_OP          reduce using rule 103 (postfix_expression -> postfix_expression DEC .)
    MOD_OP          reduce using rule 103 (postfix_expression -> postfix_expression DEC .)
    ADD_OP          reduce using rule 103 (postfix_expression -> postfix_expression DEC .)
    SUB_OP          reduce using rule 103 (postfix_expression -> postfix_expression DEC .)
    LT              reduce using rule 103 (postfix_expression -> postfix_expression DEC .)
    GT              reduce using rule 103 (postfix_expression -> postfix_expression DEC .)
    LE              reduce using rule 103 (postfix_expression -> postfix_expression DEC .)
    GE              reduce using rule 103 (postfix_expression -> postfix_expression DEC .)
    EQ              reduce using rule 103 (postfix_expression -> postfix_expression DEC .)
    NEQ             reduce using rule 103 (postfix_expression -> postfix_expression DEC .)
    OR              reduce using rule 103 (postfix_expression -> postfix_expression DEC .)
    AND             reduce using rule 103 (postfix_expression -> postfix_expression DEC .)
    SCAN            reduce using rule 103 (postfix_expression -> postfix_expression DEC .)
    NOT             reduce using rule 103 (postfix_expression -> postfix_expression DEC .)
    VAR             reduce using rule 103 (postfix_expression -> postfix_expression DEC .)
    FLOAT_ID        reduce using rule 103 (postfix_expression -> postfix_expression DEC .)
    INT_ID          reduce using rule 103 (postfix_expression -> postfix_expression DEC .)
    CHAR_ID         reduce using rule 103 (postfix_expression -> postfix_expression DEC .)
    STR_ID          reduce using rule 103 (postfix_expression -> postfix_expression DEC .)
    VOID_ID         reduce using rule 103 (postfix_expression -> postfix_expression DEC .)
    FLOAT_LIT       reduce using rule 103 (postfix_expression -> postfix_expression DEC .)
    INT_LIT         reduce using rule 103 (postfix_expression -> postfix_expression DEC .)
    CHAR_LIT        reduce using rule 103 (postfix_expression -> postfix_expression DEC .)
    STR_LIT         reduce using rule 103 (postfix_expression -> postfix_expression DEC .)
    MAIN            reduce using rule 103 (postfix_expression -> postfix_expression DEC .)
    RPAREN          reduce using rule 103 (postfix_expression -> postfix_expression DEC .)
    COMMA           reduce using rule 103 (postfix_expression -> postfix_expression DEC .)
    $end            reduce using rule 103 (postfix_expression -> postfix_expression DEC .)
    SEMI            reduce using rule 103 (postfix_expression -> postfix_expression DEC .)
    RBRACKET        reduce using rule 103 (postfix_expression -> postfix_expression DEC .)
    RBRACE          reduce using rule 103 (postfix_expression -> postfix_expression DEC .)
    COLON           reduce using rule 103 (postfix_expression -> postfix_expression DEC .)


state 61

    (102) postfix_expression -> postfix_expression INC .

    LBRACKET        reduce using rule 102 (postfix_expression -> postfix_expression INC .)
    LPAREN          reduce using rule 102 (postfix_expression -> postfix_expression INC .)
    INC             reduce using rule 102 (postfix_expression -> postfix_expression INC .)
    DEC             reduce using rule 102 (postfix_expression -> postfix_expression INC .)
    ASSIGN_OP       reduce using rule 102 (postfix_expression -> postfix_expression INC .)
    ADD_ASSIGN      reduce using rule 102 (postfix_expression -> postfix_expression INC .)
    MIN_ASSIGN      reduce using rule 102 (postfix_expression -> postfix_expression INC .)
    MUL_ASSIGN      reduce using rule 102 (postfix_expression -> postfix_expression INC .)
    DIV_ASSIGN      reduce using rule 102 (postfix_expression -> postfix_expression INC .)
    MOD_ASSIGN      reduce using rule 102 (postfix_expression -> postfix_expression INC .)
    MULT_OP         reduce using rule 102 (postfix_expression -> postfix_expression INC .)
    DIV_OP          reduce using rule 102 (postfix_expression -> postfix_expression INC .)
    MOD_OP          reduce using rule 102 (postfix_expression -> postfix_expression INC .)
    ADD_OP          reduce using rule 102 (postfix_expression -> postfix_expression INC .)
    SUB_OP          reduce using rule 102 (postfix_expression -> postfix_expression INC .)
    LT              reduce using rule 102 (postfix_expression -> postfix_expression INC .)
    GT              reduce using rule 102 (postfix_expression -> postfix_expression INC .)
    LE              reduce using rule 102 (postfix_expression -> postfix_expression INC .)
    GE              reduce using rule 102 (postfix_expression -> postfix_expression INC .)
    EQ              reduce using rule 102 (postfix_expression -> postfix_expression INC .)
    NEQ             reduce using rule 102 (postfix_expression -> postfix_expression INC .)
    OR              reduce using rule 102 (postfix_expression -> postfix_expression INC .)
    AND             reduce using rule 102 (postfix_expression -> postfix_expression INC .)
    SCAN            reduce using rule 102 (postfix_expression -> postfix_expression INC .)
    NOT             reduce using rule 102 (postfix_expression -> postfix_expression INC .)
    VAR             reduce using rule 102 (postfix_expression -> postfix_expression INC .)
    FLOAT_ID        reduce using rule 102 (postfix_expression -> postfix_expression INC .)
    INT_ID          reduce using rule 102 (postfix_expression -> postfix_expression INC .)
    CHAR_ID         reduce using rule 102 (postfix_expression -> postfix_expression INC .)
    STR_ID          reduce using rule 102 (postfix_expression -> postfix_expression INC .)
    VOID_ID         reduce using rule 102 (postfix_expression -> postfix_expression INC .)
    FLOAT_LIT       reduce using rule 102 (postfix_expression -> postfix_expression INC .)
    INT_LIT         reduce using rule 102 (postfix_expression -> postfix_expression INC .)
    CHAR_LIT        reduce using rule 102 (postfix_expression -> postfix_expression INC .)
    STR_LIT         reduce using rule 102 (postfix_expression -> postfix_expression INC .)
    MAIN            reduce using rule 102 (postfix_expression -> postfix_expression INC .)
    RPAREN          reduce using rule 102 (postfix_expression -> postfix_expression INC .)
    COMMA           reduce using rule 102 (postfix_expression -> postfix_expression INC .)
    $end            reduce using rule 102 (postfix_expression -> postfix_expression INC .)
    SEMI            reduce using rule 102 (postfix_expression -> postfix_expression INC .)
    RBRACKET        reduce using rule 102 (postfix_expression -> postfix_expression INC .)
    RBRACE          reduce using rule 102 (postfix_expression -> postfix_expression INC .)
    COLON           reduce using rule 102 (postfix_expression -> postfix_expression INC .)


state 62

    (83) relational_expression -> relational_expression GT . add_expression
    (86) add_expression -> . mult_expression
    (87) add_expression -> . add_expression ADD_OP mult_expression
    (88) add_expression -> . add_expression SUB_OP mult_expression
    (89) mult_expression -> . unary_expression
    (90) mult_expression -> . mult_expression MULT_OP unary_expression
    (91) mult_expression -> . mult_expression DIV_OP unary_expression
    (92) mult_expression -> . mult_expression MOD_OP unary_expression
    (93) unary_expression -> . postfix_expression
    (94) unary_expression -> . INC unary_expression
    (95) unary_expression -> . DEC unary_expression
    (96) unary_expression -> . SUB_OP add_expression
    (97) unary_expression -> . NOT logical_or_expression
    (98) postfix_expression -> . primary_expression
    (99) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (100) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (101) postfix_expression -> . postfix_expression LPAREN RPAREN
    (102) postfix_expression -> . postfix_expression INC
    (103) postfix_expression -> . postfix_expression DEC
    (104) primary_expression -> . identifier
    (105) primary_expression -> . constant
    (106) primary_expression -> . LPAREN expression RPAREN
    (109) identifier -> . FLOAT_ID
    (110) identifier -> . INT_ID
    (111) identifier -> . CHAR_ID
    (112) identifier -> . STR_ID
    (113) identifier -> . VOID_ID
    (114) constant -> . FLOAT_LIT
    (115) constant -> . INT_LIT
    (116) constant -> . CHAR_LIT
    (117) constant -> . STR_LIT

    INC             shift and go to state 36
    DEC             shift and go to state 7
    SUB_OP          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 2
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 30
    CHAR_ID         shift and go to state 13
    STR_ID          shift and go to state 19
    VOID_ID         shift and go to state 23
    FLOAT_LIT       shift and go to state 31
    INT_LIT         shift and go to state 33
    CHAR_LIT        shift and go to state 12
    STR_LIT         shift and go to state 9

    constant                       shift and go to state 1
    unary_expression               shift and go to state 75
    postfix_expression             shift and go to state 15
    mult_expression                shift and go to state 25
    identifier                     shift and go to state 35
    add_expression                 shift and go to state 128
    primary_expression             shift and go to state 26

state 63

    (82) relational_expression -> relational_expression LT . add_expression
    (86) add_expression -> . mult_expression
    (87) add_expression -> . add_expression ADD_OP mult_expression
    (88) add_expression -> . add_expression SUB_OP mult_expression
    (89) mult_expression -> . unary_expression
    (90) mult_expression -> . mult_expression MULT_OP unary_expression
    (91) mult_expression -> . mult_expression DIV_OP unary_expression
    (92) mult_expression -> . mult_expression MOD_OP unary_expression
    (93) unary_expression -> . postfix_expression
    (94) unary_expression -> . INC unary_expression
    (95) unary_expression -> . DEC unary_expression
    (96) unary_expression -> . SUB_OP add_expression
    (97) unary_expression -> . NOT logical_or_expression
    (98) postfix_expression -> . primary_expression
    (99) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (100) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (101) postfix_expression -> . postfix_expression LPAREN RPAREN
    (102) postfix_expression -> . postfix_expression INC
    (103) postfix_expression -> . postfix_expression DEC
    (104) primary_expression -> . identifier
    (105) primary_expression -> . constant
    (106) primary_expression -> . LPAREN expression RPAREN
    (109) identifier -> . FLOAT_ID
    (110) identifier -> . INT_ID
    (111) identifier -> . CHAR_ID
    (112) identifier -> . STR_ID
    (113) identifier -> . VOID_ID
    (114) constant -> . FLOAT_LIT
    (115) constant -> . INT_LIT
    (116) constant -> . CHAR_LIT
    (117) constant -> . STR_LIT

    INC             shift and go to state 36
    DEC             shift and go to state 7
    SUB_OP          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 2
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 30
    CHAR_ID         shift and go to state 13
    STR_ID          shift and go to state 19
    VOID_ID         shift and go to state 23
    FLOAT_LIT       shift and go to state 31
    INT_LIT         shift and go to state 33
    CHAR_LIT        shift and go to state 12
    STR_LIT         shift and go to state 9

    constant                       shift and go to state 1
    unary_expression               shift and go to state 75
    postfix_expression             shift and go to state 15
    mult_expression                shift and go to state 25
    identifier                     shift and go to state 35
    add_expression                 shift and go to state 129
    primary_expression             shift and go to state 26

state 64

    (85) relational_expression -> relational_expression GE . add_expression
    (86) add_expression -> . mult_expression
    (87) add_expression -> . add_expression ADD_OP mult_expression
    (88) add_expression -> . add_expression SUB_OP mult_expression
    (89) mult_expression -> . unary_expression
    (90) mult_expression -> . mult_expression MULT_OP unary_expression
    (91) mult_expression -> . mult_expression DIV_OP unary_expression
    (92) mult_expression -> . mult_expression MOD_OP unary_expression
    (93) unary_expression -> . postfix_expression
    (94) unary_expression -> . INC unary_expression
    (95) unary_expression -> . DEC unary_expression
    (96) unary_expression -> . SUB_OP add_expression
    (97) unary_expression -> . NOT logical_or_expression
    (98) postfix_expression -> . primary_expression
    (99) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (100) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (101) postfix_expression -> . postfix_expression LPAREN RPAREN
    (102) postfix_expression -> . postfix_expression INC
    (103) postfix_expression -> . postfix_expression DEC
    (104) primary_expression -> . identifier
    (105) primary_expression -> . constant
    (106) primary_expression -> . LPAREN expression RPAREN
    (109) identifier -> . FLOAT_ID
    (110) identifier -> . INT_ID
    (111) identifier -> . CHAR_ID
    (112) identifier -> . STR_ID
    (113) identifier -> . VOID_ID
    (114) constant -> . FLOAT_LIT
    (115) constant -> . INT_LIT
    (116) constant -> . CHAR_LIT
    (117) constant -> . STR_LIT

    INC             shift and go to state 36
    DEC             shift and go to state 7
    SUB_OP          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 2
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 30
    CHAR_ID         shift and go to state 13
    STR_ID          shift and go to state 19
    VOID_ID         shift and go to state 23
    FLOAT_LIT       shift and go to state 31
    INT_LIT         shift and go to state 33
    CHAR_LIT        shift and go to state 12
    STR_LIT         shift and go to state 9

    constant                       shift and go to state 1
    unary_expression               shift and go to state 75
    postfix_expression             shift and go to state 15
    mult_expression                shift and go to state 25
    identifier                     shift and go to state 35
    add_expression                 shift and go to state 130
    primary_expression             shift and go to state 26

state 65

    (84) relational_expression -> relational_expression LE . add_expression
    (86) add_expression -> . mult_expression
    (87) add_expression -> . add_expression ADD_OP mult_expression
    (88) add_expression -> . add_expression SUB_OP mult_expression
    (89) mult_expression -> . unary_expression
    (90) mult_expression -> . mult_expression MULT_OP unary_expression
    (91) mult_expression -> . mult_expression DIV_OP unary_expression
    (92) mult_expression -> . mult_expression MOD_OP unary_expression
    (93) unary_expression -> . postfix_expression
    (94) unary_expression -> . INC unary_expression
    (95) unary_expression -> . DEC unary_expression
    (96) unary_expression -> . SUB_OP add_expression
    (97) unary_expression -> . NOT logical_or_expression
    (98) postfix_expression -> . primary_expression
    (99) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (100) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (101) postfix_expression -> . postfix_expression LPAREN RPAREN
    (102) postfix_expression -> . postfix_expression INC
    (103) postfix_expression -> . postfix_expression DEC
    (104) primary_expression -> . identifier
    (105) primary_expression -> . constant
    (106) primary_expression -> . LPAREN expression RPAREN
    (109) identifier -> . FLOAT_ID
    (110) identifier -> . INT_ID
    (111) identifier -> . CHAR_ID
    (112) identifier -> . STR_ID
    (113) identifier -> . VOID_ID
    (114) constant -> . FLOAT_LIT
    (115) constant -> . INT_LIT
    (116) constant -> . CHAR_LIT
    (117) constant -> . STR_LIT

    INC             shift and go to state 36
    DEC             shift and go to state 7
    SUB_OP          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 2
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 30
    CHAR_ID         shift and go to state 13
    STR_ID          shift and go to state 19
    VOID_ID         shift and go to state 23
    FLOAT_LIT       shift and go to state 31
    INT_LIT         shift and go to state 33
    CHAR_LIT        shift and go to state 12
    STR_LIT         shift and go to state 9

    constant                       shift and go to state 1
    unary_expression               shift and go to state 75
    postfix_expression             shift and go to state 15
    mult_expression                shift and go to state 25
    identifier                     shift and go to state 35
    add_expression                 shift and go to state 131
    primary_expression             shift and go to state 26

state 66

    (2) external_declaration -> assignment_expression external_declaration .

    MAIN            reduce using rule 2 (external_declaration -> assignment_expression external_declaration .)
    $end            reduce using rule 2 (external_declaration -> assignment_expression external_declaration .)


state 67

    (90) mult_expression -> mult_expression MULT_OP . unary_expression
    (93) unary_expression -> . postfix_expression
    (94) unary_expression -> . INC unary_expression
    (95) unary_expression -> . DEC unary_expression
    (96) unary_expression -> . SUB_OP add_expression
    (97) unary_expression -> . NOT logical_or_expression
    (98) postfix_expression -> . primary_expression
    (99) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (100) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (101) postfix_expression -> . postfix_expression LPAREN RPAREN
    (102) postfix_expression -> . postfix_expression INC
    (103) postfix_expression -> . postfix_expression DEC
    (104) primary_expression -> . identifier
    (105) primary_expression -> . constant
    (106) primary_expression -> . LPAREN expression RPAREN
    (109) identifier -> . FLOAT_ID
    (110) identifier -> . INT_ID
    (111) identifier -> . CHAR_ID
    (112) identifier -> . STR_ID
    (113) identifier -> . VOID_ID
    (114) constant -> . FLOAT_LIT
    (115) constant -> . INT_LIT
    (116) constant -> . CHAR_LIT
    (117) constant -> . STR_LIT

    INC             shift and go to state 36
    DEC             shift and go to state 7
    SUB_OP          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 2
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 30
    CHAR_ID         shift and go to state 13
    STR_ID          shift and go to state 19
    VOID_ID         shift and go to state 23
    FLOAT_LIT       shift and go to state 31
    INT_LIT         shift and go to state 33
    CHAR_LIT        shift and go to state 12
    STR_LIT         shift and go to state 9

    constant                       shift and go to state 1
    unary_expression               shift and go to state 132
    postfix_expression             shift and go to state 15
    primary_expression             shift and go to state 26
    identifier                     shift and go to state 35

state 68

    (92) mult_expression -> mult_expression MOD_OP . unary_expression
    (93) unary_expression -> . postfix_expression
    (94) unary_expression -> . INC unary_expression
    (95) unary_expression -> . DEC unary_expression
    (96) unary_expression -> . SUB_OP add_expression
    (97) unary_expression -> . NOT logical_or_expression
    (98) postfix_expression -> . primary_expression
    (99) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (100) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (101) postfix_expression -> . postfix_expression LPAREN RPAREN
    (102) postfix_expression -> . postfix_expression INC
    (103) postfix_expression -> . postfix_expression DEC
    (104) primary_expression -> . identifier
    (105) primary_expression -> . constant
    (106) primary_expression -> . LPAREN expression RPAREN
    (109) identifier -> . FLOAT_ID
    (110) identifier -> . INT_ID
    (111) identifier -> . CHAR_ID
    (112) identifier -> . STR_ID
    (113) identifier -> . VOID_ID
    (114) constant -> . FLOAT_LIT
    (115) constant -> . INT_LIT
    (116) constant -> . CHAR_LIT
    (117) constant -> . STR_LIT

    INC             shift and go to state 36
    DEC             shift and go to state 7
    SUB_OP          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 2
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 30
    CHAR_ID         shift and go to state 13
    STR_ID          shift and go to state 19
    VOID_ID         shift and go to state 23
    FLOAT_LIT       shift and go to state 31
    INT_LIT         shift and go to state 33
    CHAR_LIT        shift and go to state 12
    STR_LIT         shift and go to state 9

    constant                       shift and go to state 1
    unary_expression               shift and go to state 133
    postfix_expression             shift and go to state 15
    primary_expression             shift and go to state 26
    identifier                     shift and go to state 35

state 69

    (91) mult_expression -> mult_expression DIV_OP . unary_expression
    (93) unary_expression -> . postfix_expression
    (94) unary_expression -> . INC unary_expression
    (95) unary_expression -> . DEC unary_expression
    (96) unary_expression -> . SUB_OP add_expression
    (97) unary_expression -> . NOT logical_or_expression
    (98) postfix_expression -> . primary_expression
    (99) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (100) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (101) postfix_expression -> . postfix_expression LPAREN RPAREN
    (102) postfix_expression -> . postfix_expression INC
    (103) postfix_expression -> . postfix_expression DEC
    (104) primary_expression -> . identifier
    (105) primary_expression -> . constant
    (106) primary_expression -> . LPAREN expression RPAREN
    (109) identifier -> . FLOAT_ID
    (110) identifier -> . INT_ID
    (111) identifier -> . CHAR_ID
    (112) identifier -> . STR_ID
    (113) identifier -> . VOID_ID
    (114) constant -> . FLOAT_LIT
    (115) constant -> . INT_LIT
    (116) constant -> . CHAR_LIT
    (117) constant -> . STR_LIT

    INC             shift and go to state 36
    DEC             shift and go to state 7
    SUB_OP          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 2
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 30
    CHAR_ID         shift and go to state 13
    STR_ID          shift and go to state 19
    VOID_ID         shift and go to state 23
    FLOAT_LIT       shift and go to state 31
    INT_LIT         shift and go to state 33
    CHAR_LIT        shift and go to state 12
    STR_LIT         shift and go to state 9

    constant                       shift and go to state 1
    unary_expression               shift and go to state 134
    postfix_expression             shift and go to state 15
    primary_expression             shift and go to state 26
    identifier                     shift and go to state 35

state 70

    (25) fxn_declaration -> VAR identifier . LPAREN fxn_prot_args RPAREN
    (26) fxn_declaration -> VAR identifier . LPAREN empty RPAREN

    LPAREN          shift and go to state 135


state 71

    (88) add_expression -> add_expression SUB_OP . mult_expression
    (89) mult_expression -> . unary_expression
    (90) mult_expression -> . mult_expression MULT_OP unary_expression
    (91) mult_expression -> . mult_expression DIV_OP unary_expression
    (92) mult_expression -> . mult_expression MOD_OP unary_expression
    (93) unary_expression -> . postfix_expression
    (94) unary_expression -> . INC unary_expression
    (95) unary_expression -> . DEC unary_expression
    (96) unary_expression -> . SUB_OP add_expression
    (97) unary_expression -> . NOT logical_or_expression
    (98) postfix_expression -> . primary_expression
    (99) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (100) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (101) postfix_expression -> . postfix_expression LPAREN RPAREN
    (102) postfix_expression -> . postfix_expression INC
    (103) postfix_expression -> . postfix_expression DEC
    (104) primary_expression -> . identifier
    (105) primary_expression -> . constant
    (106) primary_expression -> . LPAREN expression RPAREN
    (109) identifier -> . FLOAT_ID
    (110) identifier -> . INT_ID
    (111) identifier -> . CHAR_ID
    (112) identifier -> . STR_ID
    (113) identifier -> . VOID_ID
    (114) constant -> . FLOAT_LIT
    (115) constant -> . INT_LIT
    (116) constant -> . CHAR_LIT
    (117) constant -> . STR_LIT

    INC             shift and go to state 36
    DEC             shift and go to state 7
    SUB_OP          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 2
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 30
    CHAR_ID         shift and go to state 13
    STR_ID          shift and go to state 19
    VOID_ID         shift and go to state 23
    FLOAT_LIT       shift and go to state 31
    INT_LIT         shift and go to state 33
    CHAR_LIT        shift and go to state 12
    STR_LIT         shift and go to state 9

    constant                       shift and go to state 1
    unary_expression               shift and go to state 75
    postfix_expression             shift and go to state 15
    primary_expression             shift and go to state 26
    mult_expression                shift and go to state 136
    identifier                     shift and go to state 35

state 72

    (87) add_expression -> add_expression ADD_OP . mult_expression
    (89) mult_expression -> . unary_expression
    (90) mult_expression -> . mult_expression MULT_OP unary_expression
    (91) mult_expression -> . mult_expression DIV_OP unary_expression
    (92) mult_expression -> . mult_expression MOD_OP unary_expression
    (93) unary_expression -> . postfix_expression
    (94) unary_expression -> . INC unary_expression
    (95) unary_expression -> . DEC unary_expression
    (96) unary_expression -> . SUB_OP add_expression
    (97) unary_expression -> . NOT logical_or_expression
    (98) postfix_expression -> . primary_expression
    (99) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (100) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (101) postfix_expression -> . postfix_expression LPAREN RPAREN
    (102) postfix_expression -> . postfix_expression INC
    (103) postfix_expression -> . postfix_expression DEC
    (104) primary_expression -> . identifier
    (105) primary_expression -> . constant
    (106) primary_expression -> . LPAREN expression RPAREN
    (109) identifier -> . FLOAT_ID
    (110) identifier -> . INT_ID
    (111) identifier -> . CHAR_ID
    (112) identifier -> . STR_ID
    (113) identifier -> . VOID_ID
    (114) constant -> . FLOAT_LIT
    (115) constant -> . INT_LIT
    (116) constant -> . CHAR_LIT
    (117) constant -> . STR_LIT

    INC             shift and go to state 36
    DEC             shift and go to state 7
    SUB_OP          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 2
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 30
    CHAR_ID         shift and go to state 13
    STR_ID          shift and go to state 19
    VOID_ID         shift and go to state 23
    FLOAT_LIT       shift and go to state 31
    INT_LIT         shift and go to state 33
    CHAR_LIT        shift and go to state 12
    STR_LIT         shift and go to state 9

    constant                       shift and go to state 1
    unary_expression               shift and go to state 75
    postfix_expression             shift and go to state 15
    primary_expression             shift and go to state 26
    mult_expression                shift and go to state 137
    identifier                     shift and go to state 35

state 73

    (79) equality_expression -> equality_expression EQ . relational_expression
    (81) relational_expression -> . add_expression
    (82) relational_expression -> . relational_expression LT add_expression
    (83) relational_expression -> . relational_expression GT add_expression
    (84) relational_expression -> . relational_expression LE add_expression
    (85) relational_expression -> . relational_expression GE add_expression
    (86) add_expression -> . mult_expression
    (87) add_expression -> . add_expression ADD_OP mult_expression
    (88) add_expression -> . add_expression SUB_OP mult_expression
    (89) mult_expression -> . unary_expression
    (90) mult_expression -> . mult_expression MULT_OP unary_expression
    (91) mult_expression -> . mult_expression DIV_OP unary_expression
    (92) mult_expression -> . mult_expression MOD_OP unary_expression
    (93) unary_expression -> . postfix_expression
    (94) unary_expression -> . INC unary_expression
    (95) unary_expression -> . DEC unary_expression
    (96) unary_expression -> . SUB_OP add_expression
    (97) unary_expression -> . NOT logical_or_expression
    (98) postfix_expression -> . primary_expression
    (99) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (100) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (101) postfix_expression -> . postfix_expression LPAREN RPAREN
    (102) postfix_expression -> . postfix_expression INC
    (103) postfix_expression -> . postfix_expression DEC
    (104) primary_expression -> . identifier
    (105) primary_expression -> . constant
    (106) primary_expression -> . LPAREN expression RPAREN
    (109) identifier -> . FLOAT_ID
    (110) identifier -> . INT_ID
    (111) identifier -> . CHAR_ID
    (112) identifier -> . STR_ID
    (113) identifier -> . VOID_ID
    (114) constant -> . FLOAT_LIT
    (115) constant -> . INT_LIT
    (116) constant -> . CHAR_LIT
    (117) constant -> . STR_LIT

    INC             shift and go to state 36
    DEC             shift and go to state 7
    SUB_OP          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 2
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 30
    CHAR_ID         shift and go to state 13
    STR_ID          shift and go to state 19
    VOID_ID         shift and go to state 23
    FLOAT_LIT       shift and go to state 31
    INT_LIT         shift and go to state 33
    CHAR_LIT        shift and go to state 12
    STR_LIT         shift and go to state 9

    constant                       shift and go to state 1
    unary_expression               shift and go to state 75
    postfix_expression             shift and go to state 15
    relational_expression          shift and go to state 138
    mult_expression                shift and go to state 25
    identifier                     shift and go to state 35
    add_expression                 shift and go to state 28
    primary_expression             shift and go to state 26

state 74

    (80) equality_expression -> equality_expression NEQ . relational_expression
    (81) relational_expression -> . add_expression
    (82) relational_expression -> . relational_expression LT add_expression
    (83) relational_expression -> . relational_expression GT add_expression
    (84) relational_expression -> . relational_expression LE add_expression
    (85) relational_expression -> . relational_expression GE add_expression
    (86) add_expression -> . mult_expression
    (87) add_expression -> . add_expression ADD_OP mult_expression
    (88) add_expression -> . add_expression SUB_OP mult_expression
    (89) mult_expression -> . unary_expression
    (90) mult_expression -> . mult_expression MULT_OP unary_expression
    (91) mult_expression -> . mult_expression DIV_OP unary_expression
    (92) mult_expression -> . mult_expression MOD_OP unary_expression
    (93) unary_expression -> . postfix_expression
    (94) unary_expression -> . INC unary_expression
    (95) unary_expression -> . DEC unary_expression
    (96) unary_expression -> . SUB_OP add_expression
    (97) unary_expression -> . NOT logical_or_expression
    (98) postfix_expression -> . primary_expression
    (99) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (100) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (101) postfix_expression -> . postfix_expression LPAREN RPAREN
    (102) postfix_expression -> . postfix_expression INC
    (103) postfix_expression -> . postfix_expression DEC
    (104) primary_expression -> . identifier
    (105) primary_expression -> . constant
    (106) primary_expression -> . LPAREN expression RPAREN
    (109) identifier -> . FLOAT_ID
    (110) identifier -> . INT_ID
    (111) identifier -> . CHAR_ID
    (112) identifier -> . STR_ID
    (113) identifier -> . VOID_ID
    (114) constant -> . FLOAT_LIT
    (115) constant -> . INT_LIT
    (116) constant -> . CHAR_LIT
    (117) constant -> . STR_LIT

    INC             shift and go to state 36
    DEC             shift and go to state 7
    SUB_OP          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 2
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 30
    CHAR_ID         shift and go to state 13
    STR_ID          shift and go to state 19
    VOID_ID         shift and go to state 23
    FLOAT_LIT       shift and go to state 31
    INT_LIT         shift and go to state 33
    CHAR_LIT        shift and go to state 12
    STR_LIT         shift and go to state 9

    constant                       shift and go to state 1
    unary_expression               shift and go to state 75
    postfix_expression             shift and go to state 15
    relational_expression          shift and go to state 139
    mult_expression                shift and go to state 25
    identifier                     shift and go to state 35
    add_expression                 shift and go to state 28
    primary_expression             shift and go to state 26

state 75

    (89) mult_expression -> unary_expression .

    ASSIGN_OP       reduce using rule 89 (mult_expression -> unary_expression .)
    ADD_ASSIGN      reduce using rule 89 (mult_expression -> unary_expression .)
    MIN_ASSIGN      reduce using rule 89 (mult_expression -> unary_expression .)
    MUL_ASSIGN      reduce using rule 89 (mult_expression -> unary_expression .)
    DIV_ASSIGN      reduce using rule 89 (mult_expression -> unary_expression .)
    MOD_ASSIGN      reduce using rule 89 (mult_expression -> unary_expression .)
    MULT_OP         reduce using rule 89 (mult_expression -> unary_expression .)
    DIV_OP          reduce using rule 89 (mult_expression -> unary_expression .)
    MOD_OP          reduce using rule 89 (mult_expression -> unary_expression .)
    ADD_OP          reduce using rule 89 (mult_expression -> unary_expression .)
    SUB_OP          reduce using rule 89 (mult_expression -> unary_expression .)
    LT              reduce using rule 89 (mult_expression -> unary_expression .)
    GT              reduce using rule 89 (mult_expression -> unary_expression .)
    LE              reduce using rule 89 (mult_expression -> unary_expression .)
    GE              reduce using rule 89 (mult_expression -> unary_expression .)
    EQ              reduce using rule 89 (mult_expression -> unary_expression .)
    NEQ             reduce using rule 89 (mult_expression -> unary_expression .)
    OR              reduce using rule 89 (mult_expression -> unary_expression .)
    AND             reduce using rule 89 (mult_expression -> unary_expression .)
    SCAN            reduce using rule 89 (mult_expression -> unary_expression .)
    INC             reduce using rule 89 (mult_expression -> unary_expression .)
    DEC             reduce using rule 89 (mult_expression -> unary_expression .)
    NOT             reduce using rule 89 (mult_expression -> unary_expression .)
    VAR             reduce using rule 89 (mult_expression -> unary_expression .)
    LPAREN          reduce using rule 89 (mult_expression -> unary_expression .)
    FLOAT_ID        reduce using rule 89 (mult_expression -> unary_expression .)
    INT_ID          reduce using rule 89 (mult_expression -> unary_expression .)
    CHAR_ID         reduce using rule 89 (mult_expression -> unary_expression .)
    STR_ID          reduce using rule 89 (mult_expression -> unary_expression .)
    VOID_ID         reduce using rule 89 (mult_expression -> unary_expression .)
    FLOAT_LIT       reduce using rule 89 (mult_expression -> unary_expression .)
    INT_LIT         reduce using rule 89 (mult_expression -> unary_expression .)
    CHAR_LIT        reduce using rule 89 (mult_expression -> unary_expression .)
    STR_LIT         reduce using rule 89 (mult_expression -> unary_expression .)
    MAIN            reduce using rule 89 (mult_expression -> unary_expression .)
    RPAREN          reduce using rule 89 (mult_expression -> unary_expression .)
    COMMA           reduce using rule 89 (mult_expression -> unary_expression .)
    $end            reduce using rule 89 (mult_expression -> unary_expression .)
    SEMI            reduce using rule 89 (mult_expression -> unary_expression .)
    RBRACKET        reduce using rule 89 (mult_expression -> unary_expression .)
    RBRACE          reduce using rule 89 (mult_expression -> unary_expression .)
    COLON           reduce using rule 89 (mult_expression -> unary_expression .)


state 76

    (96) unary_expression -> SUB_OP add_expression .
    (87) add_expression -> add_expression . ADD_OP mult_expression
    (88) add_expression -> add_expression . SUB_OP mult_expression

  ! shift/reduce conflict for ADD_OP resolved as shift
  ! shift/reduce conflict for SUB_OP resolved as shift
    ASSIGN_OP       reduce using rule 96 (unary_expression -> SUB_OP add_expression .)
    ADD_ASSIGN      reduce using rule 96 (unary_expression -> SUB_OP add_expression .)
    MIN_ASSIGN      reduce using rule 96 (unary_expression -> SUB_OP add_expression .)
    MUL_ASSIGN      reduce using rule 96 (unary_expression -> SUB_OP add_expression .)
    DIV_ASSIGN      reduce using rule 96 (unary_expression -> SUB_OP add_expression .)
    MOD_ASSIGN      reduce using rule 96 (unary_expression -> SUB_OP add_expression .)
    MULT_OP         reduce using rule 96 (unary_expression -> SUB_OP add_expression .)
    DIV_OP          reduce using rule 96 (unary_expression -> SUB_OP add_expression .)
    MOD_OP          reduce using rule 96 (unary_expression -> SUB_OP add_expression .)
    LT              reduce using rule 96 (unary_expression -> SUB_OP add_expression .)
    GT              reduce using rule 96 (unary_expression -> SUB_OP add_expression .)
    LE              reduce using rule 96 (unary_expression -> SUB_OP add_expression .)
    GE              reduce using rule 96 (unary_expression -> SUB_OP add_expression .)
    EQ              reduce using rule 96 (unary_expression -> SUB_OP add_expression .)
    NEQ             reduce using rule 96 (unary_expression -> SUB_OP add_expression .)
    OR              reduce using rule 96 (unary_expression -> SUB_OP add_expression .)
    AND             reduce using rule 96 (unary_expression -> SUB_OP add_expression .)
    SCAN            reduce using rule 96 (unary_expression -> SUB_OP add_expression .)
    INC             reduce using rule 96 (unary_expression -> SUB_OP add_expression .)
    DEC             reduce using rule 96 (unary_expression -> SUB_OP add_expression .)
    NOT             reduce using rule 96 (unary_expression -> SUB_OP add_expression .)
    VAR             reduce using rule 96 (unary_expression -> SUB_OP add_expression .)
    LPAREN          reduce using rule 96 (unary_expression -> SUB_OP add_expression .)
    FLOAT_ID        reduce using rule 96 (unary_expression -> SUB_OP add_expression .)
    INT_ID          reduce using rule 96 (unary_expression -> SUB_OP add_expression .)
    CHAR_ID         reduce using rule 96 (unary_expression -> SUB_OP add_expression .)
    STR_ID          reduce using rule 96 (unary_expression -> SUB_OP add_expression .)
    VOID_ID         reduce using rule 96 (unary_expression -> SUB_OP add_expression .)
    FLOAT_LIT       reduce using rule 96 (unary_expression -> SUB_OP add_expression .)
    INT_LIT         reduce using rule 96 (unary_expression -> SUB_OP add_expression .)
    CHAR_LIT        reduce using rule 96 (unary_expression -> SUB_OP add_expression .)
    STR_LIT         reduce using rule 96 (unary_expression -> SUB_OP add_expression .)
    MAIN            reduce using rule 96 (unary_expression -> SUB_OP add_expression .)
    RPAREN          reduce using rule 96 (unary_expression -> SUB_OP add_expression .)
    COMMA           reduce using rule 96 (unary_expression -> SUB_OP add_expression .)
    $end            reduce using rule 96 (unary_expression -> SUB_OP add_expression .)
    SEMI            reduce using rule 96 (unary_expression -> SUB_OP add_expression .)
    RBRACKET        reduce using rule 96 (unary_expression -> SUB_OP add_expression .)
    RBRACE          reduce using rule 96 (unary_expression -> SUB_OP add_expression .)
    COLON           reduce using rule 96 (unary_expression -> SUB_OP add_expression .)
    ADD_OP          shift and go to state 72
    SUB_OP          shift and go to state 71

  ! ADD_OP          [ reduce using rule 96 (unary_expression -> SUB_OP add_expression .) ]
  ! SUB_OP          [ reduce using rule 96 (unary_expression -> SUB_OP add_expression .) ]


state 77

    (97) unary_expression -> NOT logical_or_expression .

    ASSIGN_OP       reduce using rule 97 (unary_expression -> NOT logical_or_expression .)
    ADD_ASSIGN      reduce using rule 97 (unary_expression -> NOT logical_or_expression .)
    MIN_ASSIGN      reduce using rule 97 (unary_expression -> NOT logical_or_expression .)
    MUL_ASSIGN      reduce using rule 97 (unary_expression -> NOT logical_or_expression .)
    DIV_ASSIGN      reduce using rule 97 (unary_expression -> NOT logical_or_expression .)
    MOD_ASSIGN      reduce using rule 97 (unary_expression -> NOT logical_or_expression .)
    MULT_OP         reduce using rule 97 (unary_expression -> NOT logical_or_expression .)
    DIV_OP          reduce using rule 97 (unary_expression -> NOT logical_or_expression .)
    MOD_OP          reduce using rule 97 (unary_expression -> NOT logical_or_expression .)
    ADD_OP          reduce using rule 97 (unary_expression -> NOT logical_or_expression .)
    SUB_OP          reduce using rule 97 (unary_expression -> NOT logical_or_expression .)
    LT              reduce using rule 97 (unary_expression -> NOT logical_or_expression .)
    GT              reduce using rule 97 (unary_expression -> NOT logical_or_expression .)
    LE              reduce using rule 97 (unary_expression -> NOT logical_or_expression .)
    GE              reduce using rule 97 (unary_expression -> NOT logical_or_expression .)
    EQ              reduce using rule 97 (unary_expression -> NOT logical_or_expression .)
    NEQ             reduce using rule 97 (unary_expression -> NOT logical_or_expression .)
    OR              reduce using rule 97 (unary_expression -> NOT logical_or_expression .)
    AND             reduce using rule 97 (unary_expression -> NOT logical_or_expression .)
    SCAN            reduce using rule 97 (unary_expression -> NOT logical_or_expression .)
    INC             reduce using rule 97 (unary_expression -> NOT logical_or_expression .)
    DEC             reduce using rule 97 (unary_expression -> NOT logical_or_expression .)
    NOT             reduce using rule 97 (unary_expression -> NOT logical_or_expression .)
    VAR             reduce using rule 97 (unary_expression -> NOT logical_or_expression .)
    LPAREN          reduce using rule 97 (unary_expression -> NOT logical_or_expression .)
    FLOAT_ID        reduce using rule 97 (unary_expression -> NOT logical_or_expression .)
    INT_ID          reduce using rule 97 (unary_expression -> NOT logical_or_expression .)
    CHAR_ID         reduce using rule 97 (unary_expression -> NOT logical_or_expression .)
    STR_ID          reduce using rule 97 (unary_expression -> NOT logical_or_expression .)
    VOID_ID         reduce using rule 97 (unary_expression -> NOT logical_or_expression .)
    FLOAT_LIT       reduce using rule 97 (unary_expression -> NOT logical_or_expression .)
    INT_LIT         reduce using rule 97 (unary_expression -> NOT logical_or_expression .)
    CHAR_LIT        reduce using rule 97 (unary_expression -> NOT logical_or_expression .)
    STR_LIT         reduce using rule 97 (unary_expression -> NOT logical_or_expression .)
    MAIN            reduce using rule 97 (unary_expression -> NOT logical_or_expression .)
    RPAREN          reduce using rule 97 (unary_expression -> NOT logical_or_expression .)
    COMMA           reduce using rule 97 (unary_expression -> NOT logical_or_expression .)
    $end            reduce using rule 97 (unary_expression -> NOT logical_or_expression .)
    SEMI            reduce using rule 97 (unary_expression -> NOT logical_or_expression .)
    RBRACKET        reduce using rule 97 (unary_expression -> NOT logical_or_expression .)
    RBRACE          reduce using rule 97 (unary_expression -> NOT logical_or_expression .)
    COLON           reduce using rule 97 (unary_expression -> NOT logical_or_expression .)


state 78

    (94) unary_expression -> INC unary_expression .

    ASSIGN_OP       reduce using rule 94 (unary_expression -> INC unary_expression .)
    ADD_ASSIGN      reduce using rule 94 (unary_expression -> INC unary_expression .)
    MIN_ASSIGN      reduce using rule 94 (unary_expression -> INC unary_expression .)
    MUL_ASSIGN      reduce using rule 94 (unary_expression -> INC unary_expression .)
    DIV_ASSIGN      reduce using rule 94 (unary_expression -> INC unary_expression .)
    MOD_ASSIGN      reduce using rule 94 (unary_expression -> INC unary_expression .)
    MULT_OP         reduce using rule 94 (unary_expression -> INC unary_expression .)
    DIV_OP          reduce using rule 94 (unary_expression -> INC unary_expression .)
    MOD_OP          reduce using rule 94 (unary_expression -> INC unary_expression .)
    ADD_OP          reduce using rule 94 (unary_expression -> INC unary_expression .)
    SUB_OP          reduce using rule 94 (unary_expression -> INC unary_expression .)
    LT              reduce using rule 94 (unary_expression -> INC unary_expression .)
    GT              reduce using rule 94 (unary_expression -> INC unary_expression .)
    LE              reduce using rule 94 (unary_expression -> INC unary_expression .)
    GE              reduce using rule 94 (unary_expression -> INC unary_expression .)
    EQ              reduce using rule 94 (unary_expression -> INC unary_expression .)
    NEQ             reduce using rule 94 (unary_expression -> INC unary_expression .)
    OR              reduce using rule 94 (unary_expression -> INC unary_expression .)
    AND             reduce using rule 94 (unary_expression -> INC unary_expression .)
    SCAN            reduce using rule 94 (unary_expression -> INC unary_expression .)
    INC             reduce using rule 94 (unary_expression -> INC unary_expression .)
    DEC             reduce using rule 94 (unary_expression -> INC unary_expression .)
    NOT             reduce using rule 94 (unary_expression -> INC unary_expression .)
    VAR             reduce using rule 94 (unary_expression -> INC unary_expression .)
    LPAREN          reduce using rule 94 (unary_expression -> INC unary_expression .)
    FLOAT_ID        reduce using rule 94 (unary_expression -> INC unary_expression .)
    INT_ID          reduce using rule 94 (unary_expression -> INC unary_expression .)
    CHAR_ID         reduce using rule 94 (unary_expression -> INC unary_expression .)
    STR_ID          reduce using rule 94 (unary_expression -> INC unary_expression .)
    VOID_ID         reduce using rule 94 (unary_expression -> INC unary_expression .)
    FLOAT_LIT       reduce using rule 94 (unary_expression -> INC unary_expression .)
    INT_LIT         reduce using rule 94 (unary_expression -> INC unary_expression .)
    CHAR_LIT        reduce using rule 94 (unary_expression -> INC unary_expression .)
    STR_LIT         reduce using rule 94 (unary_expression -> INC unary_expression .)
    MAIN            reduce using rule 94 (unary_expression -> INC unary_expression .)
    RPAREN          reduce using rule 94 (unary_expression -> INC unary_expression .)
    COMMA           reduce using rule 94 (unary_expression -> INC unary_expression .)
    $end            reduce using rule 94 (unary_expression -> INC unary_expression .)
    SEMI            reduce using rule 94 (unary_expression -> INC unary_expression .)
    RBRACKET        reduce using rule 94 (unary_expression -> INC unary_expression .)
    RBRACE          reduce using rule 94 (unary_expression -> INC unary_expression .)
    COLON           reduce using rule 94 (unary_expression -> INC unary_expression .)


state 79

    (60) print_expression -> PRINT LPAREN . scan_expression RPAREN
    (69) scan_expression -> . logical_or_expression
    (70) scan_expression -> . SCAN LPAREN RPAREN
    (74) logical_or_expression -> . logical_and_expression
    (75) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (76) logical_and_expression -> . equality_expression
    (77) logical_and_expression -> . logical_and_expression AND equality_expression
    (78) equality_expression -> . relational_expression
    (79) equality_expression -> . equality_expression EQ relational_expression
    (80) equality_expression -> . equality_expression NEQ relational_expression
    (81) relational_expression -> . add_expression
    (82) relational_expression -> . relational_expression LT add_expression
    (83) relational_expression -> . relational_expression GT add_expression
    (84) relational_expression -> . relational_expression LE add_expression
    (85) relational_expression -> . relational_expression GE add_expression
    (86) add_expression -> . mult_expression
    (87) add_expression -> . add_expression ADD_OP mult_expression
    (88) add_expression -> . add_expression SUB_OP mult_expression
    (89) mult_expression -> . unary_expression
    (90) mult_expression -> . mult_expression MULT_OP unary_expression
    (91) mult_expression -> . mult_expression DIV_OP unary_expression
    (92) mult_expression -> . mult_expression MOD_OP unary_expression
    (93) unary_expression -> . postfix_expression
    (94) unary_expression -> . INC unary_expression
    (95) unary_expression -> . DEC unary_expression
    (96) unary_expression -> . SUB_OP add_expression
    (97) unary_expression -> . NOT logical_or_expression
    (98) postfix_expression -> . primary_expression
    (99) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (100) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (101) postfix_expression -> . postfix_expression LPAREN RPAREN
    (102) postfix_expression -> . postfix_expression INC
    (103) postfix_expression -> . postfix_expression DEC
    (104) primary_expression -> . identifier
    (105) primary_expression -> . constant
    (106) primary_expression -> . LPAREN expression RPAREN
    (109) identifier -> . FLOAT_ID
    (110) identifier -> . INT_ID
    (111) identifier -> . CHAR_ID
    (112) identifier -> . STR_ID
    (113) identifier -> . VOID_ID
    (114) constant -> . FLOAT_LIT
    (115) constant -> . INT_LIT
    (116) constant -> . CHAR_LIT
    (117) constant -> . STR_LIT

    SCAN            shift and go to state 4
    INC             shift and go to state 36
    DEC             shift and go to state 7
    SUB_OP          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 2
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 30
    CHAR_ID         shift and go to state 13
    STR_ID          shift and go to state 19
    VOID_ID         shift and go to state 23
    FLOAT_LIT       shift and go to state 31
    INT_LIT         shift and go to state 33
    CHAR_LIT        shift and go to state 12
    STR_LIT         shift and go to state 9

    constant                       shift and go to state 1
    unary_expression               shift and go to state 75
    postfix_expression             shift and go to state 15
    relational_expression          shift and go to state 17
    primary_expression             shift and go to state 26
    mult_expression                shift and go to state 25
    logical_and_expression         shift and go to state 8
    identifier                     shift and go to state 35
    add_expression                 shift and go to state 28
    logical_or_expression          shift and go to state 21
    equality_expression            shift and go to state 29
    scan_expression                shift and go to state 140

state 80

    (61) print_expression -> PRINTLN LPAREN . scan_expression RPAREN
    (69) scan_expression -> . logical_or_expression
    (70) scan_expression -> . SCAN LPAREN RPAREN
    (74) logical_or_expression -> . logical_and_expression
    (75) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (76) logical_and_expression -> . equality_expression
    (77) logical_and_expression -> . logical_and_expression AND equality_expression
    (78) equality_expression -> . relational_expression
    (79) equality_expression -> . equality_expression EQ relational_expression
    (80) equality_expression -> . equality_expression NEQ relational_expression
    (81) relational_expression -> . add_expression
    (82) relational_expression -> . relational_expression LT add_expression
    (83) relational_expression -> . relational_expression GT add_expression
    (84) relational_expression -> . relational_expression LE add_expression
    (85) relational_expression -> . relational_expression GE add_expression
    (86) add_expression -> . mult_expression
    (87) add_expression -> . add_expression ADD_OP mult_expression
    (88) add_expression -> . add_expression SUB_OP mult_expression
    (89) mult_expression -> . unary_expression
    (90) mult_expression -> . mult_expression MULT_OP unary_expression
    (91) mult_expression -> . mult_expression DIV_OP unary_expression
    (92) mult_expression -> . mult_expression MOD_OP unary_expression
    (93) unary_expression -> . postfix_expression
    (94) unary_expression -> . INC unary_expression
    (95) unary_expression -> . DEC unary_expression
    (96) unary_expression -> . SUB_OP add_expression
    (97) unary_expression -> . NOT logical_or_expression
    (98) postfix_expression -> . primary_expression
    (99) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (100) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (101) postfix_expression -> . postfix_expression LPAREN RPAREN
    (102) postfix_expression -> . postfix_expression INC
    (103) postfix_expression -> . postfix_expression DEC
    (104) primary_expression -> . identifier
    (105) primary_expression -> . constant
    (106) primary_expression -> . LPAREN expression RPAREN
    (109) identifier -> . FLOAT_ID
    (110) identifier -> . INT_ID
    (111) identifier -> . CHAR_ID
    (112) identifier -> . STR_ID
    (113) identifier -> . VOID_ID
    (114) constant -> . FLOAT_LIT
    (115) constant -> . INT_LIT
    (116) constant -> . CHAR_LIT
    (117) constant -> . STR_LIT

    SCAN            shift and go to state 4
    INC             shift and go to state 36
    DEC             shift and go to state 7
    SUB_OP          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 2
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 30
    CHAR_ID         shift and go to state 13
    STR_ID          shift and go to state 19
    VOID_ID         shift and go to state 23
    FLOAT_LIT       shift and go to state 31
    INT_LIT         shift and go to state 33
    CHAR_LIT        shift and go to state 12
    STR_LIT         shift and go to state 9

    constant                       shift and go to state 1
    unary_expression               shift and go to state 75
    postfix_expression             shift and go to state 15
    relational_expression          shift and go to state 17
    primary_expression             shift and go to state 26
    mult_expression                shift and go to state 25
    logical_and_expression         shift and go to state 8
    identifier                     shift and go to state 35
    add_expression                 shift and go to state 28
    logical_or_expression          shift and go to state 21
    equality_expression            shift and go to state 29
    scan_expression                shift and go to state 141

state 81

    (106) primary_expression -> LPAREN expression RPAREN .

    LBRACKET        reduce using rule 106 (primary_expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 106 (primary_expression -> LPAREN expression RPAREN .)
    INC             reduce using rule 106 (primary_expression -> LPAREN expression RPAREN .)
    DEC             reduce using rule 106 (primary_expression -> LPAREN expression RPAREN .)
    ASSIGN_OP       reduce using rule 106 (primary_expression -> LPAREN expression RPAREN .)
    ADD_ASSIGN      reduce using rule 106 (primary_expression -> LPAREN expression RPAREN .)
    MIN_ASSIGN      reduce using rule 106 (primary_expression -> LPAREN expression RPAREN .)
    MUL_ASSIGN      reduce using rule 106 (primary_expression -> LPAREN expression RPAREN .)
    DIV_ASSIGN      reduce using rule 106 (primary_expression -> LPAREN expression RPAREN .)
    MOD_ASSIGN      reduce using rule 106 (primary_expression -> LPAREN expression RPAREN .)
    MULT_OP         reduce using rule 106 (primary_expression -> LPAREN expression RPAREN .)
    DIV_OP          reduce using rule 106 (primary_expression -> LPAREN expression RPAREN .)
    MOD_OP          reduce using rule 106 (primary_expression -> LPAREN expression RPAREN .)
    ADD_OP          reduce using rule 106 (primary_expression -> LPAREN expression RPAREN .)
    SUB_OP          reduce using rule 106 (primary_expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 106 (primary_expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 106 (primary_expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 106 (primary_expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 106 (primary_expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 106 (primary_expression -> LPAREN expression RPAREN .)
    NEQ             reduce using rule 106 (primary_expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 106 (primary_expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 106 (primary_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 106 (primary_expression -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 106 (primary_expression -> LPAREN expression RPAREN .)
    SCAN            reduce using rule 106 (primary_expression -> LPAREN expression RPAREN .)
    NOT             reduce using rule 106 (primary_expression -> LPAREN expression RPAREN .)
    VAR             reduce using rule 106 (primary_expression -> LPAREN expression RPAREN .)
    FLOAT_ID        reduce using rule 106 (primary_expression -> LPAREN expression RPAREN .)
    INT_ID          reduce using rule 106 (primary_expression -> LPAREN expression RPAREN .)
    CHAR_ID         reduce using rule 106 (primary_expression -> LPAREN expression RPAREN .)
    STR_ID          reduce using rule 106 (primary_expression -> LPAREN expression RPAREN .)
    VOID_ID         reduce using rule 106 (primary_expression -> LPAREN expression RPAREN .)
    FLOAT_LIT       reduce using rule 106 (primary_expression -> LPAREN expression RPAREN .)
    INT_LIT         reduce using rule 106 (primary_expression -> LPAREN expression RPAREN .)
    CHAR_LIT        reduce using rule 106 (primary_expression -> LPAREN expression RPAREN .)
    STR_LIT         reduce using rule 106 (primary_expression -> LPAREN expression RPAREN .)
    MAIN            reduce using rule 106 (primary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 106 (primary_expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 106 (primary_expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 106 (primary_expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 106 (primary_expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 106 (primary_expression -> LPAREN expression RPAREN .)


state 82

    (58) expression -> expression COMMA . print_expression
    (59) print_expression -> . assignment_expression
    (60) print_expression -> . PRINT LPAREN scan_expression RPAREN
    (61) print_expression -> . PRINTLN LPAREN scan_expression RPAREN
    (62) assignment_expression -> . scan_expression
    (63) assignment_expression -> . unary_expression ASSIGN_OP assignment_expression
    (64) assignment_expression -> . unary_expression ADD_ASSIGN assignment_expression
    (65) assignment_expression -> . unary_expression MIN_ASSIGN assignment_expression
    (66) assignment_expression -> . unary_expression MUL_ASSIGN assignment_expression
    (67) assignment_expression -> . unary_expression DIV_ASSIGN assignment_expression
    (68) assignment_expression -> . unary_expression MOD_ASSIGN assignment_expression
    (69) scan_expression -> . logical_or_expression
    (70) scan_expression -> . SCAN LPAREN RPAREN
    (93) unary_expression -> . postfix_expression
    (94) unary_expression -> . INC unary_expression
    (95) unary_expression -> . DEC unary_expression
    (96) unary_expression -> . SUB_OP add_expression
    (97) unary_expression -> . NOT logical_or_expression
    (74) logical_or_expression -> . logical_and_expression
    (75) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (98) postfix_expression -> . primary_expression
    (99) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (100) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (101) postfix_expression -> . postfix_expression LPAREN RPAREN
    (102) postfix_expression -> . postfix_expression INC
    (103) postfix_expression -> . postfix_expression DEC
    (76) logical_and_expression -> . equality_expression
    (77) logical_and_expression -> . logical_and_expression AND equality_expression
    (104) primary_expression -> . identifier
    (105) primary_expression -> . constant
    (106) primary_expression -> . LPAREN expression RPAREN
    (78) equality_expression -> . relational_expression
    (79) equality_expression -> . equality_expression EQ relational_expression
    (80) equality_expression -> . equality_expression NEQ relational_expression
    (109) identifier -> . FLOAT_ID
    (110) identifier -> . INT_ID
    (111) identifier -> . CHAR_ID
    (112) identifier -> . STR_ID
    (113) identifier -> . VOID_ID
    (114) constant -> . FLOAT_LIT
    (115) constant -> . INT_LIT
    (116) constant -> . CHAR_LIT
    (117) constant -> . STR_LIT
    (81) relational_expression -> . add_expression
    (82) relational_expression -> . relational_expression LT add_expression
    (83) relational_expression -> . relational_expression GT add_expression
    (84) relational_expression -> . relational_expression LE add_expression
    (85) relational_expression -> . relational_expression GE add_expression
    (86) add_expression -> . mult_expression
    (87) add_expression -> . add_expression ADD_OP mult_expression
    (88) add_expression -> . add_expression SUB_OP mult_expression
    (89) mult_expression -> . unary_expression
    (90) mult_expression -> . mult_expression MULT_OP unary_expression
    (91) mult_expression -> . mult_expression DIV_OP unary_expression
    (92) mult_expression -> . mult_expression MOD_OP unary_expression

    PRINT           shift and go to state 37
    PRINTLN         shift and go to state 38
    SCAN            shift and go to state 4
    INC             shift and go to state 36
    DEC             shift and go to state 7
    SUB_OP          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 2
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 30
    CHAR_ID         shift and go to state 13
    STR_ID          shift and go to state 19
    VOID_ID         shift and go to state 23
    FLOAT_LIT       shift and go to state 31
    INT_LIT         shift and go to state 33
    CHAR_LIT        shift and go to state 12
    STR_LIT         shift and go to state 9

    constant                       shift and go to state 1
    assignment_expression          shift and go to state 39
    unary_expression               shift and go to state 3
    relational_expression          shift and go to state 17
    add_expression                 shift and go to state 28
    print_expression               shift and go to state 142
    postfix_expression             shift and go to state 15
    primary_expression             shift and go to state 26
    mult_expression                shift and go to state 25
    logical_and_expression         shift and go to state 8
    identifier                     shift and go to state 35
    logical_or_expression          shift and go to state 21
    equality_expression            shift and go to state 29
    scan_expression                shift and go to state 10

state 83

    (68) assignment_expression -> unary_expression MOD_ASSIGN assignment_expression .

    COMMA           reduce using rule 68 (assignment_expression -> unary_expression MOD_ASSIGN assignment_expression .)
    SEMI            reduce using rule 68 (assignment_expression -> unary_expression MOD_ASSIGN assignment_expression .)
    SCAN            reduce using rule 68 (assignment_expression -> unary_expression MOD_ASSIGN assignment_expression .)
    INC             reduce using rule 68 (assignment_expression -> unary_expression MOD_ASSIGN assignment_expression .)
    DEC             reduce using rule 68 (assignment_expression -> unary_expression MOD_ASSIGN assignment_expression .)
    SUB_OP          reduce using rule 68 (assignment_expression -> unary_expression MOD_ASSIGN assignment_expression .)
    NOT             reduce using rule 68 (assignment_expression -> unary_expression MOD_ASSIGN assignment_expression .)
    VAR             reduce using rule 68 (assignment_expression -> unary_expression MOD_ASSIGN assignment_expression .)
    LPAREN          reduce using rule 68 (assignment_expression -> unary_expression MOD_ASSIGN assignment_expression .)
    FLOAT_ID        reduce using rule 68 (assignment_expression -> unary_expression MOD_ASSIGN assignment_expression .)
    INT_ID          reduce using rule 68 (assignment_expression -> unary_expression MOD_ASSIGN assignment_expression .)
    CHAR_ID         reduce using rule 68 (assignment_expression -> unary_expression MOD_ASSIGN assignment_expression .)
    STR_ID          reduce using rule 68 (assignment_expression -> unary_expression MOD_ASSIGN assignment_expression .)
    VOID_ID         reduce using rule 68 (assignment_expression -> unary_expression MOD_ASSIGN assignment_expression .)
    FLOAT_LIT       reduce using rule 68 (assignment_expression -> unary_expression MOD_ASSIGN assignment_expression .)
    INT_LIT         reduce using rule 68 (assignment_expression -> unary_expression MOD_ASSIGN assignment_expression .)
    CHAR_LIT        reduce using rule 68 (assignment_expression -> unary_expression MOD_ASSIGN assignment_expression .)
    STR_LIT         reduce using rule 68 (assignment_expression -> unary_expression MOD_ASSIGN assignment_expression .)
    MAIN            reduce using rule 68 (assignment_expression -> unary_expression MOD_ASSIGN assignment_expression .)
    RPAREN          reduce using rule 68 (assignment_expression -> unary_expression MOD_ASSIGN assignment_expression .)
    $end            reduce using rule 68 (assignment_expression -> unary_expression MOD_ASSIGN assignment_expression .)
    RBRACKET        reduce using rule 68 (assignment_expression -> unary_expression MOD_ASSIGN assignment_expression .)
    RBRACE          reduce using rule 68 (assignment_expression -> unary_expression MOD_ASSIGN assignment_expression .)


state 84

    (66) assignment_expression -> unary_expression MUL_ASSIGN assignment_expression .

    COMMA           reduce using rule 66 (assignment_expression -> unary_expression MUL_ASSIGN assignment_expression .)
    SEMI            reduce using rule 66 (assignment_expression -> unary_expression MUL_ASSIGN assignment_expression .)
    SCAN            reduce using rule 66 (assignment_expression -> unary_expression MUL_ASSIGN assignment_expression .)
    INC             reduce using rule 66 (assignment_expression -> unary_expression MUL_ASSIGN assignment_expression .)
    DEC             reduce using rule 66 (assignment_expression -> unary_expression MUL_ASSIGN assignment_expression .)
    SUB_OP          reduce using rule 66 (assignment_expression -> unary_expression MUL_ASSIGN assignment_expression .)
    NOT             reduce using rule 66 (assignment_expression -> unary_expression MUL_ASSIGN assignment_expression .)
    VAR             reduce using rule 66 (assignment_expression -> unary_expression MUL_ASSIGN assignment_expression .)
    LPAREN          reduce using rule 66 (assignment_expression -> unary_expression MUL_ASSIGN assignment_expression .)
    FLOAT_ID        reduce using rule 66 (assignment_expression -> unary_expression MUL_ASSIGN assignment_expression .)
    INT_ID          reduce using rule 66 (assignment_expression -> unary_expression MUL_ASSIGN assignment_expression .)
    CHAR_ID         reduce using rule 66 (assignment_expression -> unary_expression MUL_ASSIGN assignment_expression .)
    STR_ID          reduce using rule 66 (assignment_expression -> unary_expression MUL_ASSIGN assignment_expression .)
    VOID_ID         reduce using rule 66 (assignment_expression -> unary_expression MUL_ASSIGN assignment_expression .)
    FLOAT_LIT       reduce using rule 66 (assignment_expression -> unary_expression MUL_ASSIGN assignment_expression .)
    INT_LIT         reduce using rule 66 (assignment_expression -> unary_expression MUL_ASSIGN assignment_expression .)
    CHAR_LIT        reduce using rule 66 (assignment_expression -> unary_expression MUL_ASSIGN assignment_expression .)
    STR_LIT         reduce using rule 66 (assignment_expression -> unary_expression MUL_ASSIGN assignment_expression .)
    MAIN            reduce using rule 66 (assignment_expression -> unary_expression MUL_ASSIGN assignment_expression .)
    RPAREN          reduce using rule 66 (assignment_expression -> unary_expression MUL_ASSIGN assignment_expression .)
    $end            reduce using rule 66 (assignment_expression -> unary_expression MUL_ASSIGN assignment_expression .)
    RBRACKET        reduce using rule 66 (assignment_expression -> unary_expression MUL_ASSIGN assignment_expression .)
    RBRACE          reduce using rule 66 (assignment_expression -> unary_expression MUL_ASSIGN assignment_expression .)


state 85

    (67) assignment_expression -> unary_expression DIV_ASSIGN assignment_expression .

    COMMA           reduce using rule 67 (assignment_expression -> unary_expression DIV_ASSIGN assignment_expression .)
    SEMI            reduce using rule 67 (assignment_expression -> unary_expression DIV_ASSIGN assignment_expression .)
    SCAN            reduce using rule 67 (assignment_expression -> unary_expression DIV_ASSIGN assignment_expression .)
    INC             reduce using rule 67 (assignment_expression -> unary_expression DIV_ASSIGN assignment_expression .)
    DEC             reduce using rule 67 (assignment_expression -> unary_expression DIV_ASSIGN assignment_expression .)
    SUB_OP          reduce using rule 67 (assignment_expression -> unary_expression DIV_ASSIGN assignment_expression .)
    NOT             reduce using rule 67 (assignment_expression -> unary_expression DIV_ASSIGN assignment_expression .)
    VAR             reduce using rule 67 (assignment_expression -> unary_expression DIV_ASSIGN assignment_expression .)
    LPAREN          reduce using rule 67 (assignment_expression -> unary_expression DIV_ASSIGN assignment_expression .)
    FLOAT_ID        reduce using rule 67 (assignment_expression -> unary_expression DIV_ASSIGN assignment_expression .)
    INT_ID          reduce using rule 67 (assignment_expression -> unary_expression DIV_ASSIGN assignment_expression .)
    CHAR_ID         reduce using rule 67 (assignment_expression -> unary_expression DIV_ASSIGN assignment_expression .)
    STR_ID          reduce using rule 67 (assignment_expression -> unary_expression DIV_ASSIGN assignment_expression .)
    VOID_ID         reduce using rule 67 (assignment_expression -> unary_expression DIV_ASSIGN assignment_expression .)
    FLOAT_LIT       reduce using rule 67 (assignment_expression -> unary_expression DIV_ASSIGN assignment_expression .)
    INT_LIT         reduce using rule 67 (assignment_expression -> unary_expression DIV_ASSIGN assignment_expression .)
    CHAR_LIT        reduce using rule 67 (assignment_expression -> unary_expression DIV_ASSIGN assignment_expression .)
    STR_LIT         reduce using rule 67 (assignment_expression -> unary_expression DIV_ASSIGN assignment_expression .)
    MAIN            reduce using rule 67 (assignment_expression -> unary_expression DIV_ASSIGN assignment_expression .)
    RPAREN          reduce using rule 67 (assignment_expression -> unary_expression DIV_ASSIGN assignment_expression .)
    $end            reduce using rule 67 (assignment_expression -> unary_expression DIV_ASSIGN assignment_expression .)
    RBRACKET        reduce using rule 67 (assignment_expression -> unary_expression DIV_ASSIGN assignment_expression .)
    RBRACE          reduce using rule 67 (assignment_expression -> unary_expression DIV_ASSIGN assignment_expression .)


state 86

    (63) assignment_expression -> unary_expression ASSIGN_OP assignment_expression .

    COMMA           reduce using rule 63 (assignment_expression -> unary_expression ASSIGN_OP assignment_expression .)
    SEMI            reduce using rule 63 (assignment_expression -> unary_expression ASSIGN_OP assignment_expression .)
    SCAN            reduce using rule 63 (assignment_expression -> unary_expression ASSIGN_OP assignment_expression .)
    INC             reduce using rule 63 (assignment_expression -> unary_expression ASSIGN_OP assignment_expression .)
    DEC             reduce using rule 63 (assignment_expression -> unary_expression ASSIGN_OP assignment_expression .)
    SUB_OP          reduce using rule 63 (assignment_expression -> unary_expression ASSIGN_OP assignment_expression .)
    NOT             reduce using rule 63 (assignment_expression -> unary_expression ASSIGN_OP assignment_expression .)
    VAR             reduce using rule 63 (assignment_expression -> unary_expression ASSIGN_OP assignment_expression .)
    LPAREN          reduce using rule 63 (assignment_expression -> unary_expression ASSIGN_OP assignment_expression .)
    FLOAT_ID        reduce using rule 63 (assignment_expression -> unary_expression ASSIGN_OP assignment_expression .)
    INT_ID          reduce using rule 63 (assignment_expression -> unary_expression ASSIGN_OP assignment_expression .)
    CHAR_ID         reduce using rule 63 (assignment_expression -> unary_expression ASSIGN_OP assignment_expression .)
    STR_ID          reduce using rule 63 (assignment_expression -> unary_expression ASSIGN_OP assignment_expression .)
    VOID_ID         reduce using rule 63 (assignment_expression -> unary_expression ASSIGN_OP assignment_expression .)
    FLOAT_LIT       reduce using rule 63 (assignment_expression -> unary_expression ASSIGN_OP assignment_expression .)
    INT_LIT         reduce using rule 63 (assignment_expression -> unary_expression ASSIGN_OP assignment_expression .)
    CHAR_LIT        reduce using rule 63 (assignment_expression -> unary_expression ASSIGN_OP assignment_expression .)
    STR_LIT         reduce using rule 63 (assignment_expression -> unary_expression ASSIGN_OP assignment_expression .)
    MAIN            reduce using rule 63 (assignment_expression -> unary_expression ASSIGN_OP assignment_expression .)
    RPAREN          reduce using rule 63 (assignment_expression -> unary_expression ASSIGN_OP assignment_expression .)
    $end            reduce using rule 63 (assignment_expression -> unary_expression ASSIGN_OP assignment_expression .)
    RBRACKET        reduce using rule 63 (assignment_expression -> unary_expression ASSIGN_OP assignment_expression .)
    RBRACE          reduce using rule 63 (assignment_expression -> unary_expression ASSIGN_OP assignment_expression .)


state 87

    (65) assignment_expression -> unary_expression MIN_ASSIGN assignment_expression .

    COMMA           reduce using rule 65 (assignment_expression -> unary_expression MIN_ASSIGN assignment_expression .)
    SEMI            reduce using rule 65 (assignment_expression -> unary_expression MIN_ASSIGN assignment_expression .)
    SCAN            reduce using rule 65 (assignment_expression -> unary_expression MIN_ASSIGN assignment_expression .)
    INC             reduce using rule 65 (assignment_expression -> unary_expression MIN_ASSIGN assignment_expression .)
    DEC             reduce using rule 65 (assignment_expression -> unary_expression MIN_ASSIGN assignment_expression .)
    SUB_OP          reduce using rule 65 (assignment_expression -> unary_expression MIN_ASSIGN assignment_expression .)
    NOT             reduce using rule 65 (assignment_expression -> unary_expression MIN_ASSIGN assignment_expression .)
    VAR             reduce using rule 65 (assignment_expression -> unary_expression MIN_ASSIGN assignment_expression .)
    LPAREN          reduce using rule 65 (assignment_expression -> unary_expression MIN_ASSIGN assignment_expression .)
    FLOAT_ID        reduce using rule 65 (assignment_expression -> unary_expression MIN_ASSIGN assignment_expression .)
    INT_ID          reduce using rule 65 (assignment_expression -> unary_expression MIN_ASSIGN assignment_expression .)
    CHAR_ID         reduce using rule 65 (assignment_expression -> unary_expression MIN_ASSIGN assignment_expression .)
    STR_ID          reduce using rule 65 (assignment_expression -> unary_expression MIN_ASSIGN assignment_expression .)
    VOID_ID         reduce using rule 65 (assignment_expression -> unary_expression MIN_ASSIGN assignment_expression .)
    FLOAT_LIT       reduce using rule 65 (assignment_expression -> unary_expression MIN_ASSIGN assignment_expression .)
    INT_LIT         reduce using rule 65 (assignment_expression -> unary_expression MIN_ASSIGN assignment_expression .)
    CHAR_LIT        reduce using rule 65 (assignment_expression -> unary_expression MIN_ASSIGN assignment_expression .)
    STR_LIT         reduce using rule 65 (assignment_expression -> unary_expression MIN_ASSIGN assignment_expression .)
    MAIN            reduce using rule 65 (assignment_expression -> unary_expression MIN_ASSIGN assignment_expression .)
    RPAREN          reduce using rule 65 (assignment_expression -> unary_expression MIN_ASSIGN assignment_expression .)
    $end            reduce using rule 65 (assignment_expression -> unary_expression MIN_ASSIGN assignment_expression .)
    RBRACKET        reduce using rule 65 (assignment_expression -> unary_expression MIN_ASSIGN assignment_expression .)
    RBRACE          reduce using rule 65 (assignment_expression -> unary_expression MIN_ASSIGN assignment_expression .)


state 88

    (64) assignment_expression -> unary_expression ADD_ASSIGN assignment_expression .

    COMMA           reduce using rule 64 (assignment_expression -> unary_expression ADD_ASSIGN assignment_expression .)
    SEMI            reduce using rule 64 (assignment_expression -> unary_expression ADD_ASSIGN assignment_expression .)
    SCAN            reduce using rule 64 (assignment_expression -> unary_expression ADD_ASSIGN assignment_expression .)
    INC             reduce using rule 64 (assignment_expression -> unary_expression ADD_ASSIGN assignment_expression .)
    DEC             reduce using rule 64 (assignment_expression -> unary_expression ADD_ASSIGN assignment_expression .)
    SUB_OP          reduce using rule 64 (assignment_expression -> unary_expression ADD_ASSIGN assignment_expression .)
    NOT             reduce using rule 64 (assignment_expression -> unary_expression ADD_ASSIGN assignment_expression .)
    VAR             reduce using rule 64 (assignment_expression -> unary_expression ADD_ASSIGN assignment_expression .)
    LPAREN          reduce using rule 64 (assignment_expression -> unary_expression ADD_ASSIGN assignment_expression .)
    FLOAT_ID        reduce using rule 64 (assignment_expression -> unary_expression ADD_ASSIGN assignment_expression .)
    INT_ID          reduce using rule 64 (assignment_expression -> unary_expression ADD_ASSIGN assignment_expression .)
    CHAR_ID         reduce using rule 64 (assignment_expression -> unary_expression ADD_ASSIGN assignment_expression .)
    STR_ID          reduce using rule 64 (assignment_expression -> unary_expression ADD_ASSIGN assignment_expression .)
    VOID_ID         reduce using rule 64 (assignment_expression -> unary_expression ADD_ASSIGN assignment_expression .)
    FLOAT_LIT       reduce using rule 64 (assignment_expression -> unary_expression ADD_ASSIGN assignment_expression .)
    INT_LIT         reduce using rule 64 (assignment_expression -> unary_expression ADD_ASSIGN assignment_expression .)
    CHAR_LIT        reduce using rule 64 (assignment_expression -> unary_expression ADD_ASSIGN assignment_expression .)
    STR_LIT         reduce using rule 64 (assignment_expression -> unary_expression ADD_ASSIGN assignment_expression .)
    MAIN            reduce using rule 64 (assignment_expression -> unary_expression ADD_ASSIGN assignment_expression .)
    RPAREN          reduce using rule 64 (assignment_expression -> unary_expression ADD_ASSIGN assignment_expression .)
    $end            reduce using rule 64 (assignment_expression -> unary_expression ADD_ASSIGN assignment_expression .)
    RBRACKET        reduce using rule 64 (assignment_expression -> unary_expression ADD_ASSIGN assignment_expression .)
    RBRACE          reduce using rule 64 (assignment_expression -> unary_expression ADD_ASSIGN assignment_expression .)


state 89

    (70) scan_expression -> SCAN LPAREN RPAREN .

    SCAN            reduce using rule 70 (scan_expression -> SCAN LPAREN RPAREN .)
    INC             reduce using rule 70 (scan_expression -> SCAN LPAREN RPAREN .)
    DEC             reduce using rule 70 (scan_expression -> SCAN LPAREN RPAREN .)
    SUB_OP          reduce using rule 70 (scan_expression -> SCAN LPAREN RPAREN .)
    NOT             reduce using rule 70 (scan_expression -> SCAN LPAREN RPAREN .)
    VAR             reduce using rule 70 (scan_expression -> SCAN LPAREN RPAREN .)
    LPAREN          reduce using rule 70 (scan_expression -> SCAN LPAREN RPAREN .)
    FLOAT_ID        reduce using rule 70 (scan_expression -> SCAN LPAREN RPAREN .)
    INT_ID          reduce using rule 70 (scan_expression -> SCAN LPAREN RPAREN .)
    CHAR_ID         reduce using rule 70 (scan_expression -> SCAN LPAREN RPAREN .)
    STR_ID          reduce using rule 70 (scan_expression -> SCAN LPAREN RPAREN .)
    VOID_ID         reduce using rule 70 (scan_expression -> SCAN LPAREN RPAREN .)
    FLOAT_LIT       reduce using rule 70 (scan_expression -> SCAN LPAREN RPAREN .)
    INT_LIT         reduce using rule 70 (scan_expression -> SCAN LPAREN RPAREN .)
    CHAR_LIT        reduce using rule 70 (scan_expression -> SCAN LPAREN RPAREN .)
    STR_LIT         reduce using rule 70 (scan_expression -> SCAN LPAREN RPAREN .)
    MAIN            reduce using rule 70 (scan_expression -> SCAN LPAREN RPAREN .)
    $end            reduce using rule 70 (scan_expression -> SCAN LPAREN RPAREN .)
    RPAREN          reduce using rule 70 (scan_expression -> SCAN LPAREN RPAREN .)
    COMMA           reduce using rule 70 (scan_expression -> SCAN LPAREN RPAREN .)
    SEMI            reduce using rule 70 (scan_expression -> SCAN LPAREN RPAREN .)
    RBRACKET        reduce using rule 70 (scan_expression -> SCAN LPAREN RPAREN .)
    RBRACE          reduce using rule 70 (scan_expression -> SCAN LPAREN RPAREN .)


state 90

    (77) logical_and_expression -> logical_and_expression AND equality_expression .
    (79) equality_expression -> equality_expression . EQ relational_expression
    (80) equality_expression -> equality_expression . NEQ relational_expression

  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
    OR              reduce using rule 77 (logical_and_expression -> logical_and_expression AND equality_expression .)
    AND             reduce using rule 77 (logical_and_expression -> logical_and_expression AND equality_expression .)
    SCAN            reduce using rule 77 (logical_and_expression -> logical_and_expression AND equality_expression .)
    INC             reduce using rule 77 (logical_and_expression -> logical_and_expression AND equality_expression .)
    DEC             reduce using rule 77 (logical_and_expression -> logical_and_expression AND equality_expression .)
    SUB_OP          reduce using rule 77 (logical_and_expression -> logical_and_expression AND equality_expression .)
    NOT             reduce using rule 77 (logical_and_expression -> logical_and_expression AND equality_expression .)
    VAR             reduce using rule 77 (logical_and_expression -> logical_and_expression AND equality_expression .)
    LPAREN          reduce using rule 77 (logical_and_expression -> logical_and_expression AND equality_expression .)
    FLOAT_ID        reduce using rule 77 (logical_and_expression -> logical_and_expression AND equality_expression .)
    INT_ID          reduce using rule 77 (logical_and_expression -> logical_and_expression AND equality_expression .)
    CHAR_ID         reduce using rule 77 (logical_and_expression -> logical_and_expression AND equality_expression .)
    STR_ID          reduce using rule 77 (logical_and_expression -> logical_and_expression AND equality_expression .)
    VOID_ID         reduce using rule 77 (logical_and_expression -> logical_and_expression AND equality_expression .)
    FLOAT_LIT       reduce using rule 77 (logical_and_expression -> logical_and_expression AND equality_expression .)
    INT_LIT         reduce using rule 77 (logical_and_expression -> logical_and_expression AND equality_expression .)
    CHAR_LIT        reduce using rule 77 (logical_and_expression -> logical_and_expression AND equality_expression .)
    STR_LIT         reduce using rule 77 (logical_and_expression -> logical_and_expression AND equality_expression .)
    MAIN            reduce using rule 77 (logical_and_expression -> logical_and_expression AND equality_expression .)
    $end            reduce using rule 77 (logical_and_expression -> logical_and_expression AND equality_expression .)
    COMMA           reduce using rule 77 (logical_and_expression -> logical_and_expression AND equality_expression .)
    SEMI            reduce using rule 77 (logical_and_expression -> logical_and_expression AND equality_expression .)
    RPAREN          reduce using rule 77 (logical_and_expression -> logical_and_expression AND equality_expression .)
    RBRACKET        reduce using rule 77 (logical_and_expression -> logical_and_expression AND equality_expression .)
    RBRACE          reduce using rule 77 (logical_and_expression -> logical_and_expression AND equality_expression .)
    ASSIGN_OP       reduce using rule 77 (logical_and_expression -> logical_and_expression AND equality_expression .)
    ADD_ASSIGN      reduce using rule 77 (logical_and_expression -> logical_and_expression AND equality_expression .)
    MIN_ASSIGN      reduce using rule 77 (logical_and_expression -> logical_and_expression AND equality_expression .)
    MUL_ASSIGN      reduce using rule 77 (logical_and_expression -> logical_and_expression AND equality_expression .)
    DIV_ASSIGN      reduce using rule 77 (logical_and_expression -> logical_and_expression AND equality_expression .)
    MOD_ASSIGN      reduce using rule 77 (logical_and_expression -> logical_and_expression AND equality_expression .)
    MULT_OP         reduce using rule 77 (logical_and_expression -> logical_and_expression AND equality_expression .)
    DIV_OP          reduce using rule 77 (logical_and_expression -> logical_and_expression AND equality_expression .)
    MOD_OP          reduce using rule 77 (logical_and_expression -> logical_and_expression AND equality_expression .)
    ADD_OP          reduce using rule 77 (logical_and_expression -> logical_and_expression AND equality_expression .)
    LT              reduce using rule 77 (logical_and_expression -> logical_and_expression AND equality_expression .)
    GT              reduce using rule 77 (logical_and_expression -> logical_and_expression AND equality_expression .)
    LE              reduce using rule 77 (logical_and_expression -> logical_and_expression AND equality_expression .)
    GE              reduce using rule 77 (logical_and_expression -> logical_and_expression AND equality_expression .)
    COLON           reduce using rule 77 (logical_and_expression -> logical_and_expression AND equality_expression .)
    EQ              shift and go to state 73
    NEQ             shift and go to state 74

  ! EQ              [ reduce using rule 77 (logical_and_expression -> logical_and_expression AND equality_expression .) ]
  ! NEQ             [ reduce using rule 77 (logical_and_expression -> logical_and_expression AND equality_expression .) ]


state 91

    (75) logical_or_expression -> logical_and_expression OR logical_or_expression .

    RBRACKET        reduce using rule 75 (logical_or_expression -> logical_and_expression OR logical_or_expression .)
    COMMA           reduce using rule 75 (logical_or_expression -> logical_and_expression OR logical_or_expression .)
    SEMI            reduce using rule 75 (logical_or_expression -> logical_and_expression OR logical_or_expression .)
    RPAREN          reduce using rule 75 (logical_or_expression -> logical_and_expression OR logical_or_expression .)
    SCAN            reduce using rule 75 (logical_or_expression -> logical_and_expression OR logical_or_expression .)
    INC             reduce using rule 75 (logical_or_expression -> logical_and_expression OR logical_or_expression .)
    DEC             reduce using rule 75 (logical_or_expression -> logical_and_expression OR logical_or_expression .)
    SUB_OP          reduce using rule 75 (logical_or_expression -> logical_and_expression OR logical_or_expression .)
    NOT             reduce using rule 75 (logical_or_expression -> logical_and_expression OR logical_or_expression .)
    VAR             reduce using rule 75 (logical_or_expression -> logical_and_expression OR logical_or_expression .)
    LPAREN          reduce using rule 75 (logical_or_expression -> logical_and_expression OR logical_or_expression .)
    FLOAT_ID        reduce using rule 75 (logical_or_expression -> logical_and_expression OR logical_or_expression .)
    INT_ID          reduce using rule 75 (logical_or_expression -> logical_and_expression OR logical_or_expression .)
    CHAR_ID         reduce using rule 75 (logical_or_expression -> logical_and_expression OR logical_or_expression .)
    STR_ID          reduce using rule 75 (logical_or_expression -> logical_and_expression OR logical_or_expression .)
    VOID_ID         reduce using rule 75 (logical_or_expression -> logical_and_expression OR logical_or_expression .)
    FLOAT_LIT       reduce using rule 75 (logical_or_expression -> logical_and_expression OR logical_or_expression .)
    INT_LIT         reduce using rule 75 (logical_or_expression -> logical_and_expression OR logical_or_expression .)
    CHAR_LIT        reduce using rule 75 (logical_or_expression -> logical_and_expression OR logical_or_expression .)
    STR_LIT         reduce using rule 75 (logical_or_expression -> logical_and_expression OR logical_or_expression .)
    MAIN            reduce using rule 75 (logical_or_expression -> logical_and_expression OR logical_or_expression .)
    $end            reduce using rule 75 (logical_or_expression -> logical_and_expression OR logical_or_expression .)
    RBRACE          reduce using rule 75 (logical_or_expression -> logical_and_expression OR logical_or_expression .)
    ASSIGN_OP       reduce using rule 75 (logical_or_expression -> logical_and_expression OR logical_or_expression .)
    ADD_ASSIGN      reduce using rule 75 (logical_or_expression -> logical_and_expression OR logical_or_expression .)
    MIN_ASSIGN      reduce using rule 75 (logical_or_expression -> logical_and_expression OR logical_or_expression .)
    MUL_ASSIGN      reduce using rule 75 (logical_or_expression -> logical_and_expression OR logical_or_expression .)
    DIV_ASSIGN      reduce using rule 75 (logical_or_expression -> logical_and_expression OR logical_or_expression .)
    MOD_ASSIGN      reduce using rule 75 (logical_or_expression -> logical_and_expression OR logical_or_expression .)
    MULT_OP         reduce using rule 75 (logical_or_expression -> logical_and_expression OR logical_or_expression .)
    DIV_OP          reduce using rule 75 (logical_or_expression -> logical_and_expression OR logical_or_expression .)
    MOD_OP          reduce using rule 75 (logical_or_expression -> logical_and_expression OR logical_or_expression .)
    ADD_OP          reduce using rule 75 (logical_or_expression -> logical_and_expression OR logical_or_expression .)
    LT              reduce using rule 75 (logical_or_expression -> logical_and_expression OR logical_or_expression .)
    GT              reduce using rule 75 (logical_or_expression -> logical_and_expression OR logical_or_expression .)
    LE              reduce using rule 75 (logical_or_expression -> logical_and_expression OR logical_or_expression .)
    GE              reduce using rule 75 (logical_or_expression -> logical_and_expression OR logical_or_expression .)
    EQ              reduce using rule 75 (logical_or_expression -> logical_and_expression OR logical_or_expression .)
    NEQ             reduce using rule 75 (logical_or_expression -> logical_and_expression OR logical_or_expression .)
    OR              reduce using rule 75 (logical_or_expression -> logical_and_expression OR logical_or_expression .)
    AND             reduce using rule 75 (logical_or_expression -> logical_and_expression OR logical_or_expression .)
    COLON           reduce using rule 75 (logical_or_expression -> logical_and_expression OR logical_or_expression .)


state 92

    (5) main -> MAIN LPAREN . empty RPAREN compound_statement
    (118) empty -> .

    RPAREN          reduce using rule 118 (empty -> .)

    empty                          shift and go to state 143

state 93

    (1) start -> external_declaration main external_declaration .

    $end            reduce using rule 1 (start -> external_declaration main external_declaration .)


state 94

    (30) statement -> expression_statement .

    CASE            reduce using rule 30 (statement -> expression_statement .)
    DEFAULT         reduce using rule 30 (statement -> expression_statement .)
    LBRACE          reduce using rule 30 (statement -> expression_statement .)
    IF              reduce using rule 30 (statement -> expression_statement .)
    SWITCH          reduce using rule 30 (statement -> expression_statement .)
    WHILE           reduce using rule 30 (statement -> expression_statement .)
    FOR             reduce using rule 30 (statement -> expression_statement .)
    DO              reduce using rule 30 (statement -> expression_statement .)
    CONTINUE        reduce using rule 30 (statement -> expression_statement .)
    BREAK           reduce using rule 30 (statement -> expression_statement .)
    RETURN          reduce using rule 30 (statement -> expression_statement .)
    PRINT           reduce using rule 30 (statement -> expression_statement .)
    PRINTLN         reduce using rule 30 (statement -> expression_statement .)
    VAR             reduce using rule 30 (statement -> expression_statement .)
    LPAREN          reduce using rule 30 (statement -> expression_statement .)
    SCAN            reduce using rule 30 (statement -> expression_statement .)
    INC             reduce using rule 30 (statement -> expression_statement .)
    DEC             reduce using rule 30 (statement -> expression_statement .)
    SUB_OP          reduce using rule 30 (statement -> expression_statement .)
    NOT             reduce using rule 30 (statement -> expression_statement .)
    FLOAT_ID        reduce using rule 30 (statement -> expression_statement .)
    INT_ID          reduce using rule 30 (statement -> expression_statement .)
    CHAR_ID         reduce using rule 30 (statement -> expression_statement .)
    STR_ID          reduce using rule 30 (statement -> expression_statement .)
    VOID_ID         reduce using rule 30 (statement -> expression_statement .)
    FLOAT_LIT       reduce using rule 30 (statement -> expression_statement .)
    INT_LIT         reduce using rule 30 (statement -> expression_statement .)
    CHAR_LIT        reduce using rule 30 (statement -> expression_statement .)
    STR_LIT         reduce using rule 30 (statement -> expression_statement .)
    SEMI            reduce using rule 30 (statement -> expression_statement .)
    RBRACE          reduce using rule 30 (statement -> expression_statement .)
    ELSE            reduce using rule 30 (statement -> expression_statement .)


state 95

    (8) declaration -> init_declarator_list . SEMI
    (12) init_declarator_list -> init_declarator_list . COMMA init_declarator

    SEMI            shift and go to state 145
    COMMA           shift and go to state 144


state 96

    (33) statement -> iteration_statement .

    CASE            reduce using rule 33 (statement -> iteration_statement .)
    DEFAULT         reduce using rule 33 (statement -> iteration_statement .)
    LBRACE          reduce using rule 33 (statement -> iteration_statement .)
    IF              reduce using rule 33 (statement -> iteration_statement .)
    SWITCH          reduce using rule 33 (statement -> iteration_statement .)
    WHILE           reduce using rule 33 (statement -> iteration_statement .)
    FOR             reduce using rule 33 (statement -> iteration_statement .)
    DO              reduce using rule 33 (statement -> iteration_statement .)
    CONTINUE        reduce using rule 33 (statement -> iteration_statement .)
    BREAK           reduce using rule 33 (statement -> iteration_statement .)
    RETURN          reduce using rule 33 (statement -> iteration_statement .)
    PRINT           reduce using rule 33 (statement -> iteration_statement .)
    PRINTLN         reduce using rule 33 (statement -> iteration_statement .)
    VAR             reduce using rule 33 (statement -> iteration_statement .)
    LPAREN          reduce using rule 33 (statement -> iteration_statement .)
    SCAN            reduce using rule 33 (statement -> iteration_statement .)
    INC             reduce using rule 33 (statement -> iteration_statement .)
    DEC             reduce using rule 33 (statement -> iteration_statement .)
    SUB_OP          reduce using rule 33 (statement -> iteration_statement .)
    NOT             reduce using rule 33 (statement -> iteration_statement .)
    FLOAT_ID        reduce using rule 33 (statement -> iteration_statement .)
    INT_ID          reduce using rule 33 (statement -> iteration_statement .)
    CHAR_ID         reduce using rule 33 (statement -> iteration_statement .)
    STR_ID          reduce using rule 33 (statement -> iteration_statement .)
    VOID_ID         reduce using rule 33 (statement -> iteration_statement .)
    FLOAT_LIT       reduce using rule 33 (statement -> iteration_statement .)
    INT_LIT         reduce using rule 33 (statement -> iteration_statement .)
    CHAR_LIT        reduce using rule 33 (statement -> iteration_statement .)
    STR_LIT         reduce using rule 33 (statement -> iteration_statement .)
    SEMI            reduce using rule 33 (statement -> iteration_statement .)
    RBRACE          reduce using rule 33 (statement -> iteration_statement .)
    ELSE            reduce using rule 33 (statement -> iteration_statement .)


state 97

    (39) compound_statement -> LBRACE RBRACE .

    CASE            reduce using rule 39 (compound_statement -> LBRACE RBRACE .)
    DEFAULT         reduce using rule 39 (compound_statement -> LBRACE RBRACE .)
    LBRACE          reduce using rule 39 (compound_statement -> LBRACE RBRACE .)
    IF              reduce using rule 39 (compound_statement -> LBRACE RBRACE .)
    SWITCH          reduce using rule 39 (compound_statement -> LBRACE RBRACE .)
    WHILE           reduce using rule 39 (compound_statement -> LBRACE RBRACE .)
    FOR             reduce using rule 39 (compound_statement -> LBRACE RBRACE .)
    DO              reduce using rule 39 (compound_statement -> LBRACE RBRACE .)
    CONTINUE        reduce using rule 39 (compound_statement -> LBRACE RBRACE .)
    BREAK           reduce using rule 39 (compound_statement -> LBRACE RBRACE .)
    RETURN          reduce using rule 39 (compound_statement -> LBRACE RBRACE .)
    PRINT           reduce using rule 39 (compound_statement -> LBRACE RBRACE .)
    PRINTLN         reduce using rule 39 (compound_statement -> LBRACE RBRACE .)
    VAR             reduce using rule 39 (compound_statement -> LBRACE RBRACE .)
    LPAREN          reduce using rule 39 (compound_statement -> LBRACE RBRACE .)
    SCAN            reduce using rule 39 (compound_statement -> LBRACE RBRACE .)
    INC             reduce using rule 39 (compound_statement -> LBRACE RBRACE .)
    DEC             reduce using rule 39 (compound_statement -> LBRACE RBRACE .)
    SUB_OP          reduce using rule 39 (compound_statement -> LBRACE RBRACE .)
    NOT             reduce using rule 39 (compound_statement -> LBRACE RBRACE .)
    FLOAT_ID        reduce using rule 39 (compound_statement -> LBRACE RBRACE .)
    INT_ID          reduce using rule 39 (compound_statement -> LBRACE RBRACE .)
    CHAR_ID         reduce using rule 39 (compound_statement -> LBRACE RBRACE .)
    STR_ID          reduce using rule 39 (compound_statement -> LBRACE RBRACE .)
    VOID_ID         reduce using rule 39 (compound_statement -> LBRACE RBRACE .)
    FLOAT_LIT       reduce using rule 39 (compound_statement -> LBRACE RBRACE .)
    INT_LIT         reduce using rule 39 (compound_statement -> LBRACE RBRACE .)
    CHAR_LIT        reduce using rule 39 (compound_statement -> LBRACE RBRACE .)
    STR_LIT         reduce using rule 39 (compound_statement -> LBRACE RBRACE .)
    SEMI            reduce using rule 39 (compound_statement -> LBRACE RBRACE .)
    RBRACE          reduce using rule 39 (compound_statement -> LBRACE RBRACE .)
    ELSE            reduce using rule 39 (compound_statement -> LBRACE RBRACE .)
    MAIN            reduce using rule 39 (compound_statement -> LBRACE RBRACE .)
    $end            reduce using rule 39 (compound_statement -> LBRACE RBRACE .)


state 98

    (15) declarator -> VAR . identifier
    (109) identifier -> . FLOAT_ID
    (110) identifier -> . INT_ID
    (111) identifier -> . CHAR_ID
    (112) identifier -> . STR_ID
    (113) identifier -> . VOID_ID

    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 30
    CHAR_ID         shift and go to state 13
    STR_ID          shift and go to state 19
    VOID_ID         shift and go to state 23

    identifier                     shift and go to state 146

state 99

    (41) mix_list -> declaration_list .
    (43) mix_list -> declaration_list . mix_list
    (10) declaration_list -> declaration_list . declaration
    (40) mix_list -> . statement_list
    (41) mix_list -> . declaration_list
    (42) mix_list -> . statement_list mix_list
    (43) mix_list -> . declaration_list mix_list
    (8) declaration -> . init_declarator_list SEMI
    (44) statement_list -> . statement
    (45) statement_list -> . statement_list statement
    (9) declaration_list -> . declaration
    (10) declaration_list -> . declaration_list declaration
    (11) init_declarator_list -> . init_declarator
    (12) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (29) statement -> . labeled_statement
    (30) statement -> . expression_statement
    (31) statement -> . compound_statement
    (32) statement -> . selection_statement
    (33) statement -> . iteration_statement
    (34) statement -> . jump_statement
    (13) init_declarator -> . declarator
    (14) init_declarator -> . declarator ASSIGN_OP initializer
    (35) labeled_statement -> . CASE constant_expression COLON statement
    (36) labeled_statement -> . DEFAULT COLON statement
    (37) expression_statement -> . expression_opt SEMI
    (38) compound_statement -> . LBRACE mix_list RBRACE
    (39) compound_statement -> . LBRACE RBRACE
    (46) selection_statement -> . IF LPAREN expression RPAREN statement
    (47) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (48) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (49) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (50) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (51) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (52) jump_statement -> . CONTINUE SEMI
    (53) jump_statement -> . BREAK SEMI
    (54) jump_statement -> . RETURN expression_opt SEMI
    (15) declarator -> . VAR identifier
    (16) declarator -> . LPAREN declarator RPAREN
    (17) declarator -> . declarator LBRACKET constant_expression_opt RBRACKET
    (55) expression_opt -> . empty
    (56) expression_opt -> . expression
    (118) empty -> .
    (57) expression -> . print_expression
    (58) expression -> . expression COMMA print_expression
    (59) print_expression -> . assignment_expression
    (60) print_expression -> . PRINT LPAREN scan_expression RPAREN
    (61) print_expression -> . PRINTLN LPAREN scan_expression RPAREN
    (62) assignment_expression -> . scan_expression
    (63) assignment_expression -> . unary_expression ASSIGN_OP assignment_expression
    (64) assignment_expression -> . unary_expression ADD_ASSIGN assignment_expression
    (65) assignment_expression -> . unary_expression MIN_ASSIGN assignment_expression
    (66) assignment_expression -> . unary_expression MUL_ASSIGN assignment_expression
    (67) assignment_expression -> . unary_expression DIV_ASSIGN assignment_expression
    (68) assignment_expression -> . unary_expression MOD_ASSIGN assignment_expression
    (69) scan_expression -> . logical_or_expression
    (70) scan_expression -> . SCAN LPAREN RPAREN
    (93) unary_expression -> . postfix_expression
    (94) unary_expression -> . INC unary_expression
    (95) unary_expression -> . DEC unary_expression
    (96) unary_expression -> . SUB_OP add_expression
    (97) unary_expression -> . NOT logical_or_expression
    (74) logical_or_expression -> . logical_and_expression
    (75) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (98) postfix_expression -> . primary_expression
    (99) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (100) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (101) postfix_expression -> . postfix_expression LPAREN RPAREN
    (102) postfix_expression -> . postfix_expression INC
    (103) postfix_expression -> . postfix_expression DEC
    (76) logical_and_expression -> . equality_expression
    (77) logical_and_expression -> . logical_and_expression AND equality_expression
    (104) primary_expression -> . identifier
    (105) primary_expression -> . constant
    (106) primary_expression -> . LPAREN expression RPAREN
    (78) equality_expression -> . relational_expression
    (79) equality_expression -> . equality_expression EQ relational_expression
    (80) equality_expression -> . equality_expression NEQ relational_expression
    (109) identifier -> . FLOAT_ID
    (110) identifier -> . INT_ID
    (111) identifier -> . CHAR_ID
    (112) identifier -> . STR_ID
    (113) identifier -> . VOID_ID
    (114) constant -> . FLOAT_LIT
    (115) constant -> . INT_LIT
    (116) constant -> . CHAR_LIT
    (117) constant -> . STR_LIT
    (81) relational_expression -> . add_expression
    (82) relational_expression -> . relational_expression LT add_expression
    (83) relational_expression -> . relational_expression GT add_expression
    (84) relational_expression -> . relational_expression LE add_expression
    (85) relational_expression -> . relational_expression GE add_expression
    (86) add_expression -> . mult_expression
    (87) add_expression -> . add_expression ADD_OP mult_expression
    (88) add_expression -> . add_expression SUB_OP mult_expression
    (89) mult_expression -> . unary_expression
    (90) mult_expression -> . mult_expression MULT_OP unary_expression
    (91) mult_expression -> . mult_expression DIV_OP unary_expression
    (92) mult_expression -> . mult_expression MOD_OP unary_expression

    RBRACE          reduce using rule 41 (mix_list -> declaration_list .)
    CASE            shift and go to state 112
    DEFAULT         shift and go to state 110
    LBRACE          shift and go to state 55
    IF              shift and go to state 122
    SWITCH          shift and go to state 113
    WHILE           shift and go to state 111
    FOR             shift and go to state 105
    DO              shift and go to state 119
    CONTINUE        shift and go to state 107
    BREAK           shift and go to state 117
    RETURN          shift and go to state 102
    VAR             shift and go to state 98
    LPAREN          shift and go to state 109
    SEMI            reduce using rule 118 (empty -> .)
    PRINT           shift and go to state 37
    PRINTLN         shift and go to state 38
    SCAN            shift and go to state 4
    INC             shift and go to state 36
    DEC             shift and go to state 7
    SUB_OP          shift and go to state 32
    NOT             shift and go to state 34
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 30
    CHAR_ID         shift and go to state 13
    STR_ID          shift and go to state 19
    VOID_ID         shift and go to state 23
    FLOAT_LIT       shift and go to state 31
    INT_LIT         shift and go to state 33
    CHAR_LIT        shift and go to state 12
    STR_LIT         shift and go to state 9

    expression_statement           shift and go to state 94
    constant                       shift and go to state 1
    unary_expression               shift and go to state 3
    iteration_statement            shift and go to state 96
    scan_expression                shift and go to state 10
    compound_statement             shift and go to state 104
    selection_statement            shift and go to state 120
    postfix_expression             shift and go to state 15
    relational_expression          shift and go to state 17
    statement                      shift and go to state 114
    logical_or_expression          shift and go to state 21
    empty                          shift and go to state 118
    assignment_expression          shift and go to state 39
    declarator                     shift and go to state 100
    print_expression               shift and go to state 40
    mult_expression                shift and go to state 25
    expression_opt                 shift and go to state 123
    primary_expression             shift and go to state 26
    declaration                    shift and go to state 148
    logical_and_expression         shift and go to state 8
    init_declarator_list           shift and go to state 95
    add_expression                 shift and go to state 28
    equality_expression            shift and go to state 29
    jump_statement                 shift and go to state 116
    labeled_statement              shift and go to state 103
    declaration_list               shift and go to state 99
    init_declarator                shift and go to state 106
    statement_list                 shift and go to state 121
    mix_list                       shift and go to state 147
    identifier                     shift and go to state 35
    expression                     shift and go to state 108

state 100

    (13) init_declarator -> declarator .
    (14) init_declarator -> declarator . ASSIGN_OP initializer
    (17) declarator -> declarator . LBRACKET constant_expression_opt RBRACKET

    SEMI            reduce using rule 13 (init_declarator -> declarator .)
    COMMA           reduce using rule 13 (init_declarator -> declarator .)
    ASSIGN_OP       shift and go to state 150
    LBRACKET        shift and go to state 149


state 101

    (38) compound_statement -> LBRACE mix_list . RBRACE

    RBRACE          shift and go to state 151


state 102

    (54) jump_statement -> RETURN . expression_opt SEMI
    (55) expression_opt -> . empty
    (56) expression_opt -> . expression
    (118) empty -> .
    (57) expression -> . print_expression
    (58) expression -> . expression COMMA print_expression
    (59) print_expression -> . assignment_expression
    (60) print_expression -> . PRINT LPAREN scan_expression RPAREN
    (61) print_expression -> . PRINTLN LPAREN scan_expression RPAREN
    (62) assignment_expression -> . scan_expression
    (63) assignment_expression -> . unary_expression ASSIGN_OP assignment_expression
    (64) assignment_expression -> . unary_expression ADD_ASSIGN assignment_expression
    (65) assignment_expression -> . unary_expression MIN_ASSIGN assignment_expression
    (66) assignment_expression -> . unary_expression MUL_ASSIGN assignment_expression
    (67) assignment_expression -> . unary_expression DIV_ASSIGN assignment_expression
    (68) assignment_expression -> . unary_expression MOD_ASSIGN assignment_expression
    (69) scan_expression -> . logical_or_expression
    (70) scan_expression -> . SCAN LPAREN RPAREN
    (93) unary_expression -> . postfix_expression
    (94) unary_expression -> . INC unary_expression
    (95) unary_expression -> . DEC unary_expression
    (96) unary_expression -> . SUB_OP add_expression
    (97) unary_expression -> . NOT logical_or_expression
    (74) logical_or_expression -> . logical_and_expression
    (75) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (98) postfix_expression -> . primary_expression
    (99) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (100) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (101) postfix_expression -> . postfix_expression LPAREN RPAREN
    (102) postfix_expression -> . postfix_expression INC
    (103) postfix_expression -> . postfix_expression DEC
    (76) logical_and_expression -> . equality_expression
    (77) logical_and_expression -> . logical_and_expression AND equality_expression
    (104) primary_expression -> . identifier
    (105) primary_expression -> . constant
    (106) primary_expression -> . LPAREN expression RPAREN
    (78) equality_expression -> . relational_expression
    (79) equality_expression -> . equality_expression EQ relational_expression
    (80) equality_expression -> . equality_expression NEQ relational_expression
    (109) identifier -> . FLOAT_ID
    (110) identifier -> . INT_ID
    (111) identifier -> . CHAR_ID
    (112) identifier -> . STR_ID
    (113) identifier -> . VOID_ID
    (114) constant -> . FLOAT_LIT
    (115) constant -> . INT_LIT
    (116) constant -> . CHAR_LIT
    (117) constant -> . STR_LIT
    (81) relational_expression -> . add_expression
    (82) relational_expression -> . relational_expression LT add_expression
    (83) relational_expression -> . relational_expression GT add_expression
    (84) relational_expression -> . relational_expression LE add_expression
    (85) relational_expression -> . relational_expression GE add_expression
    (86) add_expression -> . mult_expression
    (87) add_expression -> . add_expression ADD_OP mult_expression
    (88) add_expression -> . add_expression SUB_OP mult_expression
    (89) mult_expression -> . unary_expression
    (90) mult_expression -> . mult_expression MULT_OP unary_expression
    (91) mult_expression -> . mult_expression DIV_OP unary_expression
    (92) mult_expression -> . mult_expression MOD_OP unary_expression

    SEMI            reduce using rule 118 (empty -> .)
    PRINT           shift and go to state 37
    PRINTLN         shift and go to state 38
    SCAN            shift and go to state 4
    INC             shift and go to state 36
    DEC             shift and go to state 7
    SUB_OP          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 2
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 30
    CHAR_ID         shift and go to state 13
    STR_ID          shift and go to state 19
    VOID_ID         shift and go to state 23
    FLOAT_LIT       shift and go to state 31
    INT_LIT         shift and go to state 33
    CHAR_LIT        shift and go to state 12
    STR_LIT         shift and go to state 9

    constant                       shift and go to state 1
    assignment_expression          shift and go to state 39
    unary_expression               shift and go to state 3
    relational_expression          shift and go to state 17
    add_expression                 shift and go to state 28
    print_expression               shift and go to state 40
    expression_opt                 shift and go to state 152
    equality_expression            shift and go to state 29
    postfix_expression             shift and go to state 15
    primary_expression             shift and go to state 26
    mult_expression                shift and go to state 25
    logical_and_expression         shift and go to state 8
    identifier                     shift and go to state 35
    expression                     shift and go to state 108
    logical_or_expression          shift and go to state 21
    empty                          shift and go to state 118
    scan_expression                shift and go to state 10

state 103

    (29) statement -> labeled_statement .

    CASE            reduce using rule 29 (statement -> labeled_statement .)
    DEFAULT         reduce using rule 29 (statement -> labeled_statement .)
    LBRACE          reduce using rule 29 (statement -> labeled_statement .)
    IF              reduce using rule 29 (statement -> labeled_statement .)
    SWITCH          reduce using rule 29 (statement -> labeled_statement .)
    WHILE           reduce using rule 29 (statement -> labeled_statement .)
    FOR             reduce using rule 29 (statement -> labeled_statement .)
    DO              reduce using rule 29 (statement -> labeled_statement .)
    CONTINUE        reduce using rule 29 (statement -> labeled_statement .)
    BREAK           reduce using rule 29 (statement -> labeled_statement .)
    RETURN          reduce using rule 29 (statement -> labeled_statement .)
    PRINT           reduce using rule 29 (statement -> labeled_statement .)
    PRINTLN         reduce using rule 29 (statement -> labeled_statement .)
    VAR             reduce using rule 29 (statement -> labeled_statement .)
    LPAREN          reduce using rule 29 (statement -> labeled_statement .)
    SCAN            reduce using rule 29 (statement -> labeled_statement .)
    INC             reduce using rule 29 (statement -> labeled_statement .)
    DEC             reduce using rule 29 (statement -> labeled_statement .)
    SUB_OP          reduce using rule 29 (statement -> labeled_statement .)
    NOT             reduce using rule 29 (statement -> labeled_statement .)
    FLOAT_ID        reduce using rule 29 (statement -> labeled_statement .)
    INT_ID          reduce using rule 29 (statement -> labeled_statement .)
    CHAR_ID         reduce using rule 29 (statement -> labeled_statement .)
    STR_ID          reduce using rule 29 (statement -> labeled_statement .)
    VOID_ID         reduce using rule 29 (statement -> labeled_statement .)
    FLOAT_LIT       reduce using rule 29 (statement -> labeled_statement .)
    INT_LIT         reduce using rule 29 (statement -> labeled_statement .)
    CHAR_LIT        reduce using rule 29 (statement -> labeled_statement .)
    STR_LIT         reduce using rule 29 (statement -> labeled_statement .)
    SEMI            reduce using rule 29 (statement -> labeled_statement .)
    RBRACE          reduce using rule 29 (statement -> labeled_statement .)
    ELSE            reduce using rule 29 (statement -> labeled_statement .)


state 104

    (31) statement -> compound_statement .

    CASE            reduce using rule 31 (statement -> compound_statement .)
    DEFAULT         reduce using rule 31 (statement -> compound_statement .)
    LBRACE          reduce using rule 31 (statement -> compound_statement .)
    IF              reduce using rule 31 (statement -> compound_statement .)
    SWITCH          reduce using rule 31 (statement -> compound_statement .)
    WHILE           reduce using rule 31 (statement -> compound_statement .)
    FOR             reduce using rule 31 (statement -> compound_statement .)
    DO              reduce using rule 31 (statement -> compound_statement .)
    CONTINUE        reduce using rule 31 (statement -> compound_statement .)
    BREAK           reduce using rule 31 (statement -> compound_statement .)
    RETURN          reduce using rule 31 (statement -> compound_statement .)
    PRINT           reduce using rule 31 (statement -> compound_statement .)
    PRINTLN         reduce using rule 31 (statement -> compound_statement .)
    VAR             reduce using rule 31 (statement -> compound_statement .)
    LPAREN          reduce using rule 31 (statement -> compound_statement .)
    SCAN            reduce using rule 31 (statement -> compound_statement .)
    INC             reduce using rule 31 (statement -> compound_statement .)
    DEC             reduce using rule 31 (statement -> compound_statement .)
    SUB_OP          reduce using rule 31 (statement -> compound_statement .)
    NOT             reduce using rule 31 (statement -> compound_statement .)
    FLOAT_ID        reduce using rule 31 (statement -> compound_statement .)
    INT_ID          reduce using rule 31 (statement -> compound_statement .)
    CHAR_ID         reduce using rule 31 (statement -> compound_statement .)
    STR_ID          reduce using rule 31 (statement -> compound_statement .)
    VOID_ID         reduce using rule 31 (statement -> compound_statement .)
    FLOAT_LIT       reduce using rule 31 (statement -> compound_statement .)
    INT_LIT         reduce using rule 31 (statement -> compound_statement .)
    CHAR_LIT        reduce using rule 31 (statement -> compound_statement .)
    STR_LIT         reduce using rule 31 (statement -> compound_statement .)
    SEMI            reduce using rule 31 (statement -> compound_statement .)
    RBRACE          reduce using rule 31 (statement -> compound_statement .)
    ELSE            reduce using rule 31 (statement -> compound_statement .)


state 105

    (50) iteration_statement -> FOR . LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement

    LPAREN          shift and go to state 153


state 106

    (11) init_declarator_list -> init_declarator .

    SEMI            reduce using rule 11 (init_declarator_list -> init_declarator .)
    COMMA           reduce using rule 11 (init_declarator_list -> init_declarator .)


state 107

    (52) jump_statement -> CONTINUE . SEMI

    SEMI            shift and go to state 154


state 108

    (56) expression_opt -> expression .
    (58) expression -> expression . COMMA print_expression

    SEMI            reduce using rule 56 (expression_opt -> expression .)
    RPAREN          reduce using rule 56 (expression_opt -> expression .)
    COMMA           shift and go to state 82


state 109

    (16) declarator -> LPAREN . declarator RPAREN
    (106) primary_expression -> LPAREN . expression RPAREN
    (15) declarator -> . VAR identifier
    (16) declarator -> . LPAREN declarator RPAREN
    (17) declarator -> . declarator LBRACKET constant_expression_opt RBRACKET
    (57) expression -> . print_expression
    (58) expression -> . expression COMMA print_expression
    (59) print_expression -> . assignment_expression
    (60) print_expression -> . PRINT LPAREN scan_expression RPAREN
    (61) print_expression -> . PRINTLN LPAREN scan_expression RPAREN
    (62) assignment_expression -> . scan_expression
    (63) assignment_expression -> . unary_expression ASSIGN_OP assignment_expression
    (64) assignment_expression -> . unary_expression ADD_ASSIGN assignment_expression
    (65) assignment_expression -> . unary_expression MIN_ASSIGN assignment_expression
    (66) assignment_expression -> . unary_expression MUL_ASSIGN assignment_expression
    (67) assignment_expression -> . unary_expression DIV_ASSIGN assignment_expression
    (68) assignment_expression -> . unary_expression MOD_ASSIGN assignment_expression
    (69) scan_expression -> . logical_or_expression
    (70) scan_expression -> . SCAN LPAREN RPAREN
    (93) unary_expression -> . postfix_expression
    (94) unary_expression -> . INC unary_expression
    (95) unary_expression -> . DEC unary_expression
    (96) unary_expression -> . SUB_OP add_expression
    (97) unary_expression -> . NOT logical_or_expression
    (74) logical_or_expression -> . logical_and_expression
    (75) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (98) postfix_expression -> . primary_expression
    (99) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (100) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (101) postfix_expression -> . postfix_expression LPAREN RPAREN
    (102) postfix_expression -> . postfix_expression INC
    (103) postfix_expression -> . postfix_expression DEC
    (76) logical_and_expression -> . equality_expression
    (77) logical_and_expression -> . logical_and_expression AND equality_expression
    (104) primary_expression -> . identifier
    (105) primary_expression -> . constant
    (106) primary_expression -> . LPAREN expression RPAREN
    (78) equality_expression -> . relational_expression
    (79) equality_expression -> . equality_expression EQ relational_expression
    (80) equality_expression -> . equality_expression NEQ relational_expression
    (109) identifier -> . FLOAT_ID
    (110) identifier -> . INT_ID
    (111) identifier -> . CHAR_ID
    (112) identifier -> . STR_ID
    (113) identifier -> . VOID_ID
    (114) constant -> . FLOAT_LIT
    (115) constant -> . INT_LIT
    (116) constant -> . CHAR_LIT
    (117) constant -> . STR_LIT
    (81) relational_expression -> . add_expression
    (82) relational_expression -> . relational_expression LT add_expression
    (83) relational_expression -> . relational_expression GT add_expression
    (84) relational_expression -> . relational_expression LE add_expression
    (85) relational_expression -> . relational_expression GE add_expression
    (86) add_expression -> . mult_expression
    (87) add_expression -> . add_expression ADD_OP mult_expression
    (88) add_expression -> . add_expression SUB_OP mult_expression
    (89) mult_expression -> . unary_expression
    (90) mult_expression -> . mult_expression MULT_OP unary_expression
    (91) mult_expression -> . mult_expression DIV_OP unary_expression
    (92) mult_expression -> . mult_expression MOD_OP unary_expression

    VAR             shift and go to state 98
    LPAREN          shift and go to state 109
    PRINT           shift and go to state 37
    PRINTLN         shift and go to state 38
    SCAN            shift and go to state 4
    INC             shift and go to state 36
    DEC             shift and go to state 7
    SUB_OP          shift and go to state 32
    NOT             shift and go to state 34
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 30
    CHAR_ID         shift and go to state 13
    STR_ID          shift and go to state 19
    VOID_ID         shift and go to state 23
    FLOAT_LIT       shift and go to state 31
    INT_LIT         shift and go to state 33
    CHAR_LIT        shift and go to state 12
    STR_LIT         shift and go to state 9

    constant                       shift and go to state 1
    assignment_expression          shift and go to state 39
    unary_expression               shift and go to state 3
    relational_expression          shift and go to state 17
    add_expression                 shift and go to state 28
    print_expression               shift and go to state 40
    postfix_expression             shift and go to state 15
    primary_expression             shift and go to state 26
    declarator                     shift and go to state 155
    mult_expression                shift and go to state 25
    logical_and_expression         shift and go to state 8
    identifier                     shift and go to state 35
    expression                     shift and go to state 41
    logical_or_expression          shift and go to state 21
    equality_expression            shift and go to state 29
    scan_expression                shift and go to state 10

state 110

    (36) labeled_statement -> DEFAULT . COLON statement

    COLON           shift and go to state 156


state 111

    (49) iteration_statement -> WHILE . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 157


state 112

    (35) labeled_statement -> CASE . constant_expression COLON statement
    (73) constant_expression -> . logical_or_expression
    (74) logical_or_expression -> . logical_and_expression
    (75) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (76) logical_and_expression -> . equality_expression
    (77) logical_and_expression -> . logical_and_expression AND equality_expression
    (78) equality_expression -> . relational_expression
    (79) equality_expression -> . equality_expression EQ relational_expression
    (80) equality_expression -> . equality_expression NEQ relational_expression
    (81) relational_expression -> . add_expression
    (82) relational_expression -> . relational_expression LT add_expression
    (83) relational_expression -> . relational_expression GT add_expression
    (84) relational_expression -> . relational_expression LE add_expression
    (85) relational_expression -> . relational_expression GE add_expression
    (86) add_expression -> . mult_expression
    (87) add_expression -> . add_expression ADD_OP mult_expression
    (88) add_expression -> . add_expression SUB_OP mult_expression
    (89) mult_expression -> . unary_expression
    (90) mult_expression -> . mult_expression MULT_OP unary_expression
    (91) mult_expression -> . mult_expression DIV_OP unary_expression
    (92) mult_expression -> . mult_expression MOD_OP unary_expression
    (93) unary_expression -> . postfix_expression
    (94) unary_expression -> . INC unary_expression
    (95) unary_expression -> . DEC unary_expression
    (96) unary_expression -> . SUB_OP add_expression
    (97) unary_expression -> . NOT logical_or_expression
    (98) postfix_expression -> . primary_expression
    (99) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (100) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (101) postfix_expression -> . postfix_expression LPAREN RPAREN
    (102) postfix_expression -> . postfix_expression INC
    (103) postfix_expression -> . postfix_expression DEC
    (104) primary_expression -> . identifier
    (105) primary_expression -> . constant
    (106) primary_expression -> . LPAREN expression RPAREN
    (109) identifier -> . FLOAT_ID
    (110) identifier -> . INT_ID
    (111) identifier -> . CHAR_ID
    (112) identifier -> . STR_ID
    (113) identifier -> . VOID_ID
    (114) constant -> . FLOAT_LIT
    (115) constant -> . INT_LIT
    (116) constant -> . CHAR_LIT
    (117) constant -> . STR_LIT

    INC             shift and go to state 36
    DEC             shift and go to state 7
    SUB_OP          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 2
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 30
    CHAR_ID         shift and go to state 13
    STR_ID          shift and go to state 19
    VOID_ID         shift and go to state 23
    FLOAT_LIT       shift and go to state 31
    INT_LIT         shift and go to state 33
    CHAR_LIT        shift and go to state 12
    STR_LIT         shift and go to state 9

    constant                       shift and go to state 1
    unary_expression               shift and go to state 75
    postfix_expression             shift and go to state 15
    constant_expression            shift and go to state 159
    relational_expression          shift and go to state 17
    mult_expression                shift and go to state 25
    logical_and_expression         shift and go to state 8
    identifier                     shift and go to state 35
    add_expression                 shift and go to state 28
    logical_or_expression          shift and go to state 158
    equality_expression            shift and go to state 29
    primary_expression             shift and go to state 26

state 113

    (48) selection_statement -> SWITCH . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 160


state 114

    (44) statement_list -> statement .

    CASE            reduce using rule 44 (statement_list -> statement .)
    DEFAULT         reduce using rule 44 (statement_list -> statement .)
    LBRACE          reduce using rule 44 (statement_list -> statement .)
    IF              reduce using rule 44 (statement_list -> statement .)
    SWITCH          reduce using rule 44 (statement_list -> statement .)
    WHILE           reduce using rule 44 (statement_list -> statement .)
    FOR             reduce using rule 44 (statement_list -> statement .)
    DO              reduce using rule 44 (statement_list -> statement .)
    CONTINUE        reduce using rule 44 (statement_list -> statement .)
    BREAK           reduce using rule 44 (statement_list -> statement .)
    RETURN          reduce using rule 44 (statement_list -> statement .)
    PRINT           reduce using rule 44 (statement_list -> statement .)
    PRINTLN         reduce using rule 44 (statement_list -> statement .)
    VAR             reduce using rule 44 (statement_list -> statement .)
    LPAREN          reduce using rule 44 (statement_list -> statement .)
    SCAN            reduce using rule 44 (statement_list -> statement .)
    INC             reduce using rule 44 (statement_list -> statement .)
    DEC             reduce using rule 44 (statement_list -> statement .)
    SUB_OP          reduce using rule 44 (statement_list -> statement .)
    NOT             reduce using rule 44 (statement_list -> statement .)
    FLOAT_ID        reduce using rule 44 (statement_list -> statement .)
    INT_ID          reduce using rule 44 (statement_list -> statement .)
    CHAR_ID         reduce using rule 44 (statement_list -> statement .)
    STR_ID          reduce using rule 44 (statement_list -> statement .)
    VOID_ID         reduce using rule 44 (statement_list -> statement .)
    FLOAT_LIT       reduce using rule 44 (statement_list -> statement .)
    INT_LIT         reduce using rule 44 (statement_list -> statement .)
    CHAR_LIT        reduce using rule 44 (statement_list -> statement .)
    STR_LIT         reduce using rule 44 (statement_list -> statement .)
    SEMI            reduce using rule 44 (statement_list -> statement .)
    RBRACE          reduce using rule 44 (statement_list -> statement .)


state 115

    (9) declaration_list -> declaration .

    CASE            reduce using rule 9 (declaration_list -> declaration .)
    DEFAULT         reduce using rule 9 (declaration_list -> declaration .)
    LBRACE          reduce using rule 9 (declaration_list -> declaration .)
    IF              reduce using rule 9 (declaration_list -> declaration .)
    SWITCH          reduce using rule 9 (declaration_list -> declaration .)
    WHILE           reduce using rule 9 (declaration_list -> declaration .)
    FOR             reduce using rule 9 (declaration_list -> declaration .)
    DO              reduce using rule 9 (declaration_list -> declaration .)
    CONTINUE        reduce using rule 9 (declaration_list -> declaration .)
    BREAK           reduce using rule 9 (declaration_list -> declaration .)
    RETURN          reduce using rule 9 (declaration_list -> declaration .)
    VAR             reduce using rule 9 (declaration_list -> declaration .)
    LPAREN          reduce using rule 9 (declaration_list -> declaration .)
    PRINT           reduce using rule 9 (declaration_list -> declaration .)
    PRINTLN         reduce using rule 9 (declaration_list -> declaration .)
    SCAN            reduce using rule 9 (declaration_list -> declaration .)
    INC             reduce using rule 9 (declaration_list -> declaration .)
    DEC             reduce using rule 9 (declaration_list -> declaration .)
    SUB_OP          reduce using rule 9 (declaration_list -> declaration .)
    NOT             reduce using rule 9 (declaration_list -> declaration .)
    FLOAT_ID        reduce using rule 9 (declaration_list -> declaration .)
    INT_ID          reduce using rule 9 (declaration_list -> declaration .)
    CHAR_ID         reduce using rule 9 (declaration_list -> declaration .)
    STR_ID          reduce using rule 9 (declaration_list -> declaration .)
    VOID_ID         reduce using rule 9 (declaration_list -> declaration .)
    FLOAT_LIT       reduce using rule 9 (declaration_list -> declaration .)
    INT_LIT         reduce using rule 9 (declaration_list -> declaration .)
    CHAR_LIT        reduce using rule 9 (declaration_list -> declaration .)
    STR_LIT         reduce using rule 9 (declaration_list -> declaration .)
    SEMI            reduce using rule 9 (declaration_list -> declaration .)
    RBRACE          reduce using rule 9 (declaration_list -> declaration .)


state 116

    (34) statement -> jump_statement .

    CASE            reduce using rule 34 (statement -> jump_statement .)
    DEFAULT         reduce using rule 34 (statement -> jump_statement .)
    LBRACE          reduce using rule 34 (statement -> jump_statement .)
    IF              reduce using rule 34 (statement -> jump_statement .)
    SWITCH          reduce using rule 34 (statement -> jump_statement .)
    WHILE           reduce using rule 34 (statement -> jump_statement .)
    FOR             reduce using rule 34 (statement -> jump_statement .)
    DO              reduce using rule 34 (statement -> jump_statement .)
    CONTINUE        reduce using rule 34 (statement -> jump_statement .)
    BREAK           reduce using rule 34 (statement -> jump_statement .)
    RETURN          reduce using rule 34 (statement -> jump_statement .)
    PRINT           reduce using rule 34 (statement -> jump_statement .)
    PRINTLN         reduce using rule 34 (statement -> jump_statement .)
    VAR             reduce using rule 34 (statement -> jump_statement .)
    LPAREN          reduce using rule 34 (statement -> jump_statement .)
    SCAN            reduce using rule 34 (statement -> jump_statement .)
    INC             reduce using rule 34 (statement -> jump_statement .)
    DEC             reduce using rule 34 (statement -> jump_statement .)
    SUB_OP          reduce using rule 34 (statement -> jump_statement .)
    NOT             reduce using rule 34 (statement -> jump_statement .)
    FLOAT_ID        reduce using rule 34 (statement -> jump_statement .)
    INT_ID          reduce using rule 34 (statement -> jump_statement .)
    CHAR_ID         reduce using rule 34 (statement -> jump_statement .)
    STR_ID          reduce using rule 34 (statement -> jump_statement .)
    VOID_ID         reduce using rule 34 (statement -> jump_statement .)
    FLOAT_LIT       reduce using rule 34 (statement -> jump_statement .)
    INT_LIT         reduce using rule 34 (statement -> jump_statement .)
    CHAR_LIT        reduce using rule 34 (statement -> jump_statement .)
    STR_LIT         reduce using rule 34 (statement -> jump_statement .)
    SEMI            reduce using rule 34 (statement -> jump_statement .)
    RBRACE          reduce using rule 34 (statement -> jump_statement .)
    ELSE            reduce using rule 34 (statement -> jump_statement .)


state 117

    (53) jump_statement -> BREAK . SEMI

    SEMI            shift and go to state 161


state 118

    (55) expression_opt -> empty .

    SEMI            reduce using rule 55 (expression_opt -> empty .)
    RPAREN          reduce using rule 55 (expression_opt -> empty .)


state 119

    (51) iteration_statement -> DO . statement WHILE LPAREN expression RPAREN SEMI
    (29) statement -> . labeled_statement
    (30) statement -> . expression_statement
    (31) statement -> . compound_statement
    (32) statement -> . selection_statement
    (33) statement -> . iteration_statement
    (34) statement -> . jump_statement
    (35) labeled_statement -> . CASE constant_expression COLON statement
    (36) labeled_statement -> . DEFAULT COLON statement
    (37) expression_statement -> . expression_opt SEMI
    (38) compound_statement -> . LBRACE mix_list RBRACE
    (39) compound_statement -> . LBRACE RBRACE
    (46) selection_statement -> . IF LPAREN expression RPAREN statement
    (47) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (48) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (49) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (50) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (51) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (52) jump_statement -> . CONTINUE SEMI
    (53) jump_statement -> . BREAK SEMI
    (54) jump_statement -> . RETURN expression_opt SEMI
    (55) expression_opt -> . empty
    (56) expression_opt -> . expression
    (118) empty -> .
    (57) expression -> . print_expression
    (58) expression -> . expression COMMA print_expression
    (59) print_expression -> . assignment_expression
    (60) print_expression -> . PRINT LPAREN scan_expression RPAREN
    (61) print_expression -> . PRINTLN LPAREN scan_expression RPAREN
    (62) assignment_expression -> . scan_expression
    (63) assignment_expression -> . unary_expression ASSIGN_OP assignment_expression
    (64) assignment_expression -> . unary_expression ADD_ASSIGN assignment_expression
    (65) assignment_expression -> . unary_expression MIN_ASSIGN assignment_expression
    (66) assignment_expression -> . unary_expression MUL_ASSIGN assignment_expression
    (67) assignment_expression -> . unary_expression DIV_ASSIGN assignment_expression
    (68) assignment_expression -> . unary_expression MOD_ASSIGN assignment_expression
    (69) scan_expression -> . logical_or_expression
    (70) scan_expression -> . SCAN LPAREN RPAREN
    (93) unary_expression -> . postfix_expression
    (94) unary_expression -> . INC unary_expression
    (95) unary_expression -> . DEC unary_expression
    (96) unary_expression -> . SUB_OP add_expression
    (97) unary_expression -> . NOT logical_or_expression
    (74) logical_or_expression -> . logical_and_expression
    (75) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (98) postfix_expression -> . primary_expression
    (99) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (100) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (101) postfix_expression -> . postfix_expression LPAREN RPAREN
    (102) postfix_expression -> . postfix_expression INC
    (103) postfix_expression -> . postfix_expression DEC
    (76) logical_and_expression -> . equality_expression
    (77) logical_and_expression -> . logical_and_expression AND equality_expression
    (104) primary_expression -> . identifier
    (105) primary_expression -> . constant
    (106) primary_expression -> . LPAREN expression RPAREN
    (78) equality_expression -> . relational_expression
    (79) equality_expression -> . equality_expression EQ relational_expression
    (80) equality_expression -> . equality_expression NEQ relational_expression
    (109) identifier -> . FLOAT_ID
    (110) identifier -> . INT_ID
    (111) identifier -> . CHAR_ID
    (112) identifier -> . STR_ID
    (113) identifier -> . VOID_ID
    (114) constant -> . FLOAT_LIT
    (115) constant -> . INT_LIT
    (116) constant -> . CHAR_LIT
    (117) constant -> . STR_LIT
    (81) relational_expression -> . add_expression
    (82) relational_expression -> . relational_expression LT add_expression
    (83) relational_expression -> . relational_expression GT add_expression
    (84) relational_expression -> . relational_expression LE add_expression
    (85) relational_expression -> . relational_expression GE add_expression
    (86) add_expression -> . mult_expression
    (87) add_expression -> . add_expression ADD_OP mult_expression
    (88) add_expression -> . add_expression SUB_OP mult_expression
    (89) mult_expression -> . unary_expression
    (90) mult_expression -> . mult_expression MULT_OP unary_expression
    (91) mult_expression -> . mult_expression DIV_OP unary_expression
    (92) mult_expression -> . mult_expression MOD_OP unary_expression

    CASE            shift and go to state 112
    DEFAULT         shift and go to state 110
    LBRACE          shift and go to state 55
    IF              shift and go to state 122
    SWITCH          shift and go to state 113
    WHILE           shift and go to state 111
    FOR             shift and go to state 105
    DO              shift and go to state 119
    CONTINUE        shift and go to state 107
    BREAK           shift and go to state 117
    RETURN          shift and go to state 102
    SEMI            reduce using rule 118 (empty -> .)
    PRINT           shift and go to state 37
    PRINTLN         shift and go to state 38
    SCAN            shift and go to state 4
    INC             shift and go to state 36
    DEC             shift and go to state 7
    SUB_OP          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 2
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 30
    CHAR_ID         shift and go to state 13
    STR_ID          shift and go to state 19
    VOID_ID         shift and go to state 23
    FLOAT_LIT       shift and go to state 31
    INT_LIT         shift and go to state 33
    CHAR_LIT        shift and go to state 12
    STR_LIT         shift and go to state 9

    expression_statement           shift and go to state 94
    constant                       shift and go to state 1
    unary_expression               shift and go to state 3
    iteration_statement            shift and go to state 96
    scan_expression                shift and go to state 10
    compound_statement             shift and go to state 104
    selection_statement            shift and go to state 120
    postfix_expression             shift and go to state 15
    relational_expression          shift and go to state 17
    statement                      shift and go to state 162
    logical_or_expression          shift and go to state 21
    empty                          shift and go to state 118
    assignment_expression          shift and go to state 39
    print_expression               shift and go to state 40
    expression_opt                 shift and go to state 123
    primary_expression             shift and go to state 26
    logical_and_expression         shift and go to state 8
    add_expression                 shift and go to state 28
    equality_expression            shift and go to state 29
    jump_statement                 shift and go to state 116
    labeled_statement              shift and go to state 103
    mult_expression                shift and go to state 25
    identifier                     shift and go to state 35
    expression                     shift and go to state 108

state 120

    (32) statement -> selection_statement .

    CASE            reduce using rule 32 (statement -> selection_statement .)
    DEFAULT         reduce using rule 32 (statement -> selection_statement .)
    LBRACE          reduce using rule 32 (statement -> selection_statement .)
    IF              reduce using rule 32 (statement -> selection_statement .)
    SWITCH          reduce using rule 32 (statement -> selection_statement .)
    WHILE           reduce using rule 32 (statement -> selection_statement .)
    FOR             reduce using rule 32 (statement -> selection_statement .)
    DO              reduce using rule 32 (statement -> selection_statement .)
    CONTINUE        reduce using rule 32 (statement -> selection_statement .)
    BREAK           reduce using rule 32 (statement -> selection_statement .)
    RETURN          reduce using rule 32 (statement -> selection_statement .)
    PRINT           reduce using rule 32 (statement -> selection_statement .)
    PRINTLN         reduce using rule 32 (statement -> selection_statement .)
    VAR             reduce using rule 32 (statement -> selection_statement .)
    LPAREN          reduce using rule 32 (statement -> selection_statement .)
    SCAN            reduce using rule 32 (statement -> selection_statement .)
    INC             reduce using rule 32 (statement -> selection_statement .)
    DEC             reduce using rule 32 (statement -> selection_statement .)
    SUB_OP          reduce using rule 32 (statement -> selection_statement .)
    NOT             reduce using rule 32 (statement -> selection_statement .)
    FLOAT_ID        reduce using rule 32 (statement -> selection_statement .)
    INT_ID          reduce using rule 32 (statement -> selection_statement .)
    CHAR_ID         reduce using rule 32 (statement -> selection_statement .)
    STR_ID          reduce using rule 32 (statement -> selection_statement .)
    VOID_ID         reduce using rule 32 (statement -> selection_statement .)
    FLOAT_LIT       reduce using rule 32 (statement -> selection_statement .)
    INT_LIT         reduce using rule 32 (statement -> selection_statement .)
    CHAR_LIT        reduce using rule 32 (statement -> selection_statement .)
    STR_LIT         reduce using rule 32 (statement -> selection_statement .)
    SEMI            reduce using rule 32 (statement -> selection_statement .)
    RBRACE          reduce using rule 32 (statement -> selection_statement .)
    ELSE            reduce using rule 32 (statement -> selection_statement .)


state 121

    (40) mix_list -> statement_list .
    (42) mix_list -> statement_list . mix_list
    (45) statement_list -> statement_list . statement
    (40) mix_list -> . statement_list
    (41) mix_list -> . declaration_list
    (42) mix_list -> . statement_list mix_list
    (43) mix_list -> . declaration_list mix_list
    (29) statement -> . labeled_statement
    (30) statement -> . expression_statement
    (31) statement -> . compound_statement
    (32) statement -> . selection_statement
    (33) statement -> . iteration_statement
    (34) statement -> . jump_statement
    (44) statement_list -> . statement
    (45) statement_list -> . statement_list statement
    (9) declaration_list -> . declaration
    (10) declaration_list -> . declaration_list declaration
    (35) labeled_statement -> . CASE constant_expression COLON statement
    (36) labeled_statement -> . DEFAULT COLON statement
    (37) expression_statement -> . expression_opt SEMI
    (38) compound_statement -> . LBRACE mix_list RBRACE
    (39) compound_statement -> . LBRACE RBRACE
    (46) selection_statement -> . IF LPAREN expression RPAREN statement
    (47) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (48) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (49) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (50) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (51) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (52) jump_statement -> . CONTINUE SEMI
    (53) jump_statement -> . BREAK SEMI
    (54) jump_statement -> . RETURN expression_opt SEMI
    (8) declaration -> . init_declarator_list SEMI
    (55) expression_opt -> . empty
    (56) expression_opt -> . expression
    (11) init_declarator_list -> . init_declarator
    (12) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (118) empty -> .
    (57) expression -> . print_expression
    (58) expression -> . expression COMMA print_expression
    (13) init_declarator -> . declarator
    (14) init_declarator -> . declarator ASSIGN_OP initializer
    (59) print_expression -> . assignment_expression
    (60) print_expression -> . PRINT LPAREN scan_expression RPAREN
    (61) print_expression -> . PRINTLN LPAREN scan_expression RPAREN
    (15) declarator -> . VAR identifier
    (16) declarator -> . LPAREN declarator RPAREN
    (17) declarator -> . declarator LBRACKET constant_expression_opt RBRACKET
    (62) assignment_expression -> . scan_expression
    (63) assignment_expression -> . unary_expression ASSIGN_OP assignment_expression
    (64) assignment_expression -> . unary_expression ADD_ASSIGN assignment_expression
    (65) assignment_expression -> . unary_expression MIN_ASSIGN assignment_expression
    (66) assignment_expression -> . unary_expression MUL_ASSIGN assignment_expression
    (67) assignment_expression -> . unary_expression DIV_ASSIGN assignment_expression
    (68) assignment_expression -> . unary_expression MOD_ASSIGN assignment_expression
    (69) scan_expression -> . logical_or_expression
    (70) scan_expression -> . SCAN LPAREN RPAREN
    (93) unary_expression -> . postfix_expression
    (94) unary_expression -> . INC unary_expression
    (95) unary_expression -> . DEC unary_expression
    (96) unary_expression -> . SUB_OP add_expression
    (97) unary_expression -> . NOT logical_or_expression
    (74) logical_or_expression -> . logical_and_expression
    (75) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (98) postfix_expression -> . primary_expression
    (99) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (100) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (101) postfix_expression -> . postfix_expression LPAREN RPAREN
    (102) postfix_expression -> . postfix_expression INC
    (103) postfix_expression -> . postfix_expression DEC
    (76) logical_and_expression -> . equality_expression
    (77) logical_and_expression -> . logical_and_expression AND equality_expression
    (104) primary_expression -> . identifier
    (105) primary_expression -> . constant
    (106) primary_expression -> . LPAREN expression RPAREN
    (78) equality_expression -> . relational_expression
    (79) equality_expression -> . equality_expression EQ relational_expression
    (80) equality_expression -> . equality_expression NEQ relational_expression
    (109) identifier -> . FLOAT_ID
    (110) identifier -> . INT_ID
    (111) identifier -> . CHAR_ID
    (112) identifier -> . STR_ID
    (113) identifier -> . VOID_ID
    (114) constant -> . FLOAT_LIT
    (115) constant -> . INT_LIT
    (116) constant -> . CHAR_LIT
    (117) constant -> . STR_LIT
    (81) relational_expression -> . add_expression
    (82) relational_expression -> . relational_expression LT add_expression
    (83) relational_expression -> . relational_expression GT add_expression
    (84) relational_expression -> . relational_expression LE add_expression
    (85) relational_expression -> . relational_expression GE add_expression
    (86) add_expression -> . mult_expression
    (87) add_expression -> . add_expression ADD_OP mult_expression
    (88) add_expression -> . add_expression SUB_OP mult_expression
    (89) mult_expression -> . unary_expression
    (90) mult_expression -> . mult_expression MULT_OP unary_expression
    (91) mult_expression -> . mult_expression DIV_OP unary_expression
    (92) mult_expression -> . mult_expression MOD_OP unary_expression

    RBRACE          reduce using rule 40 (mix_list -> statement_list .)
    CASE            shift and go to state 112
    DEFAULT         shift and go to state 110
    LBRACE          shift and go to state 55
    IF              shift and go to state 122
    SWITCH          shift and go to state 113
    WHILE           shift and go to state 111
    FOR             shift and go to state 105
    DO              shift and go to state 119
    CONTINUE        shift and go to state 107
    BREAK           shift and go to state 117
    RETURN          shift and go to state 102
    SEMI            reduce using rule 118 (empty -> .)
    PRINT           shift and go to state 37
    PRINTLN         shift and go to state 38
    VAR             shift and go to state 98
    LPAREN          shift and go to state 109
    SCAN            shift and go to state 4
    INC             shift and go to state 36
    DEC             shift and go to state 7
    SUB_OP          shift and go to state 32
    NOT             shift and go to state 34
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 30
    CHAR_ID         shift and go to state 13
    STR_ID          shift and go to state 19
    VOID_ID         shift and go to state 23
    FLOAT_LIT       shift and go to state 31
    INT_LIT         shift and go to state 33
    CHAR_LIT        shift and go to state 12
    STR_LIT         shift and go to state 9

    expression_statement           shift and go to state 94
    constant                       shift and go to state 1
    unary_expression               shift and go to state 3
    iteration_statement            shift and go to state 96
    scan_expression                shift and go to state 10
    compound_statement             shift and go to state 104
    selection_statement            shift and go to state 120
    postfix_expression             shift and go to state 15
    relational_expression          shift and go to state 17
    statement                      shift and go to state 164
    logical_or_expression          shift and go to state 21
    empty                          shift and go to state 118
    assignment_expression          shift and go to state 39
    declarator                     shift and go to state 100
    print_expression               shift and go to state 40
    mult_expression                shift and go to state 25
    expression_opt                 shift and go to state 123
    primary_expression             shift and go to state 26
    declaration                    shift and go to state 115
    logical_and_expression         shift and go to state 8
    init_declarator_list           shift and go to state 95
    add_expression                 shift and go to state 28
    equality_expression            shift and go to state 29
    jump_statement                 shift and go to state 116
    labeled_statement              shift and go to state 103
    declaration_list               shift and go to state 99
    init_declarator                shift and go to state 106
    statement_list                 shift and go to state 121
    mix_list                       shift and go to state 163
    identifier                     shift and go to state 35
    expression                     shift and go to state 108

state 122

    (46) selection_statement -> IF . LPAREN expression RPAREN statement
    (47) selection_statement -> IF . LPAREN expression RPAREN statement ELSE statement

    LPAREN          shift and go to state 165


state 123

    (37) expression_statement -> expression_opt . SEMI

    SEMI            shift and go to state 166


state 124

    (99) postfix_expression -> postfix_expression LBRACKET expression . RBRACKET
    (58) expression -> expression . COMMA print_expression

    RBRACKET        shift and go to state 167
    COMMA           shift and go to state 82


state 125

    (101) postfix_expression -> postfix_expression LPAREN RPAREN .

    LBRACKET        reduce using rule 101 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LPAREN          reduce using rule 101 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    INC             reduce using rule 101 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DEC             reduce using rule 101 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ASSIGN_OP       reduce using rule 101 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ADD_ASSIGN      reduce using rule 101 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MIN_ASSIGN      reduce using rule 101 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MUL_ASSIGN      reduce using rule 101 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIV_ASSIGN      reduce using rule 101 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MOD_ASSIGN      reduce using rule 101 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MULT_OP         reduce using rule 101 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIV_OP          reduce using rule 101 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MOD_OP          reduce using rule 101 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ADD_OP          reduce using rule 101 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    SUB_OP          reduce using rule 101 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LT              reduce using rule 101 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GT              reduce using rule 101 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LE              reduce using rule 101 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GE              reduce using rule 101 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQ              reduce using rule 101 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    NEQ             reduce using rule 101 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    OR              reduce using rule 101 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    AND             reduce using rule 101 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    SCAN            reduce using rule 101 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    NOT             reduce using rule 101 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    VAR             reduce using rule 101 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    FLOAT_ID        reduce using rule 101 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    INT_ID          reduce using rule 101 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    CHAR_ID         reduce using rule 101 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    STR_ID          reduce using rule 101 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    VOID_ID         reduce using rule 101 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    FLOAT_LIT       reduce using rule 101 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    INT_LIT         reduce using rule 101 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    CHAR_LIT        reduce using rule 101 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    STR_LIT         reduce using rule 101 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MAIN            reduce using rule 101 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RPAREN          reduce using rule 101 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    COMMA           reduce using rule 101 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    $end            reduce using rule 101 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    SEMI            reduce using rule 101 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RBRACKET        reduce using rule 101 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RBRACE          reduce using rule 101 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    COLON           reduce using rule 101 (postfix_expression -> postfix_expression LPAREN RPAREN .)


state 126

    (107) argument_expression_list -> assignment_expression .

    RPAREN          reduce using rule 107 (argument_expression_list -> assignment_expression .)
    COMMA           reduce using rule 107 (argument_expression_list -> assignment_expression .)


state 127

    (100) postfix_expression -> postfix_expression LPAREN argument_expression_list . RPAREN
    (108) argument_expression_list -> argument_expression_list . COMMA assignment_expression

    RPAREN          shift and go to state 168
    COMMA           shift and go to state 169


state 128

    (83) relational_expression -> relational_expression GT add_expression .
    (87) add_expression -> add_expression . ADD_OP mult_expression
    (88) add_expression -> add_expression . SUB_OP mult_expression

  ! shift/reduce conflict for ADD_OP resolved as shift
  ! shift/reduce conflict for SUB_OP resolved as shift
    LT              reduce using rule 83 (relational_expression -> relational_expression GT add_expression .)
    GT              reduce using rule 83 (relational_expression -> relational_expression GT add_expression .)
    LE              reduce using rule 83 (relational_expression -> relational_expression GT add_expression .)
    GE              reduce using rule 83 (relational_expression -> relational_expression GT add_expression .)
    EQ              reduce using rule 83 (relational_expression -> relational_expression GT add_expression .)
    NEQ             reduce using rule 83 (relational_expression -> relational_expression GT add_expression .)
    OR              reduce using rule 83 (relational_expression -> relational_expression GT add_expression .)
    AND             reduce using rule 83 (relational_expression -> relational_expression GT add_expression .)
    RPAREN          reduce using rule 83 (relational_expression -> relational_expression GT add_expression .)
    COMMA           reduce using rule 83 (relational_expression -> relational_expression GT add_expression .)
    SCAN            reduce using rule 83 (relational_expression -> relational_expression GT add_expression .)
    INC             reduce using rule 83 (relational_expression -> relational_expression GT add_expression .)
    DEC             reduce using rule 83 (relational_expression -> relational_expression GT add_expression .)
    NOT             reduce using rule 83 (relational_expression -> relational_expression GT add_expression .)
    VAR             reduce using rule 83 (relational_expression -> relational_expression GT add_expression .)
    LPAREN          reduce using rule 83 (relational_expression -> relational_expression GT add_expression .)
    FLOAT_ID        reduce using rule 83 (relational_expression -> relational_expression GT add_expression .)
    INT_ID          reduce using rule 83 (relational_expression -> relational_expression GT add_expression .)
    CHAR_ID         reduce using rule 83 (relational_expression -> relational_expression GT add_expression .)
    STR_ID          reduce using rule 83 (relational_expression -> relational_expression GT add_expression .)
    VOID_ID         reduce using rule 83 (relational_expression -> relational_expression GT add_expression .)
    FLOAT_LIT       reduce using rule 83 (relational_expression -> relational_expression GT add_expression .)
    INT_LIT         reduce using rule 83 (relational_expression -> relational_expression GT add_expression .)
    CHAR_LIT        reduce using rule 83 (relational_expression -> relational_expression GT add_expression .)
    STR_LIT         reduce using rule 83 (relational_expression -> relational_expression GT add_expression .)
    MAIN            reduce using rule 83 (relational_expression -> relational_expression GT add_expression .)
    $end            reduce using rule 83 (relational_expression -> relational_expression GT add_expression .)
    SEMI            reduce using rule 83 (relational_expression -> relational_expression GT add_expression .)
    RBRACKET        reduce using rule 83 (relational_expression -> relational_expression GT add_expression .)
    RBRACE          reduce using rule 83 (relational_expression -> relational_expression GT add_expression .)
    ASSIGN_OP       reduce using rule 83 (relational_expression -> relational_expression GT add_expression .)
    ADD_ASSIGN      reduce using rule 83 (relational_expression -> relational_expression GT add_expression .)
    MIN_ASSIGN      reduce using rule 83 (relational_expression -> relational_expression GT add_expression .)
    MUL_ASSIGN      reduce using rule 83 (relational_expression -> relational_expression GT add_expression .)
    DIV_ASSIGN      reduce using rule 83 (relational_expression -> relational_expression GT add_expression .)
    MOD_ASSIGN      reduce using rule 83 (relational_expression -> relational_expression GT add_expression .)
    MULT_OP         reduce using rule 83 (relational_expression -> relational_expression GT add_expression .)
    DIV_OP          reduce using rule 83 (relational_expression -> relational_expression GT add_expression .)
    MOD_OP          reduce using rule 83 (relational_expression -> relational_expression GT add_expression .)
    COLON           reduce using rule 83 (relational_expression -> relational_expression GT add_expression .)
    ADD_OP          shift and go to state 72
    SUB_OP          shift and go to state 71

  ! SUB_OP          [ reduce using rule 83 (relational_expression -> relational_expression GT add_expression .) ]
  ! ADD_OP          [ reduce using rule 83 (relational_expression -> relational_expression GT add_expression .) ]


state 129

    (82) relational_expression -> relational_expression LT add_expression .
    (87) add_expression -> add_expression . ADD_OP mult_expression
    (88) add_expression -> add_expression . SUB_OP mult_expression

  ! shift/reduce conflict for ADD_OP resolved as shift
  ! shift/reduce conflict for SUB_OP resolved as shift
    LT              reduce using rule 82 (relational_expression -> relational_expression LT add_expression .)
    GT              reduce using rule 82 (relational_expression -> relational_expression LT add_expression .)
    LE              reduce using rule 82 (relational_expression -> relational_expression LT add_expression .)
    GE              reduce using rule 82 (relational_expression -> relational_expression LT add_expression .)
    EQ              reduce using rule 82 (relational_expression -> relational_expression LT add_expression .)
    NEQ             reduce using rule 82 (relational_expression -> relational_expression LT add_expression .)
    OR              reduce using rule 82 (relational_expression -> relational_expression LT add_expression .)
    AND             reduce using rule 82 (relational_expression -> relational_expression LT add_expression .)
    RPAREN          reduce using rule 82 (relational_expression -> relational_expression LT add_expression .)
    COMMA           reduce using rule 82 (relational_expression -> relational_expression LT add_expression .)
    SCAN            reduce using rule 82 (relational_expression -> relational_expression LT add_expression .)
    INC             reduce using rule 82 (relational_expression -> relational_expression LT add_expression .)
    DEC             reduce using rule 82 (relational_expression -> relational_expression LT add_expression .)
    NOT             reduce using rule 82 (relational_expression -> relational_expression LT add_expression .)
    VAR             reduce using rule 82 (relational_expression -> relational_expression LT add_expression .)
    LPAREN          reduce using rule 82 (relational_expression -> relational_expression LT add_expression .)
    FLOAT_ID        reduce using rule 82 (relational_expression -> relational_expression LT add_expression .)
    INT_ID          reduce using rule 82 (relational_expression -> relational_expression LT add_expression .)
    CHAR_ID         reduce using rule 82 (relational_expression -> relational_expression LT add_expression .)
    STR_ID          reduce using rule 82 (relational_expression -> relational_expression LT add_expression .)
    VOID_ID         reduce using rule 82 (relational_expression -> relational_expression LT add_expression .)
    FLOAT_LIT       reduce using rule 82 (relational_expression -> relational_expression LT add_expression .)
    INT_LIT         reduce using rule 82 (relational_expression -> relational_expression LT add_expression .)
    CHAR_LIT        reduce using rule 82 (relational_expression -> relational_expression LT add_expression .)
    STR_LIT         reduce using rule 82 (relational_expression -> relational_expression LT add_expression .)
    MAIN            reduce using rule 82 (relational_expression -> relational_expression LT add_expression .)
    $end            reduce using rule 82 (relational_expression -> relational_expression LT add_expression .)
    SEMI            reduce using rule 82 (relational_expression -> relational_expression LT add_expression .)
    RBRACKET        reduce using rule 82 (relational_expression -> relational_expression LT add_expression .)
    RBRACE          reduce using rule 82 (relational_expression -> relational_expression LT add_expression .)
    ASSIGN_OP       reduce using rule 82 (relational_expression -> relational_expression LT add_expression .)
    ADD_ASSIGN      reduce using rule 82 (relational_expression -> relational_expression LT add_expression .)
    MIN_ASSIGN      reduce using rule 82 (relational_expression -> relational_expression LT add_expression .)
    MUL_ASSIGN      reduce using rule 82 (relational_expression -> relational_expression LT add_expression .)
    DIV_ASSIGN      reduce using rule 82 (relational_expression -> relational_expression LT add_expression .)
    MOD_ASSIGN      reduce using rule 82 (relational_expression -> relational_expression LT add_expression .)
    MULT_OP         reduce using rule 82 (relational_expression -> relational_expression LT add_expression .)
    DIV_OP          reduce using rule 82 (relational_expression -> relational_expression LT add_expression .)
    MOD_OP          reduce using rule 82 (relational_expression -> relational_expression LT add_expression .)
    COLON           reduce using rule 82 (relational_expression -> relational_expression LT add_expression .)
    ADD_OP          shift and go to state 72
    SUB_OP          shift and go to state 71

  ! SUB_OP          [ reduce using rule 82 (relational_expression -> relational_expression LT add_expression .) ]
  ! ADD_OP          [ reduce using rule 82 (relational_expression -> relational_expression LT add_expression .) ]


state 130

    (85) relational_expression -> relational_expression GE add_expression .
    (87) add_expression -> add_expression . ADD_OP mult_expression
    (88) add_expression -> add_expression . SUB_OP mult_expression

  ! shift/reduce conflict for ADD_OP resolved as shift
  ! shift/reduce conflict for SUB_OP resolved as shift
    LT              reduce using rule 85 (relational_expression -> relational_expression GE add_expression .)
    GT              reduce using rule 85 (relational_expression -> relational_expression GE add_expression .)
    LE              reduce using rule 85 (relational_expression -> relational_expression GE add_expression .)
    GE              reduce using rule 85 (relational_expression -> relational_expression GE add_expression .)
    EQ              reduce using rule 85 (relational_expression -> relational_expression GE add_expression .)
    NEQ             reduce using rule 85 (relational_expression -> relational_expression GE add_expression .)
    OR              reduce using rule 85 (relational_expression -> relational_expression GE add_expression .)
    AND             reduce using rule 85 (relational_expression -> relational_expression GE add_expression .)
    RPAREN          reduce using rule 85 (relational_expression -> relational_expression GE add_expression .)
    COMMA           reduce using rule 85 (relational_expression -> relational_expression GE add_expression .)
    SCAN            reduce using rule 85 (relational_expression -> relational_expression GE add_expression .)
    INC             reduce using rule 85 (relational_expression -> relational_expression GE add_expression .)
    DEC             reduce using rule 85 (relational_expression -> relational_expression GE add_expression .)
    NOT             reduce using rule 85 (relational_expression -> relational_expression GE add_expression .)
    VAR             reduce using rule 85 (relational_expression -> relational_expression GE add_expression .)
    LPAREN          reduce using rule 85 (relational_expression -> relational_expression GE add_expression .)
    FLOAT_ID        reduce using rule 85 (relational_expression -> relational_expression GE add_expression .)
    INT_ID          reduce using rule 85 (relational_expression -> relational_expression GE add_expression .)
    CHAR_ID         reduce using rule 85 (relational_expression -> relational_expression GE add_expression .)
    STR_ID          reduce using rule 85 (relational_expression -> relational_expression GE add_expression .)
    VOID_ID         reduce using rule 85 (relational_expression -> relational_expression GE add_expression .)
    FLOAT_LIT       reduce using rule 85 (relational_expression -> relational_expression GE add_expression .)
    INT_LIT         reduce using rule 85 (relational_expression -> relational_expression GE add_expression .)
    CHAR_LIT        reduce using rule 85 (relational_expression -> relational_expression GE add_expression .)
    STR_LIT         reduce using rule 85 (relational_expression -> relational_expression GE add_expression .)
    MAIN            reduce using rule 85 (relational_expression -> relational_expression GE add_expression .)
    $end            reduce using rule 85 (relational_expression -> relational_expression GE add_expression .)
    SEMI            reduce using rule 85 (relational_expression -> relational_expression GE add_expression .)
    RBRACKET        reduce using rule 85 (relational_expression -> relational_expression GE add_expression .)
    RBRACE          reduce using rule 85 (relational_expression -> relational_expression GE add_expression .)
    ASSIGN_OP       reduce using rule 85 (relational_expression -> relational_expression GE add_expression .)
    ADD_ASSIGN      reduce using rule 85 (relational_expression -> relational_expression GE add_expression .)
    MIN_ASSIGN      reduce using rule 85 (relational_expression -> relational_expression GE add_expression .)
    MUL_ASSIGN      reduce using rule 85 (relational_expression -> relational_expression GE add_expression .)
    DIV_ASSIGN      reduce using rule 85 (relational_expression -> relational_expression GE add_expression .)
    MOD_ASSIGN      reduce using rule 85 (relational_expression -> relational_expression GE add_expression .)
    MULT_OP         reduce using rule 85 (relational_expression -> relational_expression GE add_expression .)
    DIV_OP          reduce using rule 85 (relational_expression -> relational_expression GE add_expression .)
    MOD_OP          reduce using rule 85 (relational_expression -> relational_expression GE add_expression .)
    COLON           reduce using rule 85 (relational_expression -> relational_expression GE add_expression .)
    ADD_OP          shift and go to state 72
    SUB_OP          shift and go to state 71

  ! SUB_OP          [ reduce using rule 85 (relational_expression -> relational_expression GE add_expression .) ]
  ! ADD_OP          [ reduce using rule 85 (relational_expression -> relational_expression GE add_expression .) ]


state 131

    (84) relational_expression -> relational_expression LE add_expression .
    (87) add_expression -> add_expression . ADD_OP mult_expression
    (88) add_expression -> add_expression . SUB_OP mult_expression

  ! shift/reduce conflict for ADD_OP resolved as shift
  ! shift/reduce conflict for SUB_OP resolved as shift
    LT              reduce using rule 84 (relational_expression -> relational_expression LE add_expression .)
    GT              reduce using rule 84 (relational_expression -> relational_expression LE add_expression .)
    LE              reduce using rule 84 (relational_expression -> relational_expression LE add_expression .)
    GE              reduce using rule 84 (relational_expression -> relational_expression LE add_expression .)
    EQ              reduce using rule 84 (relational_expression -> relational_expression LE add_expression .)
    NEQ             reduce using rule 84 (relational_expression -> relational_expression LE add_expression .)
    OR              reduce using rule 84 (relational_expression -> relational_expression LE add_expression .)
    AND             reduce using rule 84 (relational_expression -> relational_expression LE add_expression .)
    RPAREN          reduce using rule 84 (relational_expression -> relational_expression LE add_expression .)
    COMMA           reduce using rule 84 (relational_expression -> relational_expression LE add_expression .)
    SCAN            reduce using rule 84 (relational_expression -> relational_expression LE add_expression .)
    INC             reduce using rule 84 (relational_expression -> relational_expression LE add_expression .)
    DEC             reduce using rule 84 (relational_expression -> relational_expression LE add_expression .)
    NOT             reduce using rule 84 (relational_expression -> relational_expression LE add_expression .)
    VAR             reduce using rule 84 (relational_expression -> relational_expression LE add_expression .)
    LPAREN          reduce using rule 84 (relational_expression -> relational_expression LE add_expression .)
    FLOAT_ID        reduce using rule 84 (relational_expression -> relational_expression LE add_expression .)
    INT_ID          reduce using rule 84 (relational_expression -> relational_expression LE add_expression .)
    CHAR_ID         reduce using rule 84 (relational_expression -> relational_expression LE add_expression .)
    STR_ID          reduce using rule 84 (relational_expression -> relational_expression LE add_expression .)
    VOID_ID         reduce using rule 84 (relational_expression -> relational_expression LE add_expression .)
    FLOAT_LIT       reduce using rule 84 (relational_expression -> relational_expression LE add_expression .)
    INT_LIT         reduce using rule 84 (relational_expression -> relational_expression LE add_expression .)
    CHAR_LIT        reduce using rule 84 (relational_expression -> relational_expression LE add_expression .)
    STR_LIT         reduce using rule 84 (relational_expression -> relational_expression LE add_expression .)
    MAIN            reduce using rule 84 (relational_expression -> relational_expression LE add_expression .)
    $end            reduce using rule 84 (relational_expression -> relational_expression LE add_expression .)
    SEMI            reduce using rule 84 (relational_expression -> relational_expression LE add_expression .)
    RBRACKET        reduce using rule 84 (relational_expression -> relational_expression LE add_expression .)
    RBRACE          reduce using rule 84 (relational_expression -> relational_expression LE add_expression .)
    ASSIGN_OP       reduce using rule 84 (relational_expression -> relational_expression LE add_expression .)
    ADD_ASSIGN      reduce using rule 84 (relational_expression -> relational_expression LE add_expression .)
    MIN_ASSIGN      reduce using rule 84 (relational_expression -> relational_expression LE add_expression .)
    MUL_ASSIGN      reduce using rule 84 (relational_expression -> relational_expression LE add_expression .)
    DIV_ASSIGN      reduce using rule 84 (relational_expression -> relational_expression LE add_expression .)
    MOD_ASSIGN      reduce using rule 84 (relational_expression -> relational_expression LE add_expression .)
    MULT_OP         reduce using rule 84 (relational_expression -> relational_expression LE add_expression .)
    DIV_OP          reduce using rule 84 (relational_expression -> relational_expression LE add_expression .)
    MOD_OP          reduce using rule 84 (relational_expression -> relational_expression LE add_expression .)
    COLON           reduce using rule 84 (relational_expression -> relational_expression LE add_expression .)
    ADD_OP          shift and go to state 72
    SUB_OP          shift and go to state 71

  ! SUB_OP          [ reduce using rule 84 (relational_expression -> relational_expression LE add_expression .) ]
  ! ADD_OP          [ reduce using rule 84 (relational_expression -> relational_expression LE add_expression .) ]


state 132

    (90) mult_expression -> mult_expression MULT_OP unary_expression .

    MULT_OP         reduce using rule 90 (mult_expression -> mult_expression MULT_OP unary_expression .)
    DIV_OP          reduce using rule 90 (mult_expression -> mult_expression MULT_OP unary_expression .)
    MOD_OP          reduce using rule 90 (mult_expression -> mult_expression MULT_OP unary_expression .)
    ADD_OP          reduce using rule 90 (mult_expression -> mult_expression MULT_OP unary_expression .)
    SUB_OP          reduce using rule 90 (mult_expression -> mult_expression MULT_OP unary_expression .)
    LT              reduce using rule 90 (mult_expression -> mult_expression MULT_OP unary_expression .)
    GT              reduce using rule 90 (mult_expression -> mult_expression MULT_OP unary_expression .)
    LE              reduce using rule 90 (mult_expression -> mult_expression MULT_OP unary_expression .)
    GE              reduce using rule 90 (mult_expression -> mult_expression MULT_OP unary_expression .)
    EQ              reduce using rule 90 (mult_expression -> mult_expression MULT_OP unary_expression .)
    NEQ             reduce using rule 90 (mult_expression -> mult_expression MULT_OP unary_expression .)
    OR              reduce using rule 90 (mult_expression -> mult_expression MULT_OP unary_expression .)
    AND             reduce using rule 90 (mult_expression -> mult_expression MULT_OP unary_expression .)
    RPAREN          reduce using rule 90 (mult_expression -> mult_expression MULT_OP unary_expression .)
    COMMA           reduce using rule 90 (mult_expression -> mult_expression MULT_OP unary_expression .)
    ASSIGN_OP       reduce using rule 90 (mult_expression -> mult_expression MULT_OP unary_expression .)
    ADD_ASSIGN      reduce using rule 90 (mult_expression -> mult_expression MULT_OP unary_expression .)
    MIN_ASSIGN      reduce using rule 90 (mult_expression -> mult_expression MULT_OP unary_expression .)
    MUL_ASSIGN      reduce using rule 90 (mult_expression -> mult_expression MULT_OP unary_expression .)
    DIV_ASSIGN      reduce using rule 90 (mult_expression -> mult_expression MULT_OP unary_expression .)
    MOD_ASSIGN      reduce using rule 90 (mult_expression -> mult_expression MULT_OP unary_expression .)
    SCAN            reduce using rule 90 (mult_expression -> mult_expression MULT_OP unary_expression .)
    INC             reduce using rule 90 (mult_expression -> mult_expression MULT_OP unary_expression .)
    DEC             reduce using rule 90 (mult_expression -> mult_expression MULT_OP unary_expression .)
    NOT             reduce using rule 90 (mult_expression -> mult_expression MULT_OP unary_expression .)
    VAR             reduce using rule 90 (mult_expression -> mult_expression MULT_OP unary_expression .)
    LPAREN          reduce using rule 90 (mult_expression -> mult_expression MULT_OP unary_expression .)
    FLOAT_ID        reduce using rule 90 (mult_expression -> mult_expression MULT_OP unary_expression .)
    INT_ID          reduce using rule 90 (mult_expression -> mult_expression MULT_OP unary_expression .)
    CHAR_ID         reduce using rule 90 (mult_expression -> mult_expression MULT_OP unary_expression .)
    STR_ID          reduce using rule 90 (mult_expression -> mult_expression MULT_OP unary_expression .)
    VOID_ID         reduce using rule 90 (mult_expression -> mult_expression MULT_OP unary_expression .)
    FLOAT_LIT       reduce using rule 90 (mult_expression -> mult_expression MULT_OP unary_expression .)
    INT_LIT         reduce using rule 90 (mult_expression -> mult_expression MULT_OP unary_expression .)
    CHAR_LIT        reduce using rule 90 (mult_expression -> mult_expression MULT_OP unary_expression .)
    STR_LIT         reduce using rule 90 (mult_expression -> mult_expression MULT_OP unary_expression .)
    MAIN            reduce using rule 90 (mult_expression -> mult_expression MULT_OP unary_expression .)
    $end            reduce using rule 90 (mult_expression -> mult_expression MULT_OP unary_expression .)
    SEMI            reduce using rule 90 (mult_expression -> mult_expression MULT_OP unary_expression .)
    RBRACKET        reduce using rule 90 (mult_expression -> mult_expression MULT_OP unary_expression .)
    RBRACE          reduce using rule 90 (mult_expression -> mult_expression MULT_OP unary_expression .)
    COLON           reduce using rule 90 (mult_expression -> mult_expression MULT_OP unary_expression .)


state 133

    (92) mult_expression -> mult_expression MOD_OP unary_expression .

    MULT_OP         reduce using rule 92 (mult_expression -> mult_expression MOD_OP unary_expression .)
    DIV_OP          reduce using rule 92 (mult_expression -> mult_expression MOD_OP unary_expression .)
    MOD_OP          reduce using rule 92 (mult_expression -> mult_expression MOD_OP unary_expression .)
    ADD_OP          reduce using rule 92 (mult_expression -> mult_expression MOD_OP unary_expression .)
    SUB_OP          reduce using rule 92 (mult_expression -> mult_expression MOD_OP unary_expression .)
    LT              reduce using rule 92 (mult_expression -> mult_expression MOD_OP unary_expression .)
    GT              reduce using rule 92 (mult_expression -> mult_expression MOD_OP unary_expression .)
    LE              reduce using rule 92 (mult_expression -> mult_expression MOD_OP unary_expression .)
    GE              reduce using rule 92 (mult_expression -> mult_expression MOD_OP unary_expression .)
    EQ              reduce using rule 92 (mult_expression -> mult_expression MOD_OP unary_expression .)
    NEQ             reduce using rule 92 (mult_expression -> mult_expression MOD_OP unary_expression .)
    OR              reduce using rule 92 (mult_expression -> mult_expression MOD_OP unary_expression .)
    AND             reduce using rule 92 (mult_expression -> mult_expression MOD_OP unary_expression .)
    RPAREN          reduce using rule 92 (mult_expression -> mult_expression MOD_OP unary_expression .)
    COMMA           reduce using rule 92 (mult_expression -> mult_expression MOD_OP unary_expression .)
    ASSIGN_OP       reduce using rule 92 (mult_expression -> mult_expression MOD_OP unary_expression .)
    ADD_ASSIGN      reduce using rule 92 (mult_expression -> mult_expression MOD_OP unary_expression .)
    MIN_ASSIGN      reduce using rule 92 (mult_expression -> mult_expression MOD_OP unary_expression .)
    MUL_ASSIGN      reduce using rule 92 (mult_expression -> mult_expression MOD_OP unary_expression .)
    DIV_ASSIGN      reduce using rule 92 (mult_expression -> mult_expression MOD_OP unary_expression .)
    MOD_ASSIGN      reduce using rule 92 (mult_expression -> mult_expression MOD_OP unary_expression .)
    SCAN            reduce using rule 92 (mult_expression -> mult_expression MOD_OP unary_expression .)
    INC             reduce using rule 92 (mult_expression -> mult_expression MOD_OP unary_expression .)
    DEC             reduce using rule 92 (mult_expression -> mult_expression MOD_OP unary_expression .)
    NOT             reduce using rule 92 (mult_expression -> mult_expression MOD_OP unary_expression .)
    VAR             reduce using rule 92 (mult_expression -> mult_expression MOD_OP unary_expression .)
    LPAREN          reduce using rule 92 (mult_expression -> mult_expression MOD_OP unary_expression .)
    FLOAT_ID        reduce using rule 92 (mult_expression -> mult_expression MOD_OP unary_expression .)
    INT_ID          reduce using rule 92 (mult_expression -> mult_expression MOD_OP unary_expression .)
    CHAR_ID         reduce using rule 92 (mult_expression -> mult_expression MOD_OP unary_expression .)
    STR_ID          reduce using rule 92 (mult_expression -> mult_expression MOD_OP unary_expression .)
    VOID_ID         reduce using rule 92 (mult_expression -> mult_expression MOD_OP unary_expression .)
    FLOAT_LIT       reduce using rule 92 (mult_expression -> mult_expression MOD_OP unary_expression .)
    INT_LIT         reduce using rule 92 (mult_expression -> mult_expression MOD_OP unary_expression .)
    CHAR_LIT        reduce using rule 92 (mult_expression -> mult_expression MOD_OP unary_expression .)
    STR_LIT         reduce using rule 92 (mult_expression -> mult_expression MOD_OP unary_expression .)
    MAIN            reduce using rule 92 (mult_expression -> mult_expression MOD_OP unary_expression .)
    $end            reduce using rule 92 (mult_expression -> mult_expression MOD_OP unary_expression .)
    SEMI            reduce using rule 92 (mult_expression -> mult_expression MOD_OP unary_expression .)
    RBRACKET        reduce using rule 92 (mult_expression -> mult_expression MOD_OP unary_expression .)
    RBRACE          reduce using rule 92 (mult_expression -> mult_expression MOD_OP unary_expression .)
    COLON           reduce using rule 92 (mult_expression -> mult_expression MOD_OP unary_expression .)


state 134

    (91) mult_expression -> mult_expression DIV_OP unary_expression .

    MULT_OP         reduce using rule 91 (mult_expression -> mult_expression DIV_OP unary_expression .)
    DIV_OP          reduce using rule 91 (mult_expression -> mult_expression DIV_OP unary_expression .)
    MOD_OP          reduce using rule 91 (mult_expression -> mult_expression DIV_OP unary_expression .)
    ADD_OP          reduce using rule 91 (mult_expression -> mult_expression DIV_OP unary_expression .)
    SUB_OP          reduce using rule 91 (mult_expression -> mult_expression DIV_OP unary_expression .)
    LT              reduce using rule 91 (mult_expression -> mult_expression DIV_OP unary_expression .)
    GT              reduce using rule 91 (mult_expression -> mult_expression DIV_OP unary_expression .)
    LE              reduce using rule 91 (mult_expression -> mult_expression DIV_OP unary_expression .)
    GE              reduce using rule 91 (mult_expression -> mult_expression DIV_OP unary_expression .)
    EQ              reduce using rule 91 (mult_expression -> mult_expression DIV_OP unary_expression .)
    NEQ             reduce using rule 91 (mult_expression -> mult_expression DIV_OP unary_expression .)
    OR              reduce using rule 91 (mult_expression -> mult_expression DIV_OP unary_expression .)
    AND             reduce using rule 91 (mult_expression -> mult_expression DIV_OP unary_expression .)
    RPAREN          reduce using rule 91 (mult_expression -> mult_expression DIV_OP unary_expression .)
    COMMA           reduce using rule 91 (mult_expression -> mult_expression DIV_OP unary_expression .)
    ASSIGN_OP       reduce using rule 91 (mult_expression -> mult_expression DIV_OP unary_expression .)
    ADD_ASSIGN      reduce using rule 91 (mult_expression -> mult_expression DIV_OP unary_expression .)
    MIN_ASSIGN      reduce using rule 91 (mult_expression -> mult_expression DIV_OP unary_expression .)
    MUL_ASSIGN      reduce using rule 91 (mult_expression -> mult_expression DIV_OP unary_expression .)
    DIV_ASSIGN      reduce using rule 91 (mult_expression -> mult_expression DIV_OP unary_expression .)
    MOD_ASSIGN      reduce using rule 91 (mult_expression -> mult_expression DIV_OP unary_expression .)
    SCAN            reduce using rule 91 (mult_expression -> mult_expression DIV_OP unary_expression .)
    INC             reduce using rule 91 (mult_expression -> mult_expression DIV_OP unary_expression .)
    DEC             reduce using rule 91 (mult_expression -> mult_expression DIV_OP unary_expression .)
    NOT             reduce using rule 91 (mult_expression -> mult_expression DIV_OP unary_expression .)
    VAR             reduce using rule 91 (mult_expression -> mult_expression DIV_OP unary_expression .)
    LPAREN          reduce using rule 91 (mult_expression -> mult_expression DIV_OP unary_expression .)
    FLOAT_ID        reduce using rule 91 (mult_expression -> mult_expression DIV_OP unary_expression .)
    INT_ID          reduce using rule 91 (mult_expression -> mult_expression DIV_OP unary_expression .)
    CHAR_ID         reduce using rule 91 (mult_expression -> mult_expression DIV_OP unary_expression .)
    STR_ID          reduce using rule 91 (mult_expression -> mult_expression DIV_OP unary_expression .)
    VOID_ID         reduce using rule 91 (mult_expression -> mult_expression DIV_OP unary_expression .)
    FLOAT_LIT       reduce using rule 91 (mult_expression -> mult_expression DIV_OP unary_expression .)
    INT_LIT         reduce using rule 91 (mult_expression -> mult_expression DIV_OP unary_expression .)
    CHAR_LIT        reduce using rule 91 (mult_expression -> mult_expression DIV_OP unary_expression .)
    STR_LIT         reduce using rule 91 (mult_expression -> mult_expression DIV_OP unary_expression .)
    MAIN            reduce using rule 91 (mult_expression -> mult_expression DIV_OP unary_expression .)
    $end            reduce using rule 91 (mult_expression -> mult_expression DIV_OP unary_expression .)
    SEMI            reduce using rule 91 (mult_expression -> mult_expression DIV_OP unary_expression .)
    RBRACKET        reduce using rule 91 (mult_expression -> mult_expression DIV_OP unary_expression .)
    RBRACE          reduce using rule 91 (mult_expression -> mult_expression DIV_OP unary_expression .)
    COLON           reduce using rule 91 (mult_expression -> mult_expression DIV_OP unary_expression .)


state 135

    (25) fxn_declaration -> VAR identifier LPAREN . fxn_prot_args RPAREN
    (26) fxn_declaration -> VAR identifier LPAREN . empty RPAREN
    (27) fxn_prot_args -> . identifier COMMA fxn_prot_args
    (28) fxn_prot_args -> . identifier
    (118) empty -> .
    (109) identifier -> . FLOAT_ID
    (110) identifier -> . INT_ID
    (111) identifier -> . CHAR_ID
    (112) identifier -> . STR_ID
    (113) identifier -> . VOID_ID

    RPAREN          reduce using rule 118 (empty -> .)
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 30
    CHAR_ID         shift and go to state 13
    STR_ID          shift and go to state 19
    VOID_ID         shift and go to state 23

    identifier                     shift and go to state 171
    fxn_prot_args                  shift and go to state 170
    empty                          shift and go to state 172

state 136

    (88) add_expression -> add_expression SUB_OP mult_expression .
    (90) mult_expression -> mult_expression . MULT_OP unary_expression
    (91) mult_expression -> mult_expression . DIV_OP unary_expression
    (92) mult_expression -> mult_expression . MOD_OP unary_expression

  ! shift/reduce conflict for MULT_OP resolved as shift
  ! shift/reduce conflict for DIV_OP resolved as shift
  ! shift/reduce conflict for MOD_OP resolved as shift
    ASSIGN_OP       reduce using rule 88 (add_expression -> add_expression SUB_OP mult_expression .)
    ADD_ASSIGN      reduce using rule 88 (add_expression -> add_expression SUB_OP mult_expression .)
    MIN_ASSIGN      reduce using rule 88 (add_expression -> add_expression SUB_OP mult_expression .)
    MUL_ASSIGN      reduce using rule 88 (add_expression -> add_expression SUB_OP mult_expression .)
    DIV_ASSIGN      reduce using rule 88 (add_expression -> add_expression SUB_OP mult_expression .)
    MOD_ASSIGN      reduce using rule 88 (add_expression -> add_expression SUB_OP mult_expression .)
    ADD_OP          reduce using rule 88 (add_expression -> add_expression SUB_OP mult_expression .)
    SUB_OP          reduce using rule 88 (add_expression -> add_expression SUB_OP mult_expression .)
    LT              reduce using rule 88 (add_expression -> add_expression SUB_OP mult_expression .)
    GT              reduce using rule 88 (add_expression -> add_expression SUB_OP mult_expression .)
    LE              reduce using rule 88 (add_expression -> add_expression SUB_OP mult_expression .)
    GE              reduce using rule 88 (add_expression -> add_expression SUB_OP mult_expression .)
    EQ              reduce using rule 88 (add_expression -> add_expression SUB_OP mult_expression .)
    NEQ             reduce using rule 88 (add_expression -> add_expression SUB_OP mult_expression .)
    OR              reduce using rule 88 (add_expression -> add_expression SUB_OP mult_expression .)
    AND             reduce using rule 88 (add_expression -> add_expression SUB_OP mult_expression .)
    SCAN            reduce using rule 88 (add_expression -> add_expression SUB_OP mult_expression .)
    INC             reduce using rule 88 (add_expression -> add_expression SUB_OP mult_expression .)
    DEC             reduce using rule 88 (add_expression -> add_expression SUB_OP mult_expression .)
    NOT             reduce using rule 88 (add_expression -> add_expression SUB_OP mult_expression .)
    VAR             reduce using rule 88 (add_expression -> add_expression SUB_OP mult_expression .)
    LPAREN          reduce using rule 88 (add_expression -> add_expression SUB_OP mult_expression .)
    FLOAT_ID        reduce using rule 88 (add_expression -> add_expression SUB_OP mult_expression .)
    INT_ID          reduce using rule 88 (add_expression -> add_expression SUB_OP mult_expression .)
    CHAR_ID         reduce using rule 88 (add_expression -> add_expression SUB_OP mult_expression .)
    STR_ID          reduce using rule 88 (add_expression -> add_expression SUB_OP mult_expression .)
    VOID_ID         reduce using rule 88 (add_expression -> add_expression SUB_OP mult_expression .)
    FLOAT_LIT       reduce using rule 88 (add_expression -> add_expression SUB_OP mult_expression .)
    INT_LIT         reduce using rule 88 (add_expression -> add_expression SUB_OP mult_expression .)
    CHAR_LIT        reduce using rule 88 (add_expression -> add_expression SUB_OP mult_expression .)
    STR_LIT         reduce using rule 88 (add_expression -> add_expression SUB_OP mult_expression .)
    MAIN            reduce using rule 88 (add_expression -> add_expression SUB_OP mult_expression .)
    RPAREN          reduce using rule 88 (add_expression -> add_expression SUB_OP mult_expression .)
    COMMA           reduce using rule 88 (add_expression -> add_expression SUB_OP mult_expression .)
    $end            reduce using rule 88 (add_expression -> add_expression SUB_OP mult_expression .)
    SEMI            reduce using rule 88 (add_expression -> add_expression SUB_OP mult_expression .)
    RBRACKET        reduce using rule 88 (add_expression -> add_expression SUB_OP mult_expression .)
    RBRACE          reduce using rule 88 (add_expression -> add_expression SUB_OP mult_expression .)
    COLON           reduce using rule 88 (add_expression -> add_expression SUB_OP mult_expression .)
    MULT_OP         shift and go to state 67
    DIV_OP          shift and go to state 69
    MOD_OP          shift and go to state 68

  ! MULT_OP         [ reduce using rule 88 (add_expression -> add_expression SUB_OP mult_expression .) ]
  ! DIV_OP          [ reduce using rule 88 (add_expression -> add_expression SUB_OP mult_expression .) ]
  ! MOD_OP          [ reduce using rule 88 (add_expression -> add_expression SUB_OP mult_expression .) ]


state 137

    (87) add_expression -> add_expression ADD_OP mult_expression .
    (90) mult_expression -> mult_expression . MULT_OP unary_expression
    (91) mult_expression -> mult_expression . DIV_OP unary_expression
    (92) mult_expression -> mult_expression . MOD_OP unary_expression

  ! shift/reduce conflict for MULT_OP resolved as shift
  ! shift/reduce conflict for DIV_OP resolved as shift
  ! shift/reduce conflict for MOD_OP resolved as shift
    ASSIGN_OP       reduce using rule 87 (add_expression -> add_expression ADD_OP mult_expression .)
    ADD_ASSIGN      reduce using rule 87 (add_expression -> add_expression ADD_OP mult_expression .)
    MIN_ASSIGN      reduce using rule 87 (add_expression -> add_expression ADD_OP mult_expression .)
    MUL_ASSIGN      reduce using rule 87 (add_expression -> add_expression ADD_OP mult_expression .)
    DIV_ASSIGN      reduce using rule 87 (add_expression -> add_expression ADD_OP mult_expression .)
    MOD_ASSIGN      reduce using rule 87 (add_expression -> add_expression ADD_OP mult_expression .)
    ADD_OP          reduce using rule 87 (add_expression -> add_expression ADD_OP mult_expression .)
    SUB_OP          reduce using rule 87 (add_expression -> add_expression ADD_OP mult_expression .)
    LT              reduce using rule 87 (add_expression -> add_expression ADD_OP mult_expression .)
    GT              reduce using rule 87 (add_expression -> add_expression ADD_OP mult_expression .)
    LE              reduce using rule 87 (add_expression -> add_expression ADD_OP mult_expression .)
    GE              reduce using rule 87 (add_expression -> add_expression ADD_OP mult_expression .)
    EQ              reduce using rule 87 (add_expression -> add_expression ADD_OP mult_expression .)
    NEQ             reduce using rule 87 (add_expression -> add_expression ADD_OP mult_expression .)
    OR              reduce using rule 87 (add_expression -> add_expression ADD_OP mult_expression .)
    AND             reduce using rule 87 (add_expression -> add_expression ADD_OP mult_expression .)
    SCAN            reduce using rule 87 (add_expression -> add_expression ADD_OP mult_expression .)
    INC             reduce using rule 87 (add_expression -> add_expression ADD_OP mult_expression .)
    DEC             reduce using rule 87 (add_expression -> add_expression ADD_OP mult_expression .)
    NOT             reduce using rule 87 (add_expression -> add_expression ADD_OP mult_expression .)
    VAR             reduce using rule 87 (add_expression -> add_expression ADD_OP mult_expression .)
    LPAREN          reduce using rule 87 (add_expression -> add_expression ADD_OP mult_expression .)
    FLOAT_ID        reduce using rule 87 (add_expression -> add_expression ADD_OP mult_expression .)
    INT_ID          reduce using rule 87 (add_expression -> add_expression ADD_OP mult_expression .)
    CHAR_ID         reduce using rule 87 (add_expression -> add_expression ADD_OP mult_expression .)
    STR_ID          reduce using rule 87 (add_expression -> add_expression ADD_OP mult_expression .)
    VOID_ID         reduce using rule 87 (add_expression -> add_expression ADD_OP mult_expression .)
    FLOAT_LIT       reduce using rule 87 (add_expression -> add_expression ADD_OP mult_expression .)
    INT_LIT         reduce using rule 87 (add_expression -> add_expression ADD_OP mult_expression .)
    CHAR_LIT        reduce using rule 87 (add_expression -> add_expression ADD_OP mult_expression .)
    STR_LIT         reduce using rule 87 (add_expression -> add_expression ADD_OP mult_expression .)
    MAIN            reduce using rule 87 (add_expression -> add_expression ADD_OP mult_expression .)
    RPAREN          reduce using rule 87 (add_expression -> add_expression ADD_OP mult_expression .)
    COMMA           reduce using rule 87 (add_expression -> add_expression ADD_OP mult_expression .)
    $end            reduce using rule 87 (add_expression -> add_expression ADD_OP mult_expression .)
    SEMI            reduce using rule 87 (add_expression -> add_expression ADD_OP mult_expression .)
    RBRACKET        reduce using rule 87 (add_expression -> add_expression ADD_OP mult_expression .)
    RBRACE          reduce using rule 87 (add_expression -> add_expression ADD_OP mult_expression .)
    COLON           reduce using rule 87 (add_expression -> add_expression ADD_OP mult_expression .)
    MULT_OP         shift and go to state 67
    DIV_OP          shift and go to state 69
    MOD_OP          shift and go to state 68

  ! MULT_OP         [ reduce using rule 87 (add_expression -> add_expression ADD_OP mult_expression .) ]
  ! DIV_OP          [ reduce using rule 87 (add_expression -> add_expression ADD_OP mult_expression .) ]
  ! MOD_OP          [ reduce using rule 87 (add_expression -> add_expression ADD_OP mult_expression .) ]


state 138

    (79) equality_expression -> equality_expression EQ relational_expression .
    (82) relational_expression -> relational_expression . LT add_expression
    (83) relational_expression -> relational_expression . GT add_expression
    (84) relational_expression -> relational_expression . LE add_expression
    (85) relational_expression -> relational_expression . GE add_expression

  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    EQ              reduce using rule 79 (equality_expression -> equality_expression EQ relational_expression .)
    NEQ             reduce using rule 79 (equality_expression -> equality_expression EQ relational_expression .)
    OR              reduce using rule 79 (equality_expression -> equality_expression EQ relational_expression .)
    AND             reduce using rule 79 (equality_expression -> equality_expression EQ relational_expression .)
    RPAREN          reduce using rule 79 (equality_expression -> equality_expression EQ relational_expression .)
    COMMA           reduce using rule 79 (equality_expression -> equality_expression EQ relational_expression .)
    SEMI            reduce using rule 79 (equality_expression -> equality_expression EQ relational_expression .)
    ASSIGN_OP       reduce using rule 79 (equality_expression -> equality_expression EQ relational_expression .)
    ADD_ASSIGN      reduce using rule 79 (equality_expression -> equality_expression EQ relational_expression .)
    MIN_ASSIGN      reduce using rule 79 (equality_expression -> equality_expression EQ relational_expression .)
    MUL_ASSIGN      reduce using rule 79 (equality_expression -> equality_expression EQ relational_expression .)
    DIV_ASSIGN      reduce using rule 79 (equality_expression -> equality_expression EQ relational_expression .)
    MOD_ASSIGN      reduce using rule 79 (equality_expression -> equality_expression EQ relational_expression .)
    MULT_OP         reduce using rule 79 (equality_expression -> equality_expression EQ relational_expression .)
    DIV_OP          reduce using rule 79 (equality_expression -> equality_expression EQ relational_expression .)
    MOD_OP          reduce using rule 79 (equality_expression -> equality_expression EQ relational_expression .)
    ADD_OP          reduce using rule 79 (equality_expression -> equality_expression EQ relational_expression .)
    SUB_OP          reduce using rule 79 (equality_expression -> equality_expression EQ relational_expression .)
    SCAN            reduce using rule 79 (equality_expression -> equality_expression EQ relational_expression .)
    INC             reduce using rule 79 (equality_expression -> equality_expression EQ relational_expression .)
    DEC             reduce using rule 79 (equality_expression -> equality_expression EQ relational_expression .)
    NOT             reduce using rule 79 (equality_expression -> equality_expression EQ relational_expression .)
    VAR             reduce using rule 79 (equality_expression -> equality_expression EQ relational_expression .)
    LPAREN          reduce using rule 79 (equality_expression -> equality_expression EQ relational_expression .)
    FLOAT_ID        reduce using rule 79 (equality_expression -> equality_expression EQ relational_expression .)
    INT_ID          reduce using rule 79 (equality_expression -> equality_expression EQ relational_expression .)
    CHAR_ID         reduce using rule 79 (equality_expression -> equality_expression EQ relational_expression .)
    STR_ID          reduce using rule 79 (equality_expression -> equality_expression EQ relational_expression .)
    VOID_ID         reduce using rule 79 (equality_expression -> equality_expression EQ relational_expression .)
    FLOAT_LIT       reduce using rule 79 (equality_expression -> equality_expression EQ relational_expression .)
    INT_LIT         reduce using rule 79 (equality_expression -> equality_expression EQ relational_expression .)
    CHAR_LIT        reduce using rule 79 (equality_expression -> equality_expression EQ relational_expression .)
    STR_LIT         reduce using rule 79 (equality_expression -> equality_expression EQ relational_expression .)
    MAIN            reduce using rule 79 (equality_expression -> equality_expression EQ relational_expression .)
    $end            reduce using rule 79 (equality_expression -> equality_expression EQ relational_expression .)
    RBRACKET        reduce using rule 79 (equality_expression -> equality_expression EQ relational_expression .)
    RBRACE          reduce using rule 79 (equality_expression -> equality_expression EQ relational_expression .)
    COLON           reduce using rule 79 (equality_expression -> equality_expression EQ relational_expression .)
    LT              shift and go to state 63
    GT              shift and go to state 62
    LE              shift and go to state 65
    GE              shift and go to state 64

  ! LT              [ reduce using rule 79 (equality_expression -> equality_expression EQ relational_expression .) ]
  ! GT              [ reduce using rule 79 (equality_expression -> equality_expression EQ relational_expression .) ]
  ! LE              [ reduce using rule 79 (equality_expression -> equality_expression EQ relational_expression .) ]
  ! GE              [ reduce using rule 79 (equality_expression -> equality_expression EQ relational_expression .) ]


state 139

    (80) equality_expression -> equality_expression NEQ relational_expression .
    (82) relational_expression -> relational_expression . LT add_expression
    (83) relational_expression -> relational_expression . GT add_expression
    (84) relational_expression -> relational_expression . LE add_expression
    (85) relational_expression -> relational_expression . GE add_expression

  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    EQ              reduce using rule 80 (equality_expression -> equality_expression NEQ relational_expression .)
    NEQ             reduce using rule 80 (equality_expression -> equality_expression NEQ relational_expression .)
    OR              reduce using rule 80 (equality_expression -> equality_expression NEQ relational_expression .)
    AND             reduce using rule 80 (equality_expression -> equality_expression NEQ relational_expression .)
    RPAREN          reduce using rule 80 (equality_expression -> equality_expression NEQ relational_expression .)
    COMMA           reduce using rule 80 (equality_expression -> equality_expression NEQ relational_expression .)
    SEMI            reduce using rule 80 (equality_expression -> equality_expression NEQ relational_expression .)
    ASSIGN_OP       reduce using rule 80 (equality_expression -> equality_expression NEQ relational_expression .)
    ADD_ASSIGN      reduce using rule 80 (equality_expression -> equality_expression NEQ relational_expression .)
    MIN_ASSIGN      reduce using rule 80 (equality_expression -> equality_expression NEQ relational_expression .)
    MUL_ASSIGN      reduce using rule 80 (equality_expression -> equality_expression NEQ relational_expression .)
    DIV_ASSIGN      reduce using rule 80 (equality_expression -> equality_expression NEQ relational_expression .)
    MOD_ASSIGN      reduce using rule 80 (equality_expression -> equality_expression NEQ relational_expression .)
    MULT_OP         reduce using rule 80 (equality_expression -> equality_expression NEQ relational_expression .)
    DIV_OP          reduce using rule 80 (equality_expression -> equality_expression NEQ relational_expression .)
    MOD_OP          reduce using rule 80 (equality_expression -> equality_expression NEQ relational_expression .)
    ADD_OP          reduce using rule 80 (equality_expression -> equality_expression NEQ relational_expression .)
    SUB_OP          reduce using rule 80 (equality_expression -> equality_expression NEQ relational_expression .)
    SCAN            reduce using rule 80 (equality_expression -> equality_expression NEQ relational_expression .)
    INC             reduce using rule 80 (equality_expression -> equality_expression NEQ relational_expression .)
    DEC             reduce using rule 80 (equality_expression -> equality_expression NEQ relational_expression .)
    NOT             reduce using rule 80 (equality_expression -> equality_expression NEQ relational_expression .)
    VAR             reduce using rule 80 (equality_expression -> equality_expression NEQ relational_expression .)
    LPAREN          reduce using rule 80 (equality_expression -> equality_expression NEQ relational_expression .)
    FLOAT_ID        reduce using rule 80 (equality_expression -> equality_expression NEQ relational_expression .)
    INT_ID          reduce using rule 80 (equality_expression -> equality_expression NEQ relational_expression .)
    CHAR_ID         reduce using rule 80 (equality_expression -> equality_expression NEQ relational_expression .)
    STR_ID          reduce using rule 80 (equality_expression -> equality_expression NEQ relational_expression .)
    VOID_ID         reduce using rule 80 (equality_expression -> equality_expression NEQ relational_expression .)
    FLOAT_LIT       reduce using rule 80 (equality_expression -> equality_expression NEQ relational_expression .)
    INT_LIT         reduce using rule 80 (equality_expression -> equality_expression NEQ relational_expression .)
    CHAR_LIT        reduce using rule 80 (equality_expression -> equality_expression NEQ relational_expression .)
    STR_LIT         reduce using rule 80 (equality_expression -> equality_expression NEQ relational_expression .)
    MAIN            reduce using rule 80 (equality_expression -> equality_expression NEQ relational_expression .)
    $end            reduce using rule 80 (equality_expression -> equality_expression NEQ relational_expression .)
    RBRACKET        reduce using rule 80 (equality_expression -> equality_expression NEQ relational_expression .)
    RBRACE          reduce using rule 80 (equality_expression -> equality_expression NEQ relational_expression .)
    COLON           reduce using rule 80 (equality_expression -> equality_expression NEQ relational_expression .)
    LT              shift and go to state 63
    GT              shift and go to state 62
    LE              shift and go to state 65
    GE              shift and go to state 64

  ! LT              [ reduce using rule 80 (equality_expression -> equality_expression NEQ relational_expression .) ]
  ! GT              [ reduce using rule 80 (equality_expression -> equality_expression NEQ relational_expression .) ]
  ! LE              [ reduce using rule 80 (equality_expression -> equality_expression NEQ relational_expression .) ]
  ! GE              [ reduce using rule 80 (equality_expression -> equality_expression NEQ relational_expression .) ]


state 140

    (60) print_expression -> PRINT LPAREN scan_expression . RPAREN

    RPAREN          shift and go to state 173


state 141

    (61) print_expression -> PRINTLN LPAREN scan_expression . RPAREN

    RPAREN          shift and go to state 174


state 142

    (58) expression -> expression COMMA print_expression .

    RPAREN          reduce using rule 58 (expression -> expression COMMA print_expression .)
    COMMA           reduce using rule 58 (expression -> expression COMMA print_expression .)
    SEMI            reduce using rule 58 (expression -> expression COMMA print_expression .)
    RBRACKET        reduce using rule 58 (expression -> expression COMMA print_expression .)


state 143

    (5) main -> MAIN LPAREN empty . RPAREN compound_statement

    RPAREN          shift and go to state 175


state 144

    (12) init_declarator_list -> init_declarator_list COMMA . init_declarator
    (13) init_declarator -> . declarator
    (14) init_declarator -> . declarator ASSIGN_OP initializer
    (15) declarator -> . VAR identifier
    (16) declarator -> . LPAREN declarator RPAREN
    (17) declarator -> . declarator LBRACKET constant_expression_opt RBRACKET

    VAR             shift and go to state 98
    LPAREN          shift and go to state 176

    init_declarator                shift and go to state 177
    declarator                     shift and go to state 100

state 145

    (8) declaration -> init_declarator_list SEMI .

    CASE            reduce using rule 8 (declaration -> init_declarator_list SEMI .)
    DEFAULT         reduce using rule 8 (declaration -> init_declarator_list SEMI .)
    LBRACE          reduce using rule 8 (declaration -> init_declarator_list SEMI .)
    IF              reduce using rule 8 (declaration -> init_declarator_list SEMI .)
    SWITCH          reduce using rule 8 (declaration -> init_declarator_list SEMI .)
    WHILE           reduce using rule 8 (declaration -> init_declarator_list SEMI .)
    FOR             reduce using rule 8 (declaration -> init_declarator_list SEMI .)
    DO              reduce using rule 8 (declaration -> init_declarator_list SEMI .)
    CONTINUE        reduce using rule 8 (declaration -> init_declarator_list SEMI .)
    BREAK           reduce using rule 8 (declaration -> init_declarator_list SEMI .)
    RETURN          reduce using rule 8 (declaration -> init_declarator_list SEMI .)
    VAR             reduce using rule 8 (declaration -> init_declarator_list SEMI .)
    LPAREN          reduce using rule 8 (declaration -> init_declarator_list SEMI .)
    PRINT           reduce using rule 8 (declaration -> init_declarator_list SEMI .)
    PRINTLN         reduce using rule 8 (declaration -> init_declarator_list SEMI .)
    SCAN            reduce using rule 8 (declaration -> init_declarator_list SEMI .)
    INC             reduce using rule 8 (declaration -> init_declarator_list SEMI .)
    DEC             reduce using rule 8 (declaration -> init_declarator_list SEMI .)
    SUB_OP          reduce using rule 8 (declaration -> init_declarator_list SEMI .)
    NOT             reduce using rule 8 (declaration -> init_declarator_list SEMI .)
    FLOAT_ID        reduce using rule 8 (declaration -> init_declarator_list SEMI .)
    INT_ID          reduce using rule 8 (declaration -> init_declarator_list SEMI .)
    CHAR_ID         reduce using rule 8 (declaration -> init_declarator_list SEMI .)
    STR_ID          reduce using rule 8 (declaration -> init_declarator_list SEMI .)
    VOID_ID         reduce using rule 8 (declaration -> init_declarator_list SEMI .)
    FLOAT_LIT       reduce using rule 8 (declaration -> init_declarator_list SEMI .)
    INT_LIT         reduce using rule 8 (declaration -> init_declarator_list SEMI .)
    CHAR_LIT        reduce using rule 8 (declaration -> init_declarator_list SEMI .)
    STR_LIT         reduce using rule 8 (declaration -> init_declarator_list SEMI .)
    SEMI            reduce using rule 8 (declaration -> init_declarator_list SEMI .)
    RBRACE          reduce using rule 8 (declaration -> init_declarator_list SEMI .)


state 146

    (15) declarator -> VAR identifier .

    ASSIGN_OP       reduce using rule 15 (declarator -> VAR identifier .)
    LBRACKET        reduce using rule 15 (declarator -> VAR identifier .)
    SEMI            reduce using rule 15 (declarator -> VAR identifier .)
    COMMA           reduce using rule 15 (declarator -> VAR identifier .)
    RPAREN          reduce using rule 15 (declarator -> VAR identifier .)


state 147

    (43) mix_list -> declaration_list mix_list .

    RBRACE          reduce using rule 43 (mix_list -> declaration_list mix_list .)


state 148

    (10) declaration_list -> declaration_list declaration .
    (9) declaration_list -> declaration .

  ! reduce/reduce conflict for CASE resolved using rule 9 (declaration_list -> declaration .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 9 (declaration_list -> declaration .)
  ! reduce/reduce conflict for LBRACE resolved using rule 9 (declaration_list -> declaration .)
  ! reduce/reduce conflict for IF resolved using rule 9 (declaration_list -> declaration .)
  ! reduce/reduce conflict for SWITCH resolved using rule 9 (declaration_list -> declaration .)
  ! reduce/reduce conflict for WHILE resolved using rule 9 (declaration_list -> declaration .)
  ! reduce/reduce conflict for FOR resolved using rule 9 (declaration_list -> declaration .)
  ! reduce/reduce conflict for DO resolved using rule 9 (declaration_list -> declaration .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 9 (declaration_list -> declaration .)
  ! reduce/reduce conflict for BREAK resolved using rule 9 (declaration_list -> declaration .)
  ! reduce/reduce conflict for RETURN resolved using rule 9 (declaration_list -> declaration .)
  ! reduce/reduce conflict for VAR resolved using rule 9 (declaration_list -> declaration .)
  ! reduce/reduce conflict for LPAREN resolved using rule 9 (declaration_list -> declaration .)
  ! reduce/reduce conflict for PRINT resolved using rule 9 (declaration_list -> declaration .)
  ! reduce/reduce conflict for PRINTLN resolved using rule 9 (declaration_list -> declaration .)
  ! reduce/reduce conflict for SCAN resolved using rule 9 (declaration_list -> declaration .)
  ! reduce/reduce conflict for INC resolved using rule 9 (declaration_list -> declaration .)
  ! reduce/reduce conflict for DEC resolved using rule 9 (declaration_list -> declaration .)
  ! reduce/reduce conflict for SUB_OP resolved using rule 9 (declaration_list -> declaration .)
  ! reduce/reduce conflict for NOT resolved using rule 9 (declaration_list -> declaration .)
  ! reduce/reduce conflict for FLOAT_ID resolved using rule 9 (declaration_list -> declaration .)
  ! reduce/reduce conflict for INT_ID resolved using rule 9 (declaration_list -> declaration .)
  ! reduce/reduce conflict for CHAR_ID resolved using rule 9 (declaration_list -> declaration .)
  ! reduce/reduce conflict for STR_ID resolved using rule 9 (declaration_list -> declaration .)
  ! reduce/reduce conflict for VOID_ID resolved using rule 9 (declaration_list -> declaration .)
  ! reduce/reduce conflict for FLOAT_LIT resolved using rule 9 (declaration_list -> declaration .)
  ! reduce/reduce conflict for INT_LIT resolved using rule 9 (declaration_list -> declaration .)
  ! reduce/reduce conflict for CHAR_LIT resolved using rule 9 (declaration_list -> declaration .)
  ! reduce/reduce conflict for STR_LIT resolved using rule 9 (declaration_list -> declaration .)
  ! reduce/reduce conflict for SEMI resolved using rule 9 (declaration_list -> declaration .)
  ! reduce/reduce conflict for RBRACE resolved using rule 9 (declaration_list -> declaration .)
    CASE            reduce using rule 9 (declaration_list -> declaration .)
    DEFAULT         reduce using rule 9 (declaration_list -> declaration .)
    LBRACE          reduce using rule 9 (declaration_list -> declaration .)
    IF              reduce using rule 9 (declaration_list -> declaration .)
    SWITCH          reduce using rule 9 (declaration_list -> declaration .)
    WHILE           reduce using rule 9 (declaration_list -> declaration .)
    FOR             reduce using rule 9 (declaration_list -> declaration .)
    DO              reduce using rule 9 (declaration_list -> declaration .)
    CONTINUE        reduce using rule 9 (declaration_list -> declaration .)
    BREAK           reduce using rule 9 (declaration_list -> declaration .)
    RETURN          reduce using rule 9 (declaration_list -> declaration .)
    VAR             reduce using rule 9 (declaration_list -> declaration .)
    LPAREN          reduce using rule 9 (declaration_list -> declaration .)
    PRINT           reduce using rule 9 (declaration_list -> declaration .)
    PRINTLN         reduce using rule 9 (declaration_list -> declaration .)
    SCAN            reduce using rule 9 (declaration_list -> declaration .)
    INC             reduce using rule 9 (declaration_list -> declaration .)
    DEC             reduce using rule 9 (declaration_list -> declaration .)
    SUB_OP          reduce using rule 9 (declaration_list -> declaration .)
    NOT             reduce using rule 9 (declaration_list -> declaration .)
    FLOAT_ID        reduce using rule 9 (declaration_list -> declaration .)
    INT_ID          reduce using rule 9 (declaration_list -> declaration .)
    CHAR_ID         reduce using rule 9 (declaration_list -> declaration .)
    STR_ID          reduce using rule 9 (declaration_list -> declaration .)
    VOID_ID         reduce using rule 9 (declaration_list -> declaration .)
    FLOAT_LIT       reduce using rule 9 (declaration_list -> declaration .)
    INT_LIT         reduce using rule 9 (declaration_list -> declaration .)
    CHAR_LIT        reduce using rule 9 (declaration_list -> declaration .)
    STR_LIT         reduce using rule 9 (declaration_list -> declaration .)
    SEMI            reduce using rule 9 (declaration_list -> declaration .)
    RBRACE          reduce using rule 9 (declaration_list -> declaration .)

  ! CASE            [ reduce using rule 10 (declaration_list -> declaration_list declaration .) ]
  ! DEFAULT         [ reduce using rule 10 (declaration_list -> declaration_list declaration .) ]
  ! LBRACE          [ reduce using rule 10 (declaration_list -> declaration_list declaration .) ]
  ! IF              [ reduce using rule 10 (declaration_list -> declaration_list declaration .) ]
  ! SWITCH          [ reduce using rule 10 (declaration_list -> declaration_list declaration .) ]
  ! WHILE           [ reduce using rule 10 (declaration_list -> declaration_list declaration .) ]
  ! FOR             [ reduce using rule 10 (declaration_list -> declaration_list declaration .) ]
  ! DO              [ reduce using rule 10 (declaration_list -> declaration_list declaration .) ]
  ! CONTINUE        [ reduce using rule 10 (declaration_list -> declaration_list declaration .) ]
  ! BREAK           [ reduce using rule 10 (declaration_list -> declaration_list declaration .) ]
  ! RETURN          [ reduce using rule 10 (declaration_list -> declaration_list declaration .) ]
  ! VAR             [ reduce using rule 10 (declaration_list -> declaration_list declaration .) ]
  ! LPAREN          [ reduce using rule 10 (declaration_list -> declaration_list declaration .) ]
  ! PRINT           [ reduce using rule 10 (declaration_list -> declaration_list declaration .) ]
  ! PRINTLN         [ reduce using rule 10 (declaration_list -> declaration_list declaration .) ]
  ! SCAN            [ reduce using rule 10 (declaration_list -> declaration_list declaration .) ]
  ! INC             [ reduce using rule 10 (declaration_list -> declaration_list declaration .) ]
  ! DEC             [ reduce using rule 10 (declaration_list -> declaration_list declaration .) ]
  ! SUB_OP          [ reduce using rule 10 (declaration_list -> declaration_list declaration .) ]
  ! NOT             [ reduce using rule 10 (declaration_list -> declaration_list declaration .) ]
  ! FLOAT_ID        [ reduce using rule 10 (declaration_list -> declaration_list declaration .) ]
  ! INT_ID          [ reduce using rule 10 (declaration_list -> declaration_list declaration .) ]
  ! CHAR_ID         [ reduce using rule 10 (declaration_list -> declaration_list declaration .) ]
  ! STR_ID          [ reduce using rule 10 (declaration_list -> declaration_list declaration .) ]
  ! VOID_ID         [ reduce using rule 10 (declaration_list -> declaration_list declaration .) ]
  ! FLOAT_LIT       [ reduce using rule 10 (declaration_list -> declaration_list declaration .) ]
  ! INT_LIT         [ reduce using rule 10 (declaration_list -> declaration_list declaration .) ]
  ! CHAR_LIT        [ reduce using rule 10 (declaration_list -> declaration_list declaration .) ]
  ! STR_LIT         [ reduce using rule 10 (declaration_list -> declaration_list declaration .) ]
  ! SEMI            [ reduce using rule 10 (declaration_list -> declaration_list declaration .) ]
  ! RBRACE          [ reduce using rule 10 (declaration_list -> declaration_list declaration .) ]


state 149

    (17) declarator -> declarator LBRACKET . constant_expression_opt RBRACKET
    (71) constant_expression_opt -> . empty
    (72) constant_expression_opt -> . constant_expression
    (118) empty -> .
    (73) constant_expression -> . logical_or_expression
    (74) logical_or_expression -> . logical_and_expression
    (75) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (76) logical_and_expression -> . equality_expression
    (77) logical_and_expression -> . logical_and_expression AND equality_expression
    (78) equality_expression -> . relational_expression
    (79) equality_expression -> . equality_expression EQ relational_expression
    (80) equality_expression -> . equality_expression NEQ relational_expression
    (81) relational_expression -> . add_expression
    (82) relational_expression -> . relational_expression LT add_expression
    (83) relational_expression -> . relational_expression GT add_expression
    (84) relational_expression -> . relational_expression LE add_expression
    (85) relational_expression -> . relational_expression GE add_expression
    (86) add_expression -> . mult_expression
    (87) add_expression -> . add_expression ADD_OP mult_expression
    (88) add_expression -> . add_expression SUB_OP mult_expression
    (89) mult_expression -> . unary_expression
    (90) mult_expression -> . mult_expression MULT_OP unary_expression
    (91) mult_expression -> . mult_expression DIV_OP unary_expression
    (92) mult_expression -> . mult_expression MOD_OP unary_expression
    (93) unary_expression -> . postfix_expression
    (94) unary_expression -> . INC unary_expression
    (95) unary_expression -> . DEC unary_expression
    (96) unary_expression -> . SUB_OP add_expression
    (97) unary_expression -> . NOT logical_or_expression
    (98) postfix_expression -> . primary_expression
    (99) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (100) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (101) postfix_expression -> . postfix_expression LPAREN RPAREN
    (102) postfix_expression -> . postfix_expression INC
    (103) postfix_expression -> . postfix_expression DEC
    (104) primary_expression -> . identifier
    (105) primary_expression -> . constant
    (106) primary_expression -> . LPAREN expression RPAREN
    (109) identifier -> . FLOAT_ID
    (110) identifier -> . INT_ID
    (111) identifier -> . CHAR_ID
    (112) identifier -> . STR_ID
    (113) identifier -> . VOID_ID
    (114) constant -> . FLOAT_LIT
    (115) constant -> . INT_LIT
    (116) constant -> . CHAR_LIT
    (117) constant -> . STR_LIT

    RBRACKET        reduce using rule 118 (empty -> .)
    INC             shift and go to state 36
    DEC             shift and go to state 7
    SUB_OP          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 2
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 30
    CHAR_ID         shift and go to state 13
    STR_ID          shift and go to state 19
    VOID_ID         shift and go to state 23
    FLOAT_LIT       shift and go to state 31
    INT_LIT         shift and go to state 33
    CHAR_LIT        shift and go to state 12
    STR_LIT         shift and go to state 9

    constant                       shift and go to state 1
    unary_expression               shift and go to state 75
    constant_expression_opt        shift and go to state 179
    postfix_expression             shift and go to state 15
    equality_expression            shift and go to state 29
    empty                          shift and go to state 178
    primary_expression             shift and go to state 26
    mult_expression                shift and go to state 25
    logical_and_expression         shift and go to state 8
    identifier                     shift and go to state 35
    add_expression                 shift and go to state 28
    logical_or_expression          shift and go to state 158
    constant_expression            shift and go to state 180
    relational_expression          shift and go to state 17

state 150

    (14) init_declarator -> declarator ASSIGN_OP . initializer
    (18) initializer -> . assignment_expression
    (19) initializer -> . LBRACE initializer_list RBRACE
    (20) initializer -> . LBRACE initializer_list COMMA RBRACE
    (62) assignment_expression -> . scan_expression
    (63) assignment_expression -> . unary_expression ASSIGN_OP assignment_expression
    (64) assignment_expression -> . unary_expression ADD_ASSIGN assignment_expression
    (65) assignment_expression -> . unary_expression MIN_ASSIGN assignment_expression
    (66) assignment_expression -> . unary_expression MUL_ASSIGN assignment_expression
    (67) assignment_expression -> . unary_expression DIV_ASSIGN assignment_expression
    (68) assignment_expression -> . unary_expression MOD_ASSIGN assignment_expression
    (69) scan_expression -> . logical_or_expression
    (70) scan_expression -> . SCAN LPAREN RPAREN
    (93) unary_expression -> . postfix_expression
    (94) unary_expression -> . INC unary_expression
    (95) unary_expression -> . DEC unary_expression
    (96) unary_expression -> . SUB_OP add_expression
    (97) unary_expression -> . NOT logical_or_expression
    (74) logical_or_expression -> . logical_and_expression
    (75) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (98) postfix_expression -> . primary_expression
    (99) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (100) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (101) postfix_expression -> . postfix_expression LPAREN RPAREN
    (102) postfix_expression -> . postfix_expression INC
    (103) postfix_expression -> . postfix_expression DEC
    (76) logical_and_expression -> . equality_expression
    (77) logical_and_expression -> . logical_and_expression AND equality_expression
    (104) primary_expression -> . identifier
    (105) primary_expression -> . constant
    (106) primary_expression -> . LPAREN expression RPAREN
    (78) equality_expression -> . relational_expression
    (79) equality_expression -> . equality_expression EQ relational_expression
    (80) equality_expression -> . equality_expression NEQ relational_expression
    (109) identifier -> . FLOAT_ID
    (110) identifier -> . INT_ID
    (111) identifier -> . CHAR_ID
    (112) identifier -> . STR_ID
    (113) identifier -> . VOID_ID
    (114) constant -> . FLOAT_LIT
    (115) constant -> . INT_LIT
    (116) constant -> . CHAR_LIT
    (117) constant -> . STR_LIT
    (81) relational_expression -> . add_expression
    (82) relational_expression -> . relational_expression LT add_expression
    (83) relational_expression -> . relational_expression GT add_expression
    (84) relational_expression -> . relational_expression LE add_expression
    (85) relational_expression -> . relational_expression GE add_expression
    (86) add_expression -> . mult_expression
    (87) add_expression -> . add_expression ADD_OP mult_expression
    (88) add_expression -> . add_expression SUB_OP mult_expression
    (89) mult_expression -> . unary_expression
    (90) mult_expression -> . mult_expression MULT_OP unary_expression
    (91) mult_expression -> . mult_expression DIV_OP unary_expression
    (92) mult_expression -> . mult_expression MOD_OP unary_expression

    LBRACE          shift and go to state 183
    SCAN            shift and go to state 4
    INC             shift and go to state 36
    DEC             shift and go to state 7
    SUB_OP          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 2
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 30
    CHAR_ID         shift and go to state 13
    STR_ID          shift and go to state 19
    VOID_ID         shift and go to state 23
    FLOAT_LIT       shift and go to state 31
    INT_LIT         shift and go to state 33
    CHAR_LIT        shift and go to state 12
    STR_LIT         shift and go to state 9

    constant                       shift and go to state 1
    assignment_expression          shift and go to state 182
    unary_expression               shift and go to state 3
    relational_expression          shift and go to state 17
    postfix_expression             shift and go to state 15
    initializer                    shift and go to state 181
    primary_expression             shift and go to state 26
    mult_expression                shift and go to state 25
    logical_and_expression         shift and go to state 8
    identifier                     shift and go to state 35
    add_expression                 shift and go to state 28
    logical_or_expression          shift and go to state 21
    equality_expression            shift and go to state 29
    scan_expression                shift and go to state 10

state 151

    (38) compound_statement -> LBRACE mix_list RBRACE .

    CASE            reduce using rule 38 (compound_statement -> LBRACE mix_list RBRACE .)
    DEFAULT         reduce using rule 38 (compound_statement -> LBRACE mix_list RBRACE .)
    LBRACE          reduce using rule 38 (compound_statement -> LBRACE mix_list RBRACE .)
    IF              reduce using rule 38 (compound_statement -> LBRACE mix_list RBRACE .)
    SWITCH          reduce using rule 38 (compound_statement -> LBRACE mix_list RBRACE .)
    WHILE           reduce using rule 38 (compound_statement -> LBRACE mix_list RBRACE .)
    FOR             reduce using rule 38 (compound_statement -> LBRACE mix_list RBRACE .)
    DO              reduce using rule 38 (compound_statement -> LBRACE mix_list RBRACE .)
    CONTINUE        reduce using rule 38 (compound_statement -> LBRACE mix_list RBRACE .)
    BREAK           reduce using rule 38 (compound_statement -> LBRACE mix_list RBRACE .)
    RETURN          reduce using rule 38 (compound_statement -> LBRACE mix_list RBRACE .)
    PRINT           reduce using rule 38 (compound_statement -> LBRACE mix_list RBRACE .)
    PRINTLN         reduce using rule 38 (compound_statement -> LBRACE mix_list RBRACE .)
    VAR             reduce using rule 38 (compound_statement -> LBRACE mix_list RBRACE .)
    LPAREN          reduce using rule 38 (compound_statement -> LBRACE mix_list RBRACE .)
    SCAN            reduce using rule 38 (compound_statement -> LBRACE mix_list RBRACE .)
    INC             reduce using rule 38 (compound_statement -> LBRACE mix_list RBRACE .)
    DEC             reduce using rule 38 (compound_statement -> LBRACE mix_list RBRACE .)
    SUB_OP          reduce using rule 38 (compound_statement -> LBRACE mix_list RBRACE .)
    NOT             reduce using rule 38 (compound_statement -> LBRACE mix_list RBRACE .)
    FLOAT_ID        reduce using rule 38 (compound_statement -> LBRACE mix_list RBRACE .)
    INT_ID          reduce using rule 38 (compound_statement -> LBRACE mix_list RBRACE .)
    CHAR_ID         reduce using rule 38 (compound_statement -> LBRACE mix_list RBRACE .)
    STR_ID          reduce using rule 38 (compound_statement -> LBRACE mix_list RBRACE .)
    VOID_ID         reduce using rule 38 (compound_statement -> LBRACE mix_list RBRACE .)
    FLOAT_LIT       reduce using rule 38 (compound_statement -> LBRACE mix_list RBRACE .)
    INT_LIT         reduce using rule 38 (compound_statement -> LBRACE mix_list RBRACE .)
    CHAR_LIT        reduce using rule 38 (compound_statement -> LBRACE mix_list RBRACE .)
    STR_LIT         reduce using rule 38 (compound_statement -> LBRACE mix_list RBRACE .)
    SEMI            reduce using rule 38 (compound_statement -> LBRACE mix_list RBRACE .)
    RBRACE          reduce using rule 38 (compound_statement -> LBRACE mix_list RBRACE .)
    ELSE            reduce using rule 38 (compound_statement -> LBRACE mix_list RBRACE .)
    MAIN            reduce using rule 38 (compound_statement -> LBRACE mix_list RBRACE .)
    $end            reduce using rule 38 (compound_statement -> LBRACE mix_list RBRACE .)


state 152

    (54) jump_statement -> RETURN expression_opt . SEMI

    SEMI            shift and go to state 184


state 153

    (50) iteration_statement -> FOR LPAREN . expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (55) expression_opt -> . empty
    (56) expression_opt -> . expression
    (118) empty -> .
    (57) expression -> . print_expression
    (58) expression -> . expression COMMA print_expression
    (59) print_expression -> . assignment_expression
    (60) print_expression -> . PRINT LPAREN scan_expression RPAREN
    (61) print_expression -> . PRINTLN LPAREN scan_expression RPAREN
    (62) assignment_expression -> . scan_expression
    (63) assignment_expression -> . unary_expression ASSIGN_OP assignment_expression
    (64) assignment_expression -> . unary_expression ADD_ASSIGN assignment_expression
    (65) assignment_expression -> . unary_expression MIN_ASSIGN assignment_expression
    (66) assignment_expression -> . unary_expression MUL_ASSIGN assignment_expression
    (67) assignment_expression -> . unary_expression DIV_ASSIGN assignment_expression
    (68) assignment_expression -> . unary_expression MOD_ASSIGN assignment_expression
    (69) scan_expression -> . logical_or_expression
    (70) scan_expression -> . SCAN LPAREN RPAREN
    (93) unary_expression -> . postfix_expression
    (94) unary_expression -> . INC unary_expression
    (95) unary_expression -> . DEC unary_expression
    (96) unary_expression -> . SUB_OP add_expression
    (97) unary_expression -> . NOT logical_or_expression
    (74) logical_or_expression -> . logical_and_expression
    (75) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (98) postfix_expression -> . primary_expression
    (99) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (100) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (101) postfix_expression -> . postfix_expression LPAREN RPAREN
    (102) postfix_expression -> . postfix_expression INC
    (103) postfix_expression -> . postfix_expression DEC
    (76) logical_and_expression -> . equality_expression
    (77) logical_and_expression -> . logical_and_expression AND equality_expression
    (104) primary_expression -> . identifier
    (105) primary_expression -> . constant
    (106) primary_expression -> . LPAREN expression RPAREN
    (78) equality_expression -> . relational_expression
    (79) equality_expression -> . equality_expression EQ relational_expression
    (80) equality_expression -> . equality_expression NEQ relational_expression
    (109) identifier -> . FLOAT_ID
    (110) identifier -> . INT_ID
    (111) identifier -> . CHAR_ID
    (112) identifier -> . STR_ID
    (113) identifier -> . VOID_ID
    (114) constant -> . FLOAT_LIT
    (115) constant -> . INT_LIT
    (116) constant -> . CHAR_LIT
    (117) constant -> . STR_LIT
    (81) relational_expression -> . add_expression
    (82) relational_expression -> . relational_expression LT add_expression
    (83) relational_expression -> . relational_expression GT add_expression
    (84) relational_expression -> . relational_expression LE add_expression
    (85) relational_expression -> . relational_expression GE add_expression
    (86) add_expression -> . mult_expression
    (87) add_expression -> . add_expression ADD_OP mult_expression
    (88) add_expression -> . add_expression SUB_OP mult_expression
    (89) mult_expression -> . unary_expression
    (90) mult_expression -> . mult_expression MULT_OP unary_expression
    (91) mult_expression -> . mult_expression DIV_OP unary_expression
    (92) mult_expression -> . mult_expression MOD_OP unary_expression

    SEMI            reduce using rule 118 (empty -> .)
    PRINT           shift and go to state 37
    PRINTLN         shift and go to state 38
    SCAN            shift and go to state 4
    INC             shift and go to state 36
    DEC             shift and go to state 7
    SUB_OP          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 2
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 30
    CHAR_ID         shift and go to state 13
    STR_ID          shift and go to state 19
    VOID_ID         shift and go to state 23
    FLOAT_LIT       shift and go to state 31
    INT_LIT         shift and go to state 33
    CHAR_LIT        shift and go to state 12
    STR_LIT         shift and go to state 9

    identifier                     shift and go to state 35
    constant                       shift and go to state 1
    assignment_expression          shift and go to state 39
    unary_expression               shift and go to state 3
    relational_expression          shift and go to state 17
    add_expression                 shift and go to state 28
    print_expression               shift and go to state 40
    expression_opt                 shift and go to state 185
    equality_expression            shift and go to state 29
    postfix_expression             shift and go to state 15
    mult_expression                shift and go to state 25
    logical_and_expression         shift and go to state 8
    primary_expression             shift and go to state 26
    expression                     shift and go to state 108
    logical_or_expression          shift and go to state 21
    empty                          shift and go to state 118
    scan_expression                shift and go to state 10

state 154

    (52) jump_statement -> CONTINUE SEMI .

    CASE            reduce using rule 52 (jump_statement -> CONTINUE SEMI .)
    DEFAULT         reduce using rule 52 (jump_statement -> CONTINUE SEMI .)
    LBRACE          reduce using rule 52 (jump_statement -> CONTINUE SEMI .)
    IF              reduce using rule 52 (jump_statement -> CONTINUE SEMI .)
    SWITCH          reduce using rule 52 (jump_statement -> CONTINUE SEMI .)
    WHILE           reduce using rule 52 (jump_statement -> CONTINUE SEMI .)
    FOR             reduce using rule 52 (jump_statement -> CONTINUE SEMI .)
    DO              reduce using rule 52 (jump_statement -> CONTINUE SEMI .)
    CONTINUE        reduce using rule 52 (jump_statement -> CONTINUE SEMI .)
    BREAK           reduce using rule 52 (jump_statement -> CONTINUE SEMI .)
    RETURN          reduce using rule 52 (jump_statement -> CONTINUE SEMI .)
    PRINT           reduce using rule 52 (jump_statement -> CONTINUE SEMI .)
    PRINTLN         reduce using rule 52 (jump_statement -> CONTINUE SEMI .)
    VAR             reduce using rule 52 (jump_statement -> CONTINUE SEMI .)
    LPAREN          reduce using rule 52 (jump_statement -> CONTINUE SEMI .)
    SCAN            reduce using rule 52 (jump_statement -> CONTINUE SEMI .)
    INC             reduce using rule 52 (jump_statement -> CONTINUE SEMI .)
    DEC             reduce using rule 52 (jump_statement -> CONTINUE SEMI .)
    SUB_OP          reduce using rule 52 (jump_statement -> CONTINUE SEMI .)
    NOT             reduce using rule 52 (jump_statement -> CONTINUE SEMI .)
    FLOAT_ID        reduce using rule 52 (jump_statement -> CONTINUE SEMI .)
    INT_ID          reduce using rule 52 (jump_statement -> CONTINUE SEMI .)
    CHAR_ID         reduce using rule 52 (jump_statement -> CONTINUE SEMI .)
    STR_ID          reduce using rule 52 (jump_statement -> CONTINUE SEMI .)
    VOID_ID         reduce using rule 52 (jump_statement -> CONTINUE SEMI .)
    FLOAT_LIT       reduce using rule 52 (jump_statement -> CONTINUE SEMI .)
    INT_LIT         reduce using rule 52 (jump_statement -> CONTINUE SEMI .)
    CHAR_LIT        reduce using rule 52 (jump_statement -> CONTINUE SEMI .)
    STR_LIT         reduce using rule 52 (jump_statement -> CONTINUE SEMI .)
    SEMI            reduce using rule 52 (jump_statement -> CONTINUE SEMI .)
    RBRACE          reduce using rule 52 (jump_statement -> CONTINUE SEMI .)
    ELSE            reduce using rule 52 (jump_statement -> CONTINUE SEMI .)


state 155

    (16) declarator -> LPAREN declarator . RPAREN
    (17) declarator -> declarator . LBRACKET constant_expression_opt RBRACKET

    RPAREN          shift and go to state 186
    LBRACKET        shift and go to state 149


state 156

    (36) labeled_statement -> DEFAULT COLON . statement
    (29) statement -> . labeled_statement
    (30) statement -> . expression_statement
    (31) statement -> . compound_statement
    (32) statement -> . selection_statement
    (33) statement -> . iteration_statement
    (34) statement -> . jump_statement
    (35) labeled_statement -> . CASE constant_expression COLON statement
    (36) labeled_statement -> . DEFAULT COLON statement
    (37) expression_statement -> . expression_opt SEMI
    (38) compound_statement -> . LBRACE mix_list RBRACE
    (39) compound_statement -> . LBRACE RBRACE
    (46) selection_statement -> . IF LPAREN expression RPAREN statement
    (47) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (48) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (49) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (50) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (51) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (52) jump_statement -> . CONTINUE SEMI
    (53) jump_statement -> . BREAK SEMI
    (54) jump_statement -> . RETURN expression_opt SEMI
    (55) expression_opt -> . empty
    (56) expression_opt -> . expression
    (118) empty -> .
    (57) expression -> . print_expression
    (58) expression -> . expression COMMA print_expression
    (59) print_expression -> . assignment_expression
    (60) print_expression -> . PRINT LPAREN scan_expression RPAREN
    (61) print_expression -> . PRINTLN LPAREN scan_expression RPAREN
    (62) assignment_expression -> . scan_expression
    (63) assignment_expression -> . unary_expression ASSIGN_OP assignment_expression
    (64) assignment_expression -> . unary_expression ADD_ASSIGN assignment_expression
    (65) assignment_expression -> . unary_expression MIN_ASSIGN assignment_expression
    (66) assignment_expression -> . unary_expression MUL_ASSIGN assignment_expression
    (67) assignment_expression -> . unary_expression DIV_ASSIGN assignment_expression
    (68) assignment_expression -> . unary_expression MOD_ASSIGN assignment_expression
    (69) scan_expression -> . logical_or_expression
    (70) scan_expression -> . SCAN LPAREN RPAREN
    (93) unary_expression -> . postfix_expression
    (94) unary_expression -> . INC unary_expression
    (95) unary_expression -> . DEC unary_expression
    (96) unary_expression -> . SUB_OP add_expression
    (97) unary_expression -> . NOT logical_or_expression
    (74) logical_or_expression -> . logical_and_expression
    (75) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (98) postfix_expression -> . primary_expression
    (99) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (100) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (101) postfix_expression -> . postfix_expression LPAREN RPAREN
    (102) postfix_expression -> . postfix_expression INC
    (103) postfix_expression -> . postfix_expression DEC
    (76) logical_and_expression -> . equality_expression
    (77) logical_and_expression -> . logical_and_expression AND equality_expression
    (104) primary_expression -> . identifier
    (105) primary_expression -> . constant
    (106) primary_expression -> . LPAREN expression RPAREN
    (78) equality_expression -> . relational_expression
    (79) equality_expression -> . equality_expression EQ relational_expression
    (80) equality_expression -> . equality_expression NEQ relational_expression
    (109) identifier -> . FLOAT_ID
    (110) identifier -> . INT_ID
    (111) identifier -> . CHAR_ID
    (112) identifier -> . STR_ID
    (113) identifier -> . VOID_ID
    (114) constant -> . FLOAT_LIT
    (115) constant -> . INT_LIT
    (116) constant -> . CHAR_LIT
    (117) constant -> . STR_LIT
    (81) relational_expression -> . add_expression
    (82) relational_expression -> . relational_expression LT add_expression
    (83) relational_expression -> . relational_expression GT add_expression
    (84) relational_expression -> . relational_expression LE add_expression
    (85) relational_expression -> . relational_expression GE add_expression
    (86) add_expression -> . mult_expression
    (87) add_expression -> . add_expression ADD_OP mult_expression
    (88) add_expression -> . add_expression SUB_OP mult_expression
    (89) mult_expression -> . unary_expression
    (90) mult_expression -> . mult_expression MULT_OP unary_expression
    (91) mult_expression -> . mult_expression DIV_OP unary_expression
    (92) mult_expression -> . mult_expression MOD_OP unary_expression

    CASE            shift and go to state 112
    DEFAULT         shift and go to state 110
    LBRACE          shift and go to state 55
    IF              shift and go to state 122
    SWITCH          shift and go to state 113
    WHILE           shift and go to state 111
    FOR             shift and go to state 105
    DO              shift and go to state 119
    CONTINUE        shift and go to state 107
    BREAK           shift and go to state 117
    RETURN          shift and go to state 102
    SEMI            reduce using rule 118 (empty -> .)
    PRINT           shift and go to state 37
    PRINTLN         shift and go to state 38
    SCAN            shift and go to state 4
    INC             shift and go to state 36
    DEC             shift and go to state 7
    SUB_OP          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 2
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 30
    CHAR_ID         shift and go to state 13
    STR_ID          shift and go to state 19
    VOID_ID         shift and go to state 23
    FLOAT_LIT       shift and go to state 31
    INT_LIT         shift and go to state 33
    CHAR_LIT        shift and go to state 12
    STR_LIT         shift and go to state 9

    expression_statement           shift and go to state 94
    constant                       shift and go to state 1
    unary_expression               shift and go to state 3
    iteration_statement            shift and go to state 96
    scan_expression                shift and go to state 10
    compound_statement             shift and go to state 104
    selection_statement            shift and go to state 120
    postfix_expression             shift and go to state 15
    relational_expression          shift and go to state 17
    statement                      shift and go to state 187
    logical_or_expression          shift and go to state 21
    empty                          shift and go to state 118
    assignment_expression          shift and go to state 39
    print_expression               shift and go to state 40
    expression_opt                 shift and go to state 123
    primary_expression             shift and go to state 26
    logical_and_expression         shift and go to state 8
    add_expression                 shift and go to state 28
    equality_expression            shift and go to state 29
    jump_statement                 shift and go to state 116
    labeled_statement              shift and go to state 103
    mult_expression                shift and go to state 25
    identifier                     shift and go to state 35
    expression                     shift and go to state 108

state 157

    (49) iteration_statement -> WHILE LPAREN . expression RPAREN statement
    (57) expression -> . print_expression
    (58) expression -> . expression COMMA print_expression
    (59) print_expression -> . assignment_expression
    (60) print_expression -> . PRINT LPAREN scan_expression RPAREN
    (61) print_expression -> . PRINTLN LPAREN scan_expression RPAREN
    (62) assignment_expression -> . scan_expression
    (63) assignment_expression -> . unary_expression ASSIGN_OP assignment_expression
    (64) assignment_expression -> . unary_expression ADD_ASSIGN assignment_expression
    (65) assignment_expression -> . unary_expression MIN_ASSIGN assignment_expression
    (66) assignment_expression -> . unary_expression MUL_ASSIGN assignment_expression
    (67) assignment_expression -> . unary_expression DIV_ASSIGN assignment_expression
    (68) assignment_expression -> . unary_expression MOD_ASSIGN assignment_expression
    (69) scan_expression -> . logical_or_expression
    (70) scan_expression -> . SCAN LPAREN RPAREN
    (93) unary_expression -> . postfix_expression
    (94) unary_expression -> . INC unary_expression
    (95) unary_expression -> . DEC unary_expression
    (96) unary_expression -> . SUB_OP add_expression
    (97) unary_expression -> . NOT logical_or_expression
    (74) logical_or_expression -> . logical_and_expression
    (75) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (98) postfix_expression -> . primary_expression
    (99) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (100) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (101) postfix_expression -> . postfix_expression LPAREN RPAREN
    (102) postfix_expression -> . postfix_expression INC
    (103) postfix_expression -> . postfix_expression DEC
    (76) logical_and_expression -> . equality_expression
    (77) logical_and_expression -> . logical_and_expression AND equality_expression
    (104) primary_expression -> . identifier
    (105) primary_expression -> . constant
    (106) primary_expression -> . LPAREN expression RPAREN
    (78) equality_expression -> . relational_expression
    (79) equality_expression -> . equality_expression EQ relational_expression
    (80) equality_expression -> . equality_expression NEQ relational_expression
    (109) identifier -> . FLOAT_ID
    (110) identifier -> . INT_ID
    (111) identifier -> . CHAR_ID
    (112) identifier -> . STR_ID
    (113) identifier -> . VOID_ID
    (114) constant -> . FLOAT_LIT
    (115) constant -> . INT_LIT
    (116) constant -> . CHAR_LIT
    (117) constant -> . STR_LIT
    (81) relational_expression -> . add_expression
    (82) relational_expression -> . relational_expression LT add_expression
    (83) relational_expression -> . relational_expression GT add_expression
    (84) relational_expression -> . relational_expression LE add_expression
    (85) relational_expression -> . relational_expression GE add_expression
    (86) add_expression -> . mult_expression
    (87) add_expression -> . add_expression ADD_OP mult_expression
    (88) add_expression -> . add_expression SUB_OP mult_expression
    (89) mult_expression -> . unary_expression
    (90) mult_expression -> . mult_expression MULT_OP unary_expression
    (91) mult_expression -> . mult_expression DIV_OP unary_expression
    (92) mult_expression -> . mult_expression MOD_OP unary_expression

    PRINT           shift and go to state 37
    PRINTLN         shift and go to state 38
    SCAN            shift and go to state 4
    INC             shift and go to state 36
    DEC             shift and go to state 7
    SUB_OP          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 2
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 30
    CHAR_ID         shift and go to state 13
    STR_ID          shift and go to state 19
    VOID_ID         shift and go to state 23
    FLOAT_LIT       shift and go to state 31
    INT_LIT         shift and go to state 33
    CHAR_LIT        shift and go to state 12
    STR_LIT         shift and go to state 9

    identifier                     shift and go to state 35
    constant                       shift and go to state 1
    assignment_expression          shift and go to state 39
    unary_expression               shift and go to state 3
    relational_expression          shift and go to state 17
    add_expression                 shift and go to state 28
    print_expression               shift and go to state 40
    postfix_expression             shift and go to state 15
    mult_expression                shift and go to state 25
    logical_and_expression         shift and go to state 8
    primary_expression             shift and go to state 26
    expression                     shift and go to state 188
    logical_or_expression          shift and go to state 21
    equality_expression            shift and go to state 29
    scan_expression                shift and go to state 10

state 158

    (73) constant_expression -> logical_or_expression .

    RBRACKET        reduce using rule 73 (constant_expression -> logical_or_expression .)
    COLON           reduce using rule 73 (constant_expression -> logical_or_expression .)


state 159

    (35) labeled_statement -> CASE constant_expression . COLON statement

    COLON           shift and go to state 189


state 160

    (48) selection_statement -> SWITCH LPAREN . expression RPAREN statement
    (57) expression -> . print_expression
    (58) expression -> . expression COMMA print_expression
    (59) print_expression -> . assignment_expression
    (60) print_expression -> . PRINT LPAREN scan_expression RPAREN
    (61) print_expression -> . PRINTLN LPAREN scan_expression RPAREN
    (62) assignment_expression -> . scan_expression
    (63) assignment_expression -> . unary_expression ASSIGN_OP assignment_expression
    (64) assignment_expression -> . unary_expression ADD_ASSIGN assignment_expression
    (65) assignment_expression -> . unary_expression MIN_ASSIGN assignment_expression
    (66) assignment_expression -> . unary_expression MUL_ASSIGN assignment_expression
    (67) assignment_expression -> . unary_expression DIV_ASSIGN assignment_expression
    (68) assignment_expression -> . unary_expression MOD_ASSIGN assignment_expression
    (69) scan_expression -> . logical_or_expression
    (70) scan_expression -> . SCAN LPAREN RPAREN
    (93) unary_expression -> . postfix_expression
    (94) unary_expression -> . INC unary_expression
    (95) unary_expression -> . DEC unary_expression
    (96) unary_expression -> . SUB_OP add_expression
    (97) unary_expression -> . NOT logical_or_expression
    (74) logical_or_expression -> . logical_and_expression
    (75) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (98) postfix_expression -> . primary_expression
    (99) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (100) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (101) postfix_expression -> . postfix_expression LPAREN RPAREN
    (102) postfix_expression -> . postfix_expression INC
    (103) postfix_expression -> . postfix_expression DEC
    (76) logical_and_expression -> . equality_expression
    (77) logical_and_expression -> . logical_and_expression AND equality_expression
    (104) primary_expression -> . identifier
    (105) primary_expression -> . constant
    (106) primary_expression -> . LPAREN expression RPAREN
    (78) equality_expression -> . relational_expression
    (79) equality_expression -> . equality_expression EQ relational_expression
    (80) equality_expression -> . equality_expression NEQ relational_expression
    (109) identifier -> . FLOAT_ID
    (110) identifier -> . INT_ID
    (111) identifier -> . CHAR_ID
    (112) identifier -> . STR_ID
    (113) identifier -> . VOID_ID
    (114) constant -> . FLOAT_LIT
    (115) constant -> . INT_LIT
    (116) constant -> . CHAR_LIT
    (117) constant -> . STR_LIT
    (81) relational_expression -> . add_expression
    (82) relational_expression -> . relational_expression LT add_expression
    (83) relational_expression -> . relational_expression GT add_expression
    (84) relational_expression -> . relational_expression LE add_expression
    (85) relational_expression -> . relational_expression GE add_expression
    (86) add_expression -> . mult_expression
    (87) add_expression -> . add_expression ADD_OP mult_expression
    (88) add_expression -> . add_expression SUB_OP mult_expression
    (89) mult_expression -> . unary_expression
    (90) mult_expression -> . mult_expression MULT_OP unary_expression
    (91) mult_expression -> . mult_expression DIV_OP unary_expression
    (92) mult_expression -> . mult_expression MOD_OP unary_expression

    PRINT           shift and go to state 37
    PRINTLN         shift and go to state 38
    SCAN            shift and go to state 4
    INC             shift and go to state 36
    DEC             shift and go to state 7
    SUB_OP          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 2
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 30
    CHAR_ID         shift and go to state 13
    STR_ID          shift and go to state 19
    VOID_ID         shift and go to state 23
    FLOAT_LIT       shift and go to state 31
    INT_LIT         shift and go to state 33
    CHAR_LIT        shift and go to state 12
    STR_LIT         shift and go to state 9

    identifier                     shift and go to state 35
    constant                       shift and go to state 1
    assignment_expression          shift and go to state 39
    unary_expression               shift and go to state 3
    relational_expression          shift and go to state 17
    add_expression                 shift and go to state 28
    print_expression               shift and go to state 40
    postfix_expression             shift and go to state 15
    mult_expression                shift and go to state 25
    logical_and_expression         shift and go to state 8
    primary_expression             shift and go to state 26
    expression                     shift and go to state 190
    logical_or_expression          shift and go to state 21
    equality_expression            shift and go to state 29
    scan_expression                shift and go to state 10

state 161

    (53) jump_statement -> BREAK SEMI .

    CASE            reduce using rule 53 (jump_statement -> BREAK SEMI .)
    DEFAULT         reduce using rule 53 (jump_statement -> BREAK SEMI .)
    LBRACE          reduce using rule 53 (jump_statement -> BREAK SEMI .)
    IF              reduce using rule 53 (jump_statement -> BREAK SEMI .)
    SWITCH          reduce using rule 53 (jump_statement -> BREAK SEMI .)
    WHILE           reduce using rule 53 (jump_statement -> BREAK SEMI .)
    FOR             reduce using rule 53 (jump_statement -> BREAK SEMI .)
    DO              reduce using rule 53 (jump_statement -> BREAK SEMI .)
    CONTINUE        reduce using rule 53 (jump_statement -> BREAK SEMI .)
    BREAK           reduce using rule 53 (jump_statement -> BREAK SEMI .)
    RETURN          reduce using rule 53 (jump_statement -> BREAK SEMI .)
    PRINT           reduce using rule 53 (jump_statement -> BREAK SEMI .)
    PRINTLN         reduce using rule 53 (jump_statement -> BREAK SEMI .)
    VAR             reduce using rule 53 (jump_statement -> BREAK SEMI .)
    LPAREN          reduce using rule 53 (jump_statement -> BREAK SEMI .)
    SCAN            reduce using rule 53 (jump_statement -> BREAK SEMI .)
    INC             reduce using rule 53 (jump_statement -> BREAK SEMI .)
    DEC             reduce using rule 53 (jump_statement -> BREAK SEMI .)
    SUB_OP          reduce using rule 53 (jump_statement -> BREAK SEMI .)
    NOT             reduce using rule 53 (jump_statement -> BREAK SEMI .)
    FLOAT_ID        reduce using rule 53 (jump_statement -> BREAK SEMI .)
    INT_ID          reduce using rule 53 (jump_statement -> BREAK SEMI .)
    CHAR_ID         reduce using rule 53 (jump_statement -> BREAK SEMI .)
    STR_ID          reduce using rule 53 (jump_statement -> BREAK SEMI .)
    VOID_ID         reduce using rule 53 (jump_statement -> BREAK SEMI .)
    FLOAT_LIT       reduce using rule 53 (jump_statement -> BREAK SEMI .)
    INT_LIT         reduce using rule 53 (jump_statement -> BREAK SEMI .)
    CHAR_LIT        reduce using rule 53 (jump_statement -> BREAK SEMI .)
    STR_LIT         reduce using rule 53 (jump_statement -> BREAK SEMI .)
    SEMI            reduce using rule 53 (jump_statement -> BREAK SEMI .)
    RBRACE          reduce using rule 53 (jump_statement -> BREAK SEMI .)
    ELSE            reduce using rule 53 (jump_statement -> BREAK SEMI .)


state 162

    (51) iteration_statement -> DO statement . WHILE LPAREN expression RPAREN SEMI

    WHILE           shift and go to state 191


state 163

    (42) mix_list -> statement_list mix_list .

    RBRACE          reduce using rule 42 (mix_list -> statement_list mix_list .)


state 164

    (45) statement_list -> statement_list statement .
    (44) statement_list -> statement .

  ! reduce/reduce conflict for CASE resolved using rule 44 (statement_list -> statement .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 44 (statement_list -> statement .)
  ! reduce/reduce conflict for LBRACE resolved using rule 44 (statement_list -> statement .)
  ! reduce/reduce conflict for IF resolved using rule 44 (statement_list -> statement .)
  ! reduce/reduce conflict for SWITCH resolved using rule 44 (statement_list -> statement .)
  ! reduce/reduce conflict for WHILE resolved using rule 44 (statement_list -> statement .)
  ! reduce/reduce conflict for FOR resolved using rule 44 (statement_list -> statement .)
  ! reduce/reduce conflict for DO resolved using rule 44 (statement_list -> statement .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 44 (statement_list -> statement .)
  ! reduce/reduce conflict for BREAK resolved using rule 44 (statement_list -> statement .)
  ! reduce/reduce conflict for RETURN resolved using rule 44 (statement_list -> statement .)
  ! reduce/reduce conflict for PRINT resolved using rule 44 (statement_list -> statement .)
  ! reduce/reduce conflict for PRINTLN resolved using rule 44 (statement_list -> statement .)
  ! reduce/reduce conflict for VAR resolved using rule 44 (statement_list -> statement .)
  ! reduce/reduce conflict for LPAREN resolved using rule 44 (statement_list -> statement .)
  ! reduce/reduce conflict for SCAN resolved using rule 44 (statement_list -> statement .)
  ! reduce/reduce conflict for INC resolved using rule 44 (statement_list -> statement .)
  ! reduce/reduce conflict for DEC resolved using rule 44 (statement_list -> statement .)
  ! reduce/reduce conflict for SUB_OP resolved using rule 44 (statement_list -> statement .)
  ! reduce/reduce conflict for NOT resolved using rule 44 (statement_list -> statement .)
  ! reduce/reduce conflict for FLOAT_ID resolved using rule 44 (statement_list -> statement .)
  ! reduce/reduce conflict for INT_ID resolved using rule 44 (statement_list -> statement .)
  ! reduce/reduce conflict for CHAR_ID resolved using rule 44 (statement_list -> statement .)
  ! reduce/reduce conflict for STR_ID resolved using rule 44 (statement_list -> statement .)
  ! reduce/reduce conflict for VOID_ID resolved using rule 44 (statement_list -> statement .)
  ! reduce/reduce conflict for FLOAT_LIT resolved using rule 44 (statement_list -> statement .)
  ! reduce/reduce conflict for INT_LIT resolved using rule 44 (statement_list -> statement .)
  ! reduce/reduce conflict for CHAR_LIT resolved using rule 44 (statement_list -> statement .)
  ! reduce/reduce conflict for STR_LIT resolved using rule 44 (statement_list -> statement .)
  ! reduce/reduce conflict for SEMI resolved using rule 44 (statement_list -> statement .)
  ! reduce/reduce conflict for RBRACE resolved using rule 44 (statement_list -> statement .)
    CASE            reduce using rule 44 (statement_list -> statement .)
    DEFAULT         reduce using rule 44 (statement_list -> statement .)
    LBRACE          reduce using rule 44 (statement_list -> statement .)
    IF              reduce using rule 44 (statement_list -> statement .)
    SWITCH          reduce using rule 44 (statement_list -> statement .)
    WHILE           reduce using rule 44 (statement_list -> statement .)
    FOR             reduce using rule 44 (statement_list -> statement .)
    DO              reduce using rule 44 (statement_list -> statement .)
    CONTINUE        reduce using rule 44 (statement_list -> statement .)
    BREAK           reduce using rule 44 (statement_list -> statement .)
    RETURN          reduce using rule 44 (statement_list -> statement .)
    PRINT           reduce using rule 44 (statement_list -> statement .)
    PRINTLN         reduce using rule 44 (statement_list -> statement .)
    VAR             reduce using rule 44 (statement_list -> statement .)
    LPAREN          reduce using rule 44 (statement_list -> statement .)
    SCAN            reduce using rule 44 (statement_list -> statement .)
    INC             reduce using rule 44 (statement_list -> statement .)
    DEC             reduce using rule 44 (statement_list -> statement .)
    SUB_OP          reduce using rule 44 (statement_list -> statement .)
    NOT             reduce using rule 44 (statement_list -> statement .)
    FLOAT_ID        reduce using rule 44 (statement_list -> statement .)
    INT_ID          reduce using rule 44 (statement_list -> statement .)
    CHAR_ID         reduce using rule 44 (statement_list -> statement .)
    STR_ID          reduce using rule 44 (statement_list -> statement .)
    VOID_ID         reduce using rule 44 (statement_list -> statement .)
    FLOAT_LIT       reduce using rule 44 (statement_list -> statement .)
    INT_LIT         reduce using rule 44 (statement_list -> statement .)
    CHAR_LIT        reduce using rule 44 (statement_list -> statement .)
    STR_LIT         reduce using rule 44 (statement_list -> statement .)
    SEMI            reduce using rule 44 (statement_list -> statement .)
    RBRACE          reduce using rule 44 (statement_list -> statement .)

  ! CASE            [ reduce using rule 45 (statement_list -> statement_list statement .) ]
  ! DEFAULT         [ reduce using rule 45 (statement_list -> statement_list statement .) ]
  ! LBRACE          [ reduce using rule 45 (statement_list -> statement_list statement .) ]
  ! IF              [ reduce using rule 45 (statement_list -> statement_list statement .) ]
  ! SWITCH          [ reduce using rule 45 (statement_list -> statement_list statement .) ]
  ! WHILE           [ reduce using rule 45 (statement_list -> statement_list statement .) ]
  ! FOR             [ reduce using rule 45 (statement_list -> statement_list statement .) ]
  ! DO              [ reduce using rule 45 (statement_list -> statement_list statement .) ]
  ! CONTINUE        [ reduce using rule 45 (statement_list -> statement_list statement .) ]
  ! BREAK           [ reduce using rule 45 (statement_list -> statement_list statement .) ]
  ! RETURN          [ reduce using rule 45 (statement_list -> statement_list statement .) ]
  ! PRINT           [ reduce using rule 45 (statement_list -> statement_list statement .) ]
  ! PRINTLN         [ reduce using rule 45 (statement_list -> statement_list statement .) ]
  ! VAR             [ reduce using rule 45 (statement_list -> statement_list statement .) ]
  ! LPAREN          [ reduce using rule 45 (statement_list -> statement_list statement .) ]
  ! SCAN            [ reduce using rule 45 (statement_list -> statement_list statement .) ]
  ! INC             [ reduce using rule 45 (statement_list -> statement_list statement .) ]
  ! DEC             [ reduce using rule 45 (statement_list -> statement_list statement .) ]
  ! SUB_OP          [ reduce using rule 45 (statement_list -> statement_list statement .) ]
  ! NOT             [ reduce using rule 45 (statement_list -> statement_list statement .) ]
  ! FLOAT_ID        [ reduce using rule 45 (statement_list -> statement_list statement .) ]
  ! INT_ID          [ reduce using rule 45 (statement_list -> statement_list statement .) ]
  ! CHAR_ID         [ reduce using rule 45 (statement_list -> statement_list statement .) ]
  ! STR_ID          [ reduce using rule 45 (statement_list -> statement_list statement .) ]
  ! VOID_ID         [ reduce using rule 45 (statement_list -> statement_list statement .) ]
  ! FLOAT_LIT       [ reduce using rule 45 (statement_list -> statement_list statement .) ]
  ! INT_LIT         [ reduce using rule 45 (statement_list -> statement_list statement .) ]
  ! CHAR_LIT        [ reduce using rule 45 (statement_list -> statement_list statement .) ]
  ! STR_LIT         [ reduce using rule 45 (statement_list -> statement_list statement .) ]
  ! SEMI            [ reduce using rule 45 (statement_list -> statement_list statement .) ]
  ! RBRACE          [ reduce using rule 45 (statement_list -> statement_list statement .) ]


state 165

    (46) selection_statement -> IF LPAREN . expression RPAREN statement
    (47) selection_statement -> IF LPAREN . expression RPAREN statement ELSE statement
    (57) expression -> . print_expression
    (58) expression -> . expression COMMA print_expression
    (59) print_expression -> . assignment_expression
    (60) print_expression -> . PRINT LPAREN scan_expression RPAREN
    (61) print_expression -> . PRINTLN LPAREN scan_expression RPAREN
    (62) assignment_expression -> . scan_expression
    (63) assignment_expression -> . unary_expression ASSIGN_OP assignment_expression
    (64) assignment_expression -> . unary_expression ADD_ASSIGN assignment_expression
    (65) assignment_expression -> . unary_expression MIN_ASSIGN assignment_expression
    (66) assignment_expression -> . unary_expression MUL_ASSIGN assignment_expression
    (67) assignment_expression -> . unary_expression DIV_ASSIGN assignment_expression
    (68) assignment_expression -> . unary_expression MOD_ASSIGN assignment_expression
    (69) scan_expression -> . logical_or_expression
    (70) scan_expression -> . SCAN LPAREN RPAREN
    (93) unary_expression -> . postfix_expression
    (94) unary_expression -> . INC unary_expression
    (95) unary_expression -> . DEC unary_expression
    (96) unary_expression -> . SUB_OP add_expression
    (97) unary_expression -> . NOT logical_or_expression
    (74) logical_or_expression -> . logical_and_expression
    (75) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (98) postfix_expression -> . primary_expression
    (99) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (100) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (101) postfix_expression -> . postfix_expression LPAREN RPAREN
    (102) postfix_expression -> . postfix_expression INC
    (103) postfix_expression -> . postfix_expression DEC
    (76) logical_and_expression -> . equality_expression
    (77) logical_and_expression -> . logical_and_expression AND equality_expression
    (104) primary_expression -> . identifier
    (105) primary_expression -> . constant
    (106) primary_expression -> . LPAREN expression RPAREN
    (78) equality_expression -> . relational_expression
    (79) equality_expression -> . equality_expression EQ relational_expression
    (80) equality_expression -> . equality_expression NEQ relational_expression
    (109) identifier -> . FLOAT_ID
    (110) identifier -> . INT_ID
    (111) identifier -> . CHAR_ID
    (112) identifier -> . STR_ID
    (113) identifier -> . VOID_ID
    (114) constant -> . FLOAT_LIT
    (115) constant -> . INT_LIT
    (116) constant -> . CHAR_LIT
    (117) constant -> . STR_LIT
    (81) relational_expression -> . add_expression
    (82) relational_expression -> . relational_expression LT add_expression
    (83) relational_expression -> . relational_expression GT add_expression
    (84) relational_expression -> . relational_expression LE add_expression
    (85) relational_expression -> . relational_expression GE add_expression
    (86) add_expression -> . mult_expression
    (87) add_expression -> . add_expression ADD_OP mult_expression
    (88) add_expression -> . add_expression SUB_OP mult_expression
    (89) mult_expression -> . unary_expression
    (90) mult_expression -> . mult_expression MULT_OP unary_expression
    (91) mult_expression -> . mult_expression DIV_OP unary_expression
    (92) mult_expression -> . mult_expression MOD_OP unary_expression

    PRINT           shift and go to state 37
    PRINTLN         shift and go to state 38
    SCAN            shift and go to state 4
    INC             shift and go to state 36
    DEC             shift and go to state 7
    SUB_OP          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 2
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 30
    CHAR_ID         shift and go to state 13
    STR_ID          shift and go to state 19
    VOID_ID         shift and go to state 23
    FLOAT_LIT       shift and go to state 31
    INT_LIT         shift and go to state 33
    CHAR_LIT        shift and go to state 12
    STR_LIT         shift and go to state 9

    identifier                     shift and go to state 35
    constant                       shift and go to state 1
    assignment_expression          shift and go to state 39
    unary_expression               shift and go to state 3
    relational_expression          shift and go to state 17
    add_expression                 shift and go to state 28
    print_expression               shift and go to state 40
    postfix_expression             shift and go to state 15
    mult_expression                shift and go to state 25
    logical_and_expression         shift and go to state 8
    primary_expression             shift and go to state 26
    expression                     shift and go to state 192
    logical_or_expression          shift and go to state 21
    equality_expression            shift and go to state 29
    scan_expression                shift and go to state 10

state 166

    (37) expression_statement -> expression_opt SEMI .

    CASE            reduce using rule 37 (expression_statement -> expression_opt SEMI .)
    DEFAULT         reduce using rule 37 (expression_statement -> expression_opt SEMI .)
    LBRACE          reduce using rule 37 (expression_statement -> expression_opt SEMI .)
    IF              reduce using rule 37 (expression_statement -> expression_opt SEMI .)
    SWITCH          reduce using rule 37 (expression_statement -> expression_opt SEMI .)
    WHILE           reduce using rule 37 (expression_statement -> expression_opt SEMI .)
    FOR             reduce using rule 37 (expression_statement -> expression_opt SEMI .)
    DO              reduce using rule 37 (expression_statement -> expression_opt SEMI .)
    CONTINUE        reduce using rule 37 (expression_statement -> expression_opt SEMI .)
    BREAK           reduce using rule 37 (expression_statement -> expression_opt SEMI .)
    RETURN          reduce using rule 37 (expression_statement -> expression_opt SEMI .)
    PRINT           reduce using rule 37 (expression_statement -> expression_opt SEMI .)
    PRINTLN         reduce using rule 37 (expression_statement -> expression_opt SEMI .)
    VAR             reduce using rule 37 (expression_statement -> expression_opt SEMI .)
    LPAREN          reduce using rule 37 (expression_statement -> expression_opt SEMI .)
    SCAN            reduce using rule 37 (expression_statement -> expression_opt SEMI .)
    INC             reduce using rule 37 (expression_statement -> expression_opt SEMI .)
    DEC             reduce using rule 37 (expression_statement -> expression_opt SEMI .)
    SUB_OP          reduce using rule 37 (expression_statement -> expression_opt SEMI .)
    NOT             reduce using rule 37 (expression_statement -> expression_opt SEMI .)
    FLOAT_ID        reduce using rule 37 (expression_statement -> expression_opt SEMI .)
    INT_ID          reduce using rule 37 (expression_statement -> expression_opt SEMI .)
    CHAR_ID         reduce using rule 37 (expression_statement -> expression_opt SEMI .)
    STR_ID          reduce using rule 37 (expression_statement -> expression_opt SEMI .)
    VOID_ID         reduce using rule 37 (expression_statement -> expression_opt SEMI .)
    FLOAT_LIT       reduce using rule 37 (expression_statement -> expression_opt SEMI .)
    INT_LIT         reduce using rule 37 (expression_statement -> expression_opt SEMI .)
    CHAR_LIT        reduce using rule 37 (expression_statement -> expression_opt SEMI .)
    STR_LIT         reduce using rule 37 (expression_statement -> expression_opt SEMI .)
    SEMI            reduce using rule 37 (expression_statement -> expression_opt SEMI .)
    RBRACE          reduce using rule 37 (expression_statement -> expression_opt SEMI .)
    ELSE            reduce using rule 37 (expression_statement -> expression_opt SEMI .)


state 167

    (99) postfix_expression -> postfix_expression LBRACKET expression RBRACKET .

    LBRACKET        reduce using rule 99 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 99 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    INC             reduce using rule 99 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DEC             reduce using rule 99 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    ASSIGN_OP       reduce using rule 99 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    ADD_ASSIGN      reduce using rule 99 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MIN_ASSIGN      reduce using rule 99 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MUL_ASSIGN      reduce using rule 99 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DIV_ASSIGN      reduce using rule 99 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MOD_ASSIGN      reduce using rule 99 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MULT_OP         reduce using rule 99 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DIV_OP          reduce using rule 99 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MOD_OP          reduce using rule 99 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    ADD_OP          reduce using rule 99 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    SUB_OP          reduce using rule 99 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LT              reduce using rule 99 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    GT              reduce using rule 99 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LE              reduce using rule 99 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    GE              reduce using rule 99 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQ              reduce using rule 99 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    NEQ             reduce using rule 99 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    OR              reduce using rule 99 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    AND             reduce using rule 99 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    SCAN            reduce using rule 99 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    NOT             reduce using rule 99 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    VAR             reduce using rule 99 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    FLOAT_ID        reduce using rule 99 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    INT_ID          reduce using rule 99 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    CHAR_ID         reduce using rule 99 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    STR_ID          reduce using rule 99 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    VOID_ID         reduce using rule 99 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    FLOAT_LIT       reduce using rule 99 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    INT_LIT         reduce using rule 99 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    CHAR_LIT        reduce using rule 99 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    STR_LIT         reduce using rule 99 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MAIN            reduce using rule 99 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 99 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 99 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    $end            reduce using rule 99 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    SEMI            reduce using rule 99 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 99 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 99 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    COLON           reduce using rule 99 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)


state 168

    (100) postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .

    LBRACKET        reduce using rule 100 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LPAREN          reduce using rule 100 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    INC             reduce using rule 100 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    DEC             reduce using rule 100 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    ASSIGN_OP       reduce using rule 100 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    ADD_ASSIGN      reduce using rule 100 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MIN_ASSIGN      reduce using rule 100 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MUL_ASSIGN      reduce using rule 100 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    DIV_ASSIGN      reduce using rule 100 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MOD_ASSIGN      reduce using rule 100 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MULT_OP         reduce using rule 100 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    DIV_OP          reduce using rule 100 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MOD_OP          reduce using rule 100 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    ADD_OP          reduce using rule 100 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    SUB_OP          reduce using rule 100 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LT              reduce using rule 100 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    GT              reduce using rule 100 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LE              reduce using rule 100 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    GE              reduce using rule 100 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    EQ              reduce using rule 100 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    NEQ             reduce using rule 100 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    OR              reduce using rule 100 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    AND             reduce using rule 100 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    SCAN            reduce using rule 100 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    NOT             reduce using rule 100 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    VAR             reduce using rule 100 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    FLOAT_ID        reduce using rule 100 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    INT_ID          reduce using rule 100 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    CHAR_ID         reduce using rule 100 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    STR_ID          reduce using rule 100 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    VOID_ID         reduce using rule 100 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    FLOAT_LIT       reduce using rule 100 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    INT_LIT         reduce using rule 100 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    CHAR_LIT        reduce using rule 100 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    STR_LIT         reduce using rule 100 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MAIN            reduce using rule 100 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RPAREN          reduce using rule 100 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    COMMA           reduce using rule 100 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    $end            reduce using rule 100 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    SEMI            reduce using rule 100 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RBRACKET        reduce using rule 100 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RBRACE          reduce using rule 100 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    COLON           reduce using rule 100 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)


state 169

    (108) argument_expression_list -> argument_expression_list COMMA . assignment_expression
    (62) assignment_expression -> . scan_expression
    (63) assignment_expression -> . unary_expression ASSIGN_OP assignment_expression
    (64) assignment_expression -> . unary_expression ADD_ASSIGN assignment_expression
    (65) assignment_expression -> . unary_expression MIN_ASSIGN assignment_expression
    (66) assignment_expression -> . unary_expression MUL_ASSIGN assignment_expression
    (67) assignment_expression -> . unary_expression DIV_ASSIGN assignment_expression
    (68) assignment_expression -> . unary_expression MOD_ASSIGN assignment_expression
    (69) scan_expression -> . logical_or_expression
    (70) scan_expression -> . SCAN LPAREN RPAREN
    (93) unary_expression -> . postfix_expression
    (94) unary_expression -> . INC unary_expression
    (95) unary_expression -> . DEC unary_expression
    (96) unary_expression -> . SUB_OP add_expression
    (97) unary_expression -> . NOT logical_or_expression
    (74) logical_or_expression -> . logical_and_expression
    (75) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (98) postfix_expression -> . primary_expression
    (99) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (100) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (101) postfix_expression -> . postfix_expression LPAREN RPAREN
    (102) postfix_expression -> . postfix_expression INC
    (103) postfix_expression -> . postfix_expression DEC
    (76) logical_and_expression -> . equality_expression
    (77) logical_and_expression -> . logical_and_expression AND equality_expression
    (104) primary_expression -> . identifier
    (105) primary_expression -> . constant
    (106) primary_expression -> . LPAREN expression RPAREN
    (78) equality_expression -> . relational_expression
    (79) equality_expression -> . equality_expression EQ relational_expression
    (80) equality_expression -> . equality_expression NEQ relational_expression
    (109) identifier -> . FLOAT_ID
    (110) identifier -> . INT_ID
    (111) identifier -> . CHAR_ID
    (112) identifier -> . STR_ID
    (113) identifier -> . VOID_ID
    (114) constant -> . FLOAT_LIT
    (115) constant -> . INT_LIT
    (116) constant -> . CHAR_LIT
    (117) constant -> . STR_LIT
    (81) relational_expression -> . add_expression
    (82) relational_expression -> . relational_expression LT add_expression
    (83) relational_expression -> . relational_expression GT add_expression
    (84) relational_expression -> . relational_expression LE add_expression
    (85) relational_expression -> . relational_expression GE add_expression
    (86) add_expression -> . mult_expression
    (87) add_expression -> . add_expression ADD_OP mult_expression
    (88) add_expression -> . add_expression SUB_OP mult_expression
    (89) mult_expression -> . unary_expression
    (90) mult_expression -> . mult_expression MULT_OP unary_expression
    (91) mult_expression -> . mult_expression DIV_OP unary_expression
    (92) mult_expression -> . mult_expression MOD_OP unary_expression

    SCAN            shift and go to state 4
    INC             shift and go to state 36
    DEC             shift and go to state 7
    SUB_OP          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 2
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 30
    CHAR_ID         shift and go to state 13
    STR_ID          shift and go to state 19
    VOID_ID         shift and go to state 23
    FLOAT_LIT       shift and go to state 31
    INT_LIT         shift and go to state 33
    CHAR_LIT        shift and go to state 12
    STR_LIT         shift and go to state 9

    constant                       shift and go to state 1
    assignment_expression          shift and go to state 193
    unary_expression               shift and go to state 3
    relational_expression          shift and go to state 17
    postfix_expression             shift and go to state 15
    primary_expression             shift and go to state 26
    mult_expression                shift and go to state 25
    logical_and_expression         shift and go to state 8
    identifier                     shift and go to state 35
    add_expression                 shift and go to state 28
    logical_or_expression          shift and go to state 21
    equality_expression            shift and go to state 29
    scan_expression                shift and go to state 10

state 170

    (25) fxn_declaration -> VAR identifier LPAREN fxn_prot_args . RPAREN

    RPAREN          shift and go to state 194


state 171

    (27) fxn_prot_args -> identifier . COMMA fxn_prot_args
    (28) fxn_prot_args -> identifier .

    COMMA           shift and go to state 195
    RPAREN          reduce using rule 28 (fxn_prot_args -> identifier .)


state 172

    (26) fxn_declaration -> VAR identifier LPAREN empty . RPAREN

    RPAREN          shift and go to state 196


state 173

    (60) print_expression -> PRINT LPAREN scan_expression RPAREN .

    RPAREN          reduce using rule 60 (print_expression -> PRINT LPAREN scan_expression RPAREN .)
    COMMA           reduce using rule 60 (print_expression -> PRINT LPAREN scan_expression RPAREN .)
    SEMI            reduce using rule 60 (print_expression -> PRINT LPAREN scan_expression RPAREN .)
    RBRACKET        reduce using rule 60 (print_expression -> PRINT LPAREN scan_expression RPAREN .)


state 174

    (61) print_expression -> PRINTLN LPAREN scan_expression RPAREN .

    RPAREN          reduce using rule 61 (print_expression -> PRINTLN LPAREN scan_expression RPAREN .)
    COMMA           reduce using rule 61 (print_expression -> PRINTLN LPAREN scan_expression RPAREN .)
    SEMI            reduce using rule 61 (print_expression -> PRINTLN LPAREN scan_expression RPAREN .)
    RBRACKET        reduce using rule 61 (print_expression -> PRINTLN LPAREN scan_expression RPAREN .)


state 175

    (5) main -> MAIN LPAREN empty RPAREN . compound_statement
    (38) compound_statement -> . LBRACE mix_list RBRACE
    (39) compound_statement -> . LBRACE RBRACE

    LBRACE          shift and go to state 55

    compound_statement             shift and go to state 197

state 176

    (16) declarator -> LPAREN . declarator RPAREN
    (15) declarator -> . VAR identifier
    (16) declarator -> . LPAREN declarator RPAREN
    (17) declarator -> . declarator LBRACKET constant_expression_opt RBRACKET

    VAR             shift and go to state 98
    LPAREN          shift and go to state 176

    declarator                     shift and go to state 155

state 177

    (12) init_declarator_list -> init_declarator_list COMMA init_declarator .

    SEMI            reduce using rule 12 (init_declarator_list -> init_declarator_list COMMA init_declarator .)
    COMMA           reduce using rule 12 (init_declarator_list -> init_declarator_list COMMA init_declarator .)


state 178

    (71) constant_expression_opt -> empty .

    RBRACKET        reduce using rule 71 (constant_expression_opt -> empty .)


state 179

    (17) declarator -> declarator LBRACKET constant_expression_opt . RBRACKET

    RBRACKET        shift and go to state 198


state 180

    (72) constant_expression_opt -> constant_expression .

    RBRACKET        reduce using rule 72 (constant_expression_opt -> constant_expression .)


state 181

    (14) init_declarator -> declarator ASSIGN_OP initializer .

    SEMI            reduce using rule 14 (init_declarator -> declarator ASSIGN_OP initializer .)
    COMMA           reduce using rule 14 (init_declarator -> declarator ASSIGN_OP initializer .)


state 182

    (18) initializer -> assignment_expression .

    RBRACE          reduce using rule 18 (initializer -> assignment_expression .)
    COMMA           reduce using rule 18 (initializer -> assignment_expression .)
    SEMI            reduce using rule 18 (initializer -> assignment_expression .)


state 183

    (19) initializer -> LBRACE . initializer_list RBRACE
    (20) initializer -> LBRACE . initializer_list COMMA RBRACE
    (21) initializer_list -> . initializer
    (22) initializer_list -> . initializer_list COMMA initializer
    (18) initializer -> . assignment_expression
    (19) initializer -> . LBRACE initializer_list RBRACE
    (20) initializer -> . LBRACE initializer_list COMMA RBRACE
    (62) assignment_expression -> . scan_expression
    (63) assignment_expression -> . unary_expression ASSIGN_OP assignment_expression
    (64) assignment_expression -> . unary_expression ADD_ASSIGN assignment_expression
    (65) assignment_expression -> . unary_expression MIN_ASSIGN assignment_expression
    (66) assignment_expression -> . unary_expression MUL_ASSIGN assignment_expression
    (67) assignment_expression -> . unary_expression DIV_ASSIGN assignment_expression
    (68) assignment_expression -> . unary_expression MOD_ASSIGN assignment_expression
    (69) scan_expression -> . logical_or_expression
    (70) scan_expression -> . SCAN LPAREN RPAREN
    (93) unary_expression -> . postfix_expression
    (94) unary_expression -> . INC unary_expression
    (95) unary_expression -> . DEC unary_expression
    (96) unary_expression -> . SUB_OP add_expression
    (97) unary_expression -> . NOT logical_or_expression
    (74) logical_or_expression -> . logical_and_expression
    (75) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (98) postfix_expression -> . primary_expression
    (99) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (100) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (101) postfix_expression -> . postfix_expression LPAREN RPAREN
    (102) postfix_expression -> . postfix_expression INC
    (103) postfix_expression -> . postfix_expression DEC
    (76) logical_and_expression -> . equality_expression
    (77) logical_and_expression -> . logical_and_expression AND equality_expression
    (104) primary_expression -> . identifier
    (105) primary_expression -> . constant
    (106) primary_expression -> . LPAREN expression RPAREN
    (78) equality_expression -> . relational_expression
    (79) equality_expression -> . equality_expression EQ relational_expression
    (80) equality_expression -> . equality_expression NEQ relational_expression
    (109) identifier -> . FLOAT_ID
    (110) identifier -> . INT_ID
    (111) identifier -> . CHAR_ID
    (112) identifier -> . STR_ID
    (113) identifier -> . VOID_ID
    (114) constant -> . FLOAT_LIT
    (115) constant -> . INT_LIT
    (116) constant -> . CHAR_LIT
    (117) constant -> . STR_LIT
    (81) relational_expression -> . add_expression
    (82) relational_expression -> . relational_expression LT add_expression
    (83) relational_expression -> . relational_expression GT add_expression
    (84) relational_expression -> . relational_expression LE add_expression
    (85) relational_expression -> . relational_expression GE add_expression
    (86) add_expression -> . mult_expression
    (87) add_expression -> . add_expression ADD_OP mult_expression
    (88) add_expression -> . add_expression SUB_OP mult_expression
    (89) mult_expression -> . unary_expression
    (90) mult_expression -> . mult_expression MULT_OP unary_expression
    (91) mult_expression -> . mult_expression DIV_OP unary_expression
    (92) mult_expression -> . mult_expression MOD_OP unary_expression

    LBRACE          shift and go to state 183
    SCAN            shift and go to state 4
    INC             shift and go to state 36
    DEC             shift and go to state 7
    SUB_OP          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 2
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 30
    CHAR_ID         shift and go to state 13
    STR_ID          shift and go to state 19
    VOID_ID         shift and go to state 23
    FLOAT_LIT       shift and go to state 31
    INT_LIT         shift and go to state 33
    CHAR_LIT        shift and go to state 12
    STR_LIT         shift and go to state 9

    constant                       shift and go to state 1
    assignment_expression          shift and go to state 182
    unary_expression               shift and go to state 3
    relational_expression          shift and go to state 17
    postfix_expression             shift and go to state 15
    initializer                    shift and go to state 199
    primary_expression             shift and go to state 26
    initializer_list               shift and go to state 200
    mult_expression                shift and go to state 25
    logical_and_expression         shift and go to state 8
    identifier                     shift and go to state 35
    add_expression                 shift and go to state 28
    logical_or_expression          shift and go to state 21
    equality_expression            shift and go to state 29
    scan_expression                shift and go to state 10

state 184

    (54) jump_statement -> RETURN expression_opt SEMI .

    CASE            reduce using rule 54 (jump_statement -> RETURN expression_opt SEMI .)
    DEFAULT         reduce using rule 54 (jump_statement -> RETURN expression_opt SEMI .)
    LBRACE          reduce using rule 54 (jump_statement -> RETURN expression_opt SEMI .)
    IF              reduce using rule 54 (jump_statement -> RETURN expression_opt SEMI .)
    SWITCH          reduce using rule 54 (jump_statement -> RETURN expression_opt SEMI .)
    WHILE           reduce using rule 54 (jump_statement -> RETURN expression_opt SEMI .)
    FOR             reduce using rule 54 (jump_statement -> RETURN expression_opt SEMI .)
    DO              reduce using rule 54 (jump_statement -> RETURN expression_opt SEMI .)
    CONTINUE        reduce using rule 54 (jump_statement -> RETURN expression_opt SEMI .)
    BREAK           reduce using rule 54 (jump_statement -> RETURN expression_opt SEMI .)
    RETURN          reduce using rule 54 (jump_statement -> RETURN expression_opt SEMI .)
    PRINT           reduce using rule 54 (jump_statement -> RETURN expression_opt SEMI .)
    PRINTLN         reduce using rule 54 (jump_statement -> RETURN expression_opt SEMI .)
    VAR             reduce using rule 54 (jump_statement -> RETURN expression_opt SEMI .)
    LPAREN          reduce using rule 54 (jump_statement -> RETURN expression_opt SEMI .)
    SCAN            reduce using rule 54 (jump_statement -> RETURN expression_opt SEMI .)
    INC             reduce using rule 54 (jump_statement -> RETURN expression_opt SEMI .)
    DEC             reduce using rule 54 (jump_statement -> RETURN expression_opt SEMI .)
    SUB_OP          reduce using rule 54 (jump_statement -> RETURN expression_opt SEMI .)
    NOT             reduce using rule 54 (jump_statement -> RETURN expression_opt SEMI .)
    FLOAT_ID        reduce using rule 54 (jump_statement -> RETURN expression_opt SEMI .)
    INT_ID          reduce using rule 54 (jump_statement -> RETURN expression_opt SEMI .)
    CHAR_ID         reduce using rule 54 (jump_statement -> RETURN expression_opt SEMI .)
    STR_ID          reduce using rule 54 (jump_statement -> RETURN expression_opt SEMI .)
    VOID_ID         reduce using rule 54 (jump_statement -> RETURN expression_opt SEMI .)
    FLOAT_LIT       reduce using rule 54 (jump_statement -> RETURN expression_opt SEMI .)
    INT_LIT         reduce using rule 54 (jump_statement -> RETURN expression_opt SEMI .)
    CHAR_LIT        reduce using rule 54 (jump_statement -> RETURN expression_opt SEMI .)
    STR_LIT         reduce using rule 54 (jump_statement -> RETURN expression_opt SEMI .)
    SEMI            reduce using rule 54 (jump_statement -> RETURN expression_opt SEMI .)
    RBRACE          reduce using rule 54 (jump_statement -> RETURN expression_opt SEMI .)
    ELSE            reduce using rule 54 (jump_statement -> RETURN expression_opt SEMI .)


state 185

    (50) iteration_statement -> FOR LPAREN expression_opt . SEMI expression_opt SEMI expression_opt RPAREN statement

    SEMI            shift and go to state 201


state 186

    (16) declarator -> LPAREN declarator RPAREN .

    ASSIGN_OP       reduce using rule 16 (declarator -> LPAREN declarator RPAREN .)
    LBRACKET        reduce using rule 16 (declarator -> LPAREN declarator RPAREN .)
    SEMI            reduce using rule 16 (declarator -> LPAREN declarator RPAREN .)
    COMMA           reduce using rule 16 (declarator -> LPAREN declarator RPAREN .)
    RPAREN          reduce using rule 16 (declarator -> LPAREN declarator RPAREN .)


state 187

    (36) labeled_statement -> DEFAULT COLON statement .

    CASE            reduce using rule 36 (labeled_statement -> DEFAULT COLON statement .)
    DEFAULT         reduce using rule 36 (labeled_statement -> DEFAULT COLON statement .)
    LBRACE          reduce using rule 36 (labeled_statement -> DEFAULT COLON statement .)
    IF              reduce using rule 36 (labeled_statement -> DEFAULT COLON statement .)
    SWITCH          reduce using rule 36 (labeled_statement -> DEFAULT COLON statement .)
    WHILE           reduce using rule 36 (labeled_statement -> DEFAULT COLON statement .)
    FOR             reduce using rule 36 (labeled_statement -> DEFAULT COLON statement .)
    DO              reduce using rule 36 (labeled_statement -> DEFAULT COLON statement .)
    CONTINUE        reduce using rule 36 (labeled_statement -> DEFAULT COLON statement .)
    BREAK           reduce using rule 36 (labeled_statement -> DEFAULT COLON statement .)
    RETURN          reduce using rule 36 (labeled_statement -> DEFAULT COLON statement .)
    PRINT           reduce using rule 36 (labeled_statement -> DEFAULT COLON statement .)
    PRINTLN         reduce using rule 36 (labeled_statement -> DEFAULT COLON statement .)
    VAR             reduce using rule 36 (labeled_statement -> DEFAULT COLON statement .)
    LPAREN          reduce using rule 36 (labeled_statement -> DEFAULT COLON statement .)
    SCAN            reduce using rule 36 (labeled_statement -> DEFAULT COLON statement .)
    INC             reduce using rule 36 (labeled_statement -> DEFAULT COLON statement .)
    DEC             reduce using rule 36 (labeled_statement -> DEFAULT COLON statement .)
    SUB_OP          reduce using rule 36 (labeled_statement -> DEFAULT COLON statement .)
    NOT             reduce using rule 36 (labeled_statement -> DEFAULT COLON statement .)
    FLOAT_ID        reduce using rule 36 (labeled_statement -> DEFAULT COLON statement .)
    INT_ID          reduce using rule 36 (labeled_statement -> DEFAULT COLON statement .)
    CHAR_ID         reduce using rule 36 (labeled_statement -> DEFAULT COLON statement .)
    STR_ID          reduce using rule 36 (labeled_statement -> DEFAULT COLON statement .)
    VOID_ID         reduce using rule 36 (labeled_statement -> DEFAULT COLON statement .)
    FLOAT_LIT       reduce using rule 36 (labeled_statement -> DEFAULT COLON statement .)
    INT_LIT         reduce using rule 36 (labeled_statement -> DEFAULT COLON statement .)
    CHAR_LIT        reduce using rule 36 (labeled_statement -> DEFAULT COLON statement .)
    STR_LIT         reduce using rule 36 (labeled_statement -> DEFAULT COLON statement .)
    SEMI            reduce using rule 36 (labeled_statement -> DEFAULT COLON statement .)
    RBRACE          reduce using rule 36 (labeled_statement -> DEFAULT COLON statement .)
    ELSE            reduce using rule 36 (labeled_statement -> DEFAULT COLON statement .)


state 188

    (49) iteration_statement -> WHILE LPAREN expression . RPAREN statement
    (58) expression -> expression . COMMA print_expression

    RPAREN          shift and go to state 202
    COMMA           shift and go to state 82


state 189

    (35) labeled_statement -> CASE constant_expression COLON . statement
    (29) statement -> . labeled_statement
    (30) statement -> . expression_statement
    (31) statement -> . compound_statement
    (32) statement -> . selection_statement
    (33) statement -> . iteration_statement
    (34) statement -> . jump_statement
    (35) labeled_statement -> . CASE constant_expression COLON statement
    (36) labeled_statement -> . DEFAULT COLON statement
    (37) expression_statement -> . expression_opt SEMI
    (38) compound_statement -> . LBRACE mix_list RBRACE
    (39) compound_statement -> . LBRACE RBRACE
    (46) selection_statement -> . IF LPAREN expression RPAREN statement
    (47) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (48) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (49) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (50) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (51) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (52) jump_statement -> . CONTINUE SEMI
    (53) jump_statement -> . BREAK SEMI
    (54) jump_statement -> . RETURN expression_opt SEMI
    (55) expression_opt -> . empty
    (56) expression_opt -> . expression
    (118) empty -> .
    (57) expression -> . print_expression
    (58) expression -> . expression COMMA print_expression
    (59) print_expression -> . assignment_expression
    (60) print_expression -> . PRINT LPAREN scan_expression RPAREN
    (61) print_expression -> . PRINTLN LPAREN scan_expression RPAREN
    (62) assignment_expression -> . scan_expression
    (63) assignment_expression -> . unary_expression ASSIGN_OP assignment_expression
    (64) assignment_expression -> . unary_expression ADD_ASSIGN assignment_expression
    (65) assignment_expression -> . unary_expression MIN_ASSIGN assignment_expression
    (66) assignment_expression -> . unary_expression MUL_ASSIGN assignment_expression
    (67) assignment_expression -> . unary_expression DIV_ASSIGN assignment_expression
    (68) assignment_expression -> . unary_expression MOD_ASSIGN assignment_expression
    (69) scan_expression -> . logical_or_expression
    (70) scan_expression -> . SCAN LPAREN RPAREN
    (93) unary_expression -> . postfix_expression
    (94) unary_expression -> . INC unary_expression
    (95) unary_expression -> . DEC unary_expression
    (96) unary_expression -> . SUB_OP add_expression
    (97) unary_expression -> . NOT logical_or_expression
    (74) logical_or_expression -> . logical_and_expression
    (75) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (98) postfix_expression -> . primary_expression
    (99) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (100) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (101) postfix_expression -> . postfix_expression LPAREN RPAREN
    (102) postfix_expression -> . postfix_expression INC
    (103) postfix_expression -> . postfix_expression DEC
    (76) logical_and_expression -> . equality_expression
    (77) logical_and_expression -> . logical_and_expression AND equality_expression
    (104) primary_expression -> . identifier
    (105) primary_expression -> . constant
    (106) primary_expression -> . LPAREN expression RPAREN
    (78) equality_expression -> . relational_expression
    (79) equality_expression -> . equality_expression EQ relational_expression
    (80) equality_expression -> . equality_expression NEQ relational_expression
    (109) identifier -> . FLOAT_ID
    (110) identifier -> . INT_ID
    (111) identifier -> . CHAR_ID
    (112) identifier -> . STR_ID
    (113) identifier -> . VOID_ID
    (114) constant -> . FLOAT_LIT
    (115) constant -> . INT_LIT
    (116) constant -> . CHAR_LIT
    (117) constant -> . STR_LIT
    (81) relational_expression -> . add_expression
    (82) relational_expression -> . relational_expression LT add_expression
    (83) relational_expression -> . relational_expression GT add_expression
    (84) relational_expression -> . relational_expression LE add_expression
    (85) relational_expression -> . relational_expression GE add_expression
    (86) add_expression -> . mult_expression
    (87) add_expression -> . add_expression ADD_OP mult_expression
    (88) add_expression -> . add_expression SUB_OP mult_expression
    (89) mult_expression -> . unary_expression
    (90) mult_expression -> . mult_expression MULT_OP unary_expression
    (91) mult_expression -> . mult_expression DIV_OP unary_expression
    (92) mult_expression -> . mult_expression MOD_OP unary_expression

    CASE            shift and go to state 112
    DEFAULT         shift and go to state 110
    LBRACE          shift and go to state 55
    IF              shift and go to state 122
    SWITCH          shift and go to state 113
    WHILE           shift and go to state 111
    FOR             shift and go to state 105
    DO              shift and go to state 119
    CONTINUE        shift and go to state 107
    BREAK           shift and go to state 117
    RETURN          shift and go to state 102
    SEMI            reduce using rule 118 (empty -> .)
    PRINT           shift and go to state 37
    PRINTLN         shift and go to state 38
    SCAN            shift and go to state 4
    INC             shift and go to state 36
    DEC             shift and go to state 7
    SUB_OP          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 2
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 30
    CHAR_ID         shift and go to state 13
    STR_ID          shift and go to state 19
    VOID_ID         shift and go to state 23
    FLOAT_LIT       shift and go to state 31
    INT_LIT         shift and go to state 33
    CHAR_LIT        shift and go to state 12
    STR_LIT         shift and go to state 9

    expression_statement           shift and go to state 94
    constant                       shift and go to state 1
    unary_expression               shift and go to state 3
    iteration_statement            shift and go to state 96
    scan_expression                shift and go to state 10
    compound_statement             shift and go to state 104
    selection_statement            shift and go to state 120
    postfix_expression             shift and go to state 15
    relational_expression          shift and go to state 17
    statement                      shift and go to state 203
    logical_or_expression          shift and go to state 21
    empty                          shift and go to state 118
    assignment_expression          shift and go to state 39
    print_expression               shift and go to state 40
    expression_opt                 shift and go to state 123
    primary_expression             shift and go to state 26
    logical_and_expression         shift and go to state 8
    add_expression                 shift and go to state 28
    equality_expression            shift and go to state 29
    jump_statement                 shift and go to state 116
    labeled_statement              shift and go to state 103
    mult_expression                shift and go to state 25
    identifier                     shift and go to state 35
    expression                     shift and go to state 108

state 190

    (48) selection_statement -> SWITCH LPAREN expression . RPAREN statement
    (58) expression -> expression . COMMA print_expression

    RPAREN          shift and go to state 204
    COMMA           shift and go to state 82


state 191

    (51) iteration_statement -> DO statement WHILE . LPAREN expression RPAREN SEMI

    LPAREN          shift and go to state 205


state 192

    (46) selection_statement -> IF LPAREN expression . RPAREN statement
    (47) selection_statement -> IF LPAREN expression . RPAREN statement ELSE statement
    (58) expression -> expression . COMMA print_expression

    RPAREN          shift and go to state 206
    COMMA           shift and go to state 82


state 193

    (108) argument_expression_list -> argument_expression_list COMMA assignment_expression .

    RPAREN          reduce using rule 108 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)
    COMMA           reduce using rule 108 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)


state 194

    (25) fxn_declaration -> VAR identifier LPAREN fxn_prot_args RPAREN .

    SEMI            reduce using rule 25 (fxn_declaration -> VAR identifier LPAREN fxn_prot_args RPAREN .)
    LBRACE          reduce using rule 25 (fxn_declaration -> VAR identifier LPAREN fxn_prot_args RPAREN .)


state 195

    (27) fxn_prot_args -> identifier COMMA . fxn_prot_args
    (27) fxn_prot_args -> . identifier COMMA fxn_prot_args
    (28) fxn_prot_args -> . identifier
    (109) identifier -> . FLOAT_ID
    (110) identifier -> . INT_ID
    (111) identifier -> . CHAR_ID
    (112) identifier -> . STR_ID
    (113) identifier -> . VOID_ID

    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 30
    CHAR_ID         shift and go to state 13
    STR_ID          shift and go to state 19
    VOID_ID         shift and go to state 23

    identifier                     shift and go to state 171
    fxn_prot_args                  shift and go to state 207

state 196

    (26) fxn_declaration -> VAR identifier LPAREN empty RPAREN .

    SEMI            reduce using rule 26 (fxn_declaration -> VAR identifier LPAREN empty RPAREN .)
    LBRACE          reduce using rule 26 (fxn_declaration -> VAR identifier LPAREN empty RPAREN .)


state 197

    (5) main -> MAIN LPAREN empty RPAREN compound_statement .

    SCAN            reduce using rule 5 (main -> MAIN LPAREN empty RPAREN compound_statement .)
    INC             reduce using rule 5 (main -> MAIN LPAREN empty RPAREN compound_statement .)
    DEC             reduce using rule 5 (main -> MAIN LPAREN empty RPAREN compound_statement .)
    SUB_OP          reduce using rule 5 (main -> MAIN LPAREN empty RPAREN compound_statement .)
    NOT             reduce using rule 5 (main -> MAIN LPAREN empty RPAREN compound_statement .)
    VAR             reduce using rule 5 (main -> MAIN LPAREN empty RPAREN compound_statement .)
    LPAREN          reduce using rule 5 (main -> MAIN LPAREN empty RPAREN compound_statement .)
    FLOAT_ID        reduce using rule 5 (main -> MAIN LPAREN empty RPAREN compound_statement .)
    INT_ID          reduce using rule 5 (main -> MAIN LPAREN empty RPAREN compound_statement .)
    CHAR_ID         reduce using rule 5 (main -> MAIN LPAREN empty RPAREN compound_statement .)
    STR_ID          reduce using rule 5 (main -> MAIN LPAREN empty RPAREN compound_statement .)
    VOID_ID         reduce using rule 5 (main -> MAIN LPAREN empty RPAREN compound_statement .)
    FLOAT_LIT       reduce using rule 5 (main -> MAIN LPAREN empty RPAREN compound_statement .)
    INT_LIT         reduce using rule 5 (main -> MAIN LPAREN empty RPAREN compound_statement .)
    CHAR_LIT        reduce using rule 5 (main -> MAIN LPAREN empty RPAREN compound_statement .)
    STR_LIT         reduce using rule 5 (main -> MAIN LPAREN empty RPAREN compound_statement .)
    $end            reduce using rule 5 (main -> MAIN LPAREN empty RPAREN compound_statement .)


state 198

    (17) declarator -> declarator LBRACKET constant_expression_opt RBRACKET .

    ASSIGN_OP       reduce using rule 17 (declarator -> declarator LBRACKET constant_expression_opt RBRACKET .)
    LBRACKET        reduce using rule 17 (declarator -> declarator LBRACKET constant_expression_opt RBRACKET .)
    SEMI            reduce using rule 17 (declarator -> declarator LBRACKET constant_expression_opt RBRACKET .)
    COMMA           reduce using rule 17 (declarator -> declarator LBRACKET constant_expression_opt RBRACKET .)
    RPAREN          reduce using rule 17 (declarator -> declarator LBRACKET constant_expression_opt RBRACKET .)


state 199

    (21) initializer_list -> initializer .

    RBRACE          reduce using rule 21 (initializer_list -> initializer .)
    COMMA           reduce using rule 21 (initializer_list -> initializer .)


state 200

    (19) initializer -> LBRACE initializer_list . RBRACE
    (20) initializer -> LBRACE initializer_list . COMMA RBRACE
    (22) initializer_list -> initializer_list . COMMA initializer

    RBRACE          shift and go to state 209
    COMMA           shift and go to state 208


state 201

    (50) iteration_statement -> FOR LPAREN expression_opt SEMI . expression_opt SEMI expression_opt RPAREN statement
    (55) expression_opt -> . empty
    (56) expression_opt -> . expression
    (118) empty -> .
    (57) expression -> . print_expression
    (58) expression -> . expression COMMA print_expression
    (59) print_expression -> . assignment_expression
    (60) print_expression -> . PRINT LPAREN scan_expression RPAREN
    (61) print_expression -> . PRINTLN LPAREN scan_expression RPAREN
    (62) assignment_expression -> . scan_expression
    (63) assignment_expression -> . unary_expression ASSIGN_OP assignment_expression
    (64) assignment_expression -> . unary_expression ADD_ASSIGN assignment_expression
    (65) assignment_expression -> . unary_expression MIN_ASSIGN assignment_expression
    (66) assignment_expression -> . unary_expression MUL_ASSIGN assignment_expression
    (67) assignment_expression -> . unary_expression DIV_ASSIGN assignment_expression
    (68) assignment_expression -> . unary_expression MOD_ASSIGN assignment_expression
    (69) scan_expression -> . logical_or_expression
    (70) scan_expression -> . SCAN LPAREN RPAREN
    (93) unary_expression -> . postfix_expression
    (94) unary_expression -> . INC unary_expression
    (95) unary_expression -> . DEC unary_expression
    (96) unary_expression -> . SUB_OP add_expression
    (97) unary_expression -> . NOT logical_or_expression
    (74) logical_or_expression -> . logical_and_expression
    (75) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (98) postfix_expression -> . primary_expression
    (99) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (100) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (101) postfix_expression -> . postfix_expression LPAREN RPAREN
    (102) postfix_expression -> . postfix_expression INC
    (103) postfix_expression -> . postfix_expression DEC
    (76) logical_and_expression -> . equality_expression
    (77) logical_and_expression -> . logical_and_expression AND equality_expression
    (104) primary_expression -> . identifier
    (105) primary_expression -> . constant
    (106) primary_expression -> . LPAREN expression RPAREN
    (78) equality_expression -> . relational_expression
    (79) equality_expression -> . equality_expression EQ relational_expression
    (80) equality_expression -> . equality_expression NEQ relational_expression
    (109) identifier -> . FLOAT_ID
    (110) identifier -> . INT_ID
    (111) identifier -> . CHAR_ID
    (112) identifier -> . STR_ID
    (113) identifier -> . VOID_ID
    (114) constant -> . FLOAT_LIT
    (115) constant -> . INT_LIT
    (116) constant -> . CHAR_LIT
    (117) constant -> . STR_LIT
    (81) relational_expression -> . add_expression
    (82) relational_expression -> . relational_expression LT add_expression
    (83) relational_expression -> . relational_expression GT add_expression
    (84) relational_expression -> . relational_expression LE add_expression
    (85) relational_expression -> . relational_expression GE add_expression
    (86) add_expression -> . mult_expression
    (87) add_expression -> . add_expression ADD_OP mult_expression
    (88) add_expression -> . add_expression SUB_OP mult_expression
    (89) mult_expression -> . unary_expression
    (90) mult_expression -> . mult_expression MULT_OP unary_expression
    (91) mult_expression -> . mult_expression DIV_OP unary_expression
    (92) mult_expression -> . mult_expression MOD_OP unary_expression

    SEMI            reduce using rule 118 (empty -> .)
    PRINT           shift and go to state 37
    PRINTLN         shift and go to state 38
    SCAN            shift and go to state 4
    INC             shift and go to state 36
    DEC             shift and go to state 7
    SUB_OP          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 2
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 30
    CHAR_ID         shift and go to state 13
    STR_ID          shift and go to state 19
    VOID_ID         shift and go to state 23
    FLOAT_LIT       shift and go to state 31
    INT_LIT         shift and go to state 33
    CHAR_LIT        shift and go to state 12
    STR_LIT         shift and go to state 9

    identifier                     shift and go to state 35
    constant                       shift and go to state 1
    assignment_expression          shift and go to state 39
    unary_expression               shift and go to state 3
    relational_expression          shift and go to state 17
    add_expression                 shift and go to state 28
    print_expression               shift and go to state 40
    expression_opt                 shift and go to state 210
    equality_expression            shift and go to state 29
    postfix_expression             shift and go to state 15
    mult_expression                shift and go to state 25
    logical_and_expression         shift and go to state 8
    primary_expression             shift and go to state 26
    expression                     shift and go to state 108
    logical_or_expression          shift and go to state 21
    empty                          shift and go to state 118
    scan_expression                shift and go to state 10

state 202

    (49) iteration_statement -> WHILE LPAREN expression RPAREN . statement
    (29) statement -> . labeled_statement
    (30) statement -> . expression_statement
    (31) statement -> . compound_statement
    (32) statement -> . selection_statement
    (33) statement -> . iteration_statement
    (34) statement -> . jump_statement
    (35) labeled_statement -> . CASE constant_expression COLON statement
    (36) labeled_statement -> . DEFAULT COLON statement
    (37) expression_statement -> . expression_opt SEMI
    (38) compound_statement -> . LBRACE mix_list RBRACE
    (39) compound_statement -> . LBRACE RBRACE
    (46) selection_statement -> . IF LPAREN expression RPAREN statement
    (47) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (48) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (49) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (50) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (51) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (52) jump_statement -> . CONTINUE SEMI
    (53) jump_statement -> . BREAK SEMI
    (54) jump_statement -> . RETURN expression_opt SEMI
    (55) expression_opt -> . empty
    (56) expression_opt -> . expression
    (118) empty -> .
    (57) expression -> . print_expression
    (58) expression -> . expression COMMA print_expression
    (59) print_expression -> . assignment_expression
    (60) print_expression -> . PRINT LPAREN scan_expression RPAREN
    (61) print_expression -> . PRINTLN LPAREN scan_expression RPAREN
    (62) assignment_expression -> . scan_expression
    (63) assignment_expression -> . unary_expression ASSIGN_OP assignment_expression
    (64) assignment_expression -> . unary_expression ADD_ASSIGN assignment_expression
    (65) assignment_expression -> . unary_expression MIN_ASSIGN assignment_expression
    (66) assignment_expression -> . unary_expression MUL_ASSIGN assignment_expression
    (67) assignment_expression -> . unary_expression DIV_ASSIGN assignment_expression
    (68) assignment_expression -> . unary_expression MOD_ASSIGN assignment_expression
    (69) scan_expression -> . logical_or_expression
    (70) scan_expression -> . SCAN LPAREN RPAREN
    (93) unary_expression -> . postfix_expression
    (94) unary_expression -> . INC unary_expression
    (95) unary_expression -> . DEC unary_expression
    (96) unary_expression -> . SUB_OP add_expression
    (97) unary_expression -> . NOT logical_or_expression
    (74) logical_or_expression -> . logical_and_expression
    (75) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (98) postfix_expression -> . primary_expression
    (99) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (100) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (101) postfix_expression -> . postfix_expression LPAREN RPAREN
    (102) postfix_expression -> . postfix_expression INC
    (103) postfix_expression -> . postfix_expression DEC
    (76) logical_and_expression -> . equality_expression
    (77) logical_and_expression -> . logical_and_expression AND equality_expression
    (104) primary_expression -> . identifier
    (105) primary_expression -> . constant
    (106) primary_expression -> . LPAREN expression RPAREN
    (78) equality_expression -> . relational_expression
    (79) equality_expression -> . equality_expression EQ relational_expression
    (80) equality_expression -> . equality_expression NEQ relational_expression
    (109) identifier -> . FLOAT_ID
    (110) identifier -> . INT_ID
    (111) identifier -> . CHAR_ID
    (112) identifier -> . STR_ID
    (113) identifier -> . VOID_ID
    (114) constant -> . FLOAT_LIT
    (115) constant -> . INT_LIT
    (116) constant -> . CHAR_LIT
    (117) constant -> . STR_LIT
    (81) relational_expression -> . add_expression
    (82) relational_expression -> . relational_expression LT add_expression
    (83) relational_expression -> . relational_expression GT add_expression
    (84) relational_expression -> . relational_expression LE add_expression
    (85) relational_expression -> . relational_expression GE add_expression
    (86) add_expression -> . mult_expression
    (87) add_expression -> . add_expression ADD_OP mult_expression
    (88) add_expression -> . add_expression SUB_OP mult_expression
    (89) mult_expression -> . unary_expression
    (90) mult_expression -> . mult_expression MULT_OP unary_expression
    (91) mult_expression -> . mult_expression DIV_OP unary_expression
    (92) mult_expression -> . mult_expression MOD_OP unary_expression

    CASE            shift and go to state 112
    DEFAULT         shift and go to state 110
    LBRACE          shift and go to state 55
    IF              shift and go to state 122
    SWITCH          shift and go to state 113
    WHILE           shift and go to state 111
    FOR             shift and go to state 105
    DO              shift and go to state 119
    CONTINUE        shift and go to state 107
    BREAK           shift and go to state 117
    RETURN          shift and go to state 102
    SEMI            reduce using rule 118 (empty -> .)
    PRINT           shift and go to state 37
    PRINTLN         shift and go to state 38
    SCAN            shift and go to state 4
    INC             shift and go to state 36
    DEC             shift and go to state 7
    SUB_OP          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 2
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 30
    CHAR_ID         shift and go to state 13
    STR_ID          shift and go to state 19
    VOID_ID         shift and go to state 23
    FLOAT_LIT       shift and go to state 31
    INT_LIT         shift and go to state 33
    CHAR_LIT        shift and go to state 12
    STR_LIT         shift and go to state 9

    expression_statement           shift and go to state 94
    constant                       shift and go to state 1
    unary_expression               shift and go to state 3
    iteration_statement            shift and go to state 96
    scan_expression                shift and go to state 10
    compound_statement             shift and go to state 104
    selection_statement            shift and go to state 120
    postfix_expression             shift and go to state 15
    relational_expression          shift and go to state 17
    statement                      shift and go to state 211
    logical_or_expression          shift and go to state 21
    empty                          shift and go to state 118
    assignment_expression          shift and go to state 39
    print_expression               shift and go to state 40
    expression_opt                 shift and go to state 123
    primary_expression             shift and go to state 26
    logical_and_expression         shift and go to state 8
    add_expression                 shift and go to state 28
    equality_expression            shift and go to state 29
    jump_statement                 shift and go to state 116
    labeled_statement              shift and go to state 103
    mult_expression                shift and go to state 25
    identifier                     shift and go to state 35
    expression                     shift and go to state 108

state 203

    (35) labeled_statement -> CASE constant_expression COLON statement .

    CASE            reduce using rule 35 (labeled_statement -> CASE constant_expression COLON statement .)
    DEFAULT         reduce using rule 35 (labeled_statement -> CASE constant_expression COLON statement .)
    LBRACE          reduce using rule 35 (labeled_statement -> CASE constant_expression COLON statement .)
    IF              reduce using rule 35 (labeled_statement -> CASE constant_expression COLON statement .)
    SWITCH          reduce using rule 35 (labeled_statement -> CASE constant_expression COLON statement .)
    WHILE           reduce using rule 35 (labeled_statement -> CASE constant_expression COLON statement .)
    FOR             reduce using rule 35 (labeled_statement -> CASE constant_expression COLON statement .)
    DO              reduce using rule 35 (labeled_statement -> CASE constant_expression COLON statement .)
    CONTINUE        reduce using rule 35 (labeled_statement -> CASE constant_expression COLON statement .)
    BREAK           reduce using rule 35 (labeled_statement -> CASE constant_expression COLON statement .)
    RETURN          reduce using rule 35 (labeled_statement -> CASE constant_expression COLON statement .)
    PRINT           reduce using rule 35 (labeled_statement -> CASE constant_expression COLON statement .)
    PRINTLN         reduce using rule 35 (labeled_statement -> CASE constant_expression COLON statement .)
    VAR             reduce using rule 35 (labeled_statement -> CASE constant_expression COLON statement .)
    LPAREN          reduce using rule 35 (labeled_statement -> CASE constant_expression COLON statement .)
    SCAN            reduce using rule 35 (labeled_statement -> CASE constant_expression COLON statement .)
    INC             reduce using rule 35 (labeled_statement -> CASE constant_expression COLON statement .)
    DEC             reduce using rule 35 (labeled_statement -> CASE constant_expression COLON statement .)
    SUB_OP          reduce using rule 35 (labeled_statement -> CASE constant_expression COLON statement .)
    NOT             reduce using rule 35 (labeled_statement -> CASE constant_expression COLON statement .)
    FLOAT_ID        reduce using rule 35 (labeled_statement -> CASE constant_expression COLON statement .)
    INT_ID          reduce using rule 35 (labeled_statement -> CASE constant_expression COLON statement .)
    CHAR_ID         reduce using rule 35 (labeled_statement -> CASE constant_expression COLON statement .)
    STR_ID          reduce using rule 35 (labeled_statement -> CASE constant_expression COLON statement .)
    VOID_ID         reduce using rule 35 (labeled_statement -> CASE constant_expression COLON statement .)
    FLOAT_LIT       reduce using rule 35 (labeled_statement -> CASE constant_expression COLON statement .)
    INT_LIT         reduce using rule 35 (labeled_statement -> CASE constant_expression COLON statement .)
    CHAR_LIT        reduce using rule 35 (labeled_statement -> CASE constant_expression COLON statement .)
    STR_LIT         reduce using rule 35 (labeled_statement -> CASE constant_expression COLON statement .)
    SEMI            reduce using rule 35 (labeled_statement -> CASE constant_expression COLON statement .)
    RBRACE          reduce using rule 35 (labeled_statement -> CASE constant_expression COLON statement .)
    ELSE            reduce using rule 35 (labeled_statement -> CASE constant_expression COLON statement .)


state 204

    (48) selection_statement -> SWITCH LPAREN expression RPAREN . statement
    (29) statement -> . labeled_statement
    (30) statement -> . expression_statement
    (31) statement -> . compound_statement
    (32) statement -> . selection_statement
    (33) statement -> . iteration_statement
    (34) statement -> . jump_statement
    (35) labeled_statement -> . CASE constant_expression COLON statement
    (36) labeled_statement -> . DEFAULT COLON statement
    (37) expression_statement -> . expression_opt SEMI
    (38) compound_statement -> . LBRACE mix_list RBRACE
    (39) compound_statement -> . LBRACE RBRACE
    (46) selection_statement -> . IF LPAREN expression RPAREN statement
    (47) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (48) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (49) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (50) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (51) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (52) jump_statement -> . CONTINUE SEMI
    (53) jump_statement -> . BREAK SEMI
    (54) jump_statement -> . RETURN expression_opt SEMI
    (55) expression_opt -> . empty
    (56) expression_opt -> . expression
    (118) empty -> .
    (57) expression -> . print_expression
    (58) expression -> . expression COMMA print_expression
    (59) print_expression -> . assignment_expression
    (60) print_expression -> . PRINT LPAREN scan_expression RPAREN
    (61) print_expression -> . PRINTLN LPAREN scan_expression RPAREN
    (62) assignment_expression -> . scan_expression
    (63) assignment_expression -> . unary_expression ASSIGN_OP assignment_expression
    (64) assignment_expression -> . unary_expression ADD_ASSIGN assignment_expression
    (65) assignment_expression -> . unary_expression MIN_ASSIGN assignment_expression
    (66) assignment_expression -> . unary_expression MUL_ASSIGN assignment_expression
    (67) assignment_expression -> . unary_expression DIV_ASSIGN assignment_expression
    (68) assignment_expression -> . unary_expression MOD_ASSIGN assignment_expression
    (69) scan_expression -> . logical_or_expression
    (70) scan_expression -> . SCAN LPAREN RPAREN
    (93) unary_expression -> . postfix_expression
    (94) unary_expression -> . INC unary_expression
    (95) unary_expression -> . DEC unary_expression
    (96) unary_expression -> . SUB_OP add_expression
    (97) unary_expression -> . NOT logical_or_expression
    (74) logical_or_expression -> . logical_and_expression
    (75) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (98) postfix_expression -> . primary_expression
    (99) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (100) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (101) postfix_expression -> . postfix_expression LPAREN RPAREN
    (102) postfix_expression -> . postfix_expression INC
    (103) postfix_expression -> . postfix_expression DEC
    (76) logical_and_expression -> . equality_expression
    (77) logical_and_expression -> . logical_and_expression AND equality_expression
    (104) primary_expression -> . identifier
    (105) primary_expression -> . constant
    (106) primary_expression -> . LPAREN expression RPAREN
    (78) equality_expression -> . relational_expression
    (79) equality_expression -> . equality_expression EQ relational_expression
    (80) equality_expression -> . equality_expression NEQ relational_expression
    (109) identifier -> . FLOAT_ID
    (110) identifier -> . INT_ID
    (111) identifier -> . CHAR_ID
    (112) identifier -> . STR_ID
    (113) identifier -> . VOID_ID
    (114) constant -> . FLOAT_LIT
    (115) constant -> . INT_LIT
    (116) constant -> . CHAR_LIT
    (117) constant -> . STR_LIT
    (81) relational_expression -> . add_expression
    (82) relational_expression -> . relational_expression LT add_expression
    (83) relational_expression -> . relational_expression GT add_expression
    (84) relational_expression -> . relational_expression LE add_expression
    (85) relational_expression -> . relational_expression GE add_expression
    (86) add_expression -> . mult_expression
    (87) add_expression -> . add_expression ADD_OP mult_expression
    (88) add_expression -> . add_expression SUB_OP mult_expression
    (89) mult_expression -> . unary_expression
    (90) mult_expression -> . mult_expression MULT_OP unary_expression
    (91) mult_expression -> . mult_expression DIV_OP unary_expression
    (92) mult_expression -> . mult_expression MOD_OP unary_expression

    CASE            shift and go to state 112
    DEFAULT         shift and go to state 110
    LBRACE          shift and go to state 55
    IF              shift and go to state 122
    SWITCH          shift and go to state 113
    WHILE           shift and go to state 111
    FOR             shift and go to state 105
    DO              shift and go to state 119
    CONTINUE        shift and go to state 107
    BREAK           shift and go to state 117
    RETURN          shift and go to state 102
    SEMI            reduce using rule 118 (empty -> .)
    PRINT           shift and go to state 37
    PRINTLN         shift and go to state 38
    SCAN            shift and go to state 4
    INC             shift and go to state 36
    DEC             shift and go to state 7
    SUB_OP          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 2
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 30
    CHAR_ID         shift and go to state 13
    STR_ID          shift and go to state 19
    VOID_ID         shift and go to state 23
    FLOAT_LIT       shift and go to state 31
    INT_LIT         shift and go to state 33
    CHAR_LIT        shift and go to state 12
    STR_LIT         shift and go to state 9

    expression_statement           shift and go to state 94
    constant                       shift and go to state 1
    unary_expression               shift and go to state 3
    iteration_statement            shift and go to state 96
    scan_expression                shift and go to state 10
    compound_statement             shift and go to state 104
    selection_statement            shift and go to state 120
    postfix_expression             shift and go to state 15
    relational_expression          shift and go to state 17
    statement                      shift and go to state 212
    logical_or_expression          shift and go to state 21
    empty                          shift and go to state 118
    assignment_expression          shift and go to state 39
    print_expression               shift and go to state 40
    expression_opt                 shift and go to state 123
    primary_expression             shift and go to state 26
    logical_and_expression         shift and go to state 8
    add_expression                 shift and go to state 28
    equality_expression            shift and go to state 29
    jump_statement                 shift and go to state 116
    labeled_statement              shift and go to state 103
    mult_expression                shift and go to state 25
    identifier                     shift and go to state 35
    expression                     shift and go to state 108

state 205

    (51) iteration_statement -> DO statement WHILE LPAREN . expression RPAREN SEMI
    (57) expression -> . print_expression
    (58) expression -> . expression COMMA print_expression
    (59) print_expression -> . assignment_expression
    (60) print_expression -> . PRINT LPAREN scan_expression RPAREN
    (61) print_expression -> . PRINTLN LPAREN scan_expression RPAREN
    (62) assignment_expression -> . scan_expression
    (63) assignment_expression -> . unary_expression ASSIGN_OP assignment_expression
    (64) assignment_expression -> . unary_expression ADD_ASSIGN assignment_expression
    (65) assignment_expression -> . unary_expression MIN_ASSIGN assignment_expression
    (66) assignment_expression -> . unary_expression MUL_ASSIGN assignment_expression
    (67) assignment_expression -> . unary_expression DIV_ASSIGN assignment_expression
    (68) assignment_expression -> . unary_expression MOD_ASSIGN assignment_expression
    (69) scan_expression -> . logical_or_expression
    (70) scan_expression -> . SCAN LPAREN RPAREN
    (93) unary_expression -> . postfix_expression
    (94) unary_expression -> . INC unary_expression
    (95) unary_expression -> . DEC unary_expression
    (96) unary_expression -> . SUB_OP add_expression
    (97) unary_expression -> . NOT logical_or_expression
    (74) logical_or_expression -> . logical_and_expression
    (75) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (98) postfix_expression -> . primary_expression
    (99) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (100) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (101) postfix_expression -> . postfix_expression LPAREN RPAREN
    (102) postfix_expression -> . postfix_expression INC
    (103) postfix_expression -> . postfix_expression DEC
    (76) logical_and_expression -> . equality_expression
    (77) logical_and_expression -> . logical_and_expression AND equality_expression
    (104) primary_expression -> . identifier
    (105) primary_expression -> . constant
    (106) primary_expression -> . LPAREN expression RPAREN
    (78) equality_expression -> . relational_expression
    (79) equality_expression -> . equality_expression EQ relational_expression
    (80) equality_expression -> . equality_expression NEQ relational_expression
    (109) identifier -> . FLOAT_ID
    (110) identifier -> . INT_ID
    (111) identifier -> . CHAR_ID
    (112) identifier -> . STR_ID
    (113) identifier -> . VOID_ID
    (114) constant -> . FLOAT_LIT
    (115) constant -> . INT_LIT
    (116) constant -> . CHAR_LIT
    (117) constant -> . STR_LIT
    (81) relational_expression -> . add_expression
    (82) relational_expression -> . relational_expression LT add_expression
    (83) relational_expression -> . relational_expression GT add_expression
    (84) relational_expression -> . relational_expression LE add_expression
    (85) relational_expression -> . relational_expression GE add_expression
    (86) add_expression -> . mult_expression
    (87) add_expression -> . add_expression ADD_OP mult_expression
    (88) add_expression -> . add_expression SUB_OP mult_expression
    (89) mult_expression -> . unary_expression
    (90) mult_expression -> . mult_expression MULT_OP unary_expression
    (91) mult_expression -> . mult_expression DIV_OP unary_expression
    (92) mult_expression -> . mult_expression MOD_OP unary_expression

    PRINT           shift and go to state 37
    PRINTLN         shift and go to state 38
    SCAN            shift and go to state 4
    INC             shift and go to state 36
    DEC             shift and go to state 7
    SUB_OP          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 2
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 30
    CHAR_ID         shift and go to state 13
    STR_ID          shift and go to state 19
    VOID_ID         shift and go to state 23
    FLOAT_LIT       shift and go to state 31
    INT_LIT         shift and go to state 33
    CHAR_LIT        shift and go to state 12
    STR_LIT         shift and go to state 9

    identifier                     shift and go to state 35
    constant                       shift and go to state 1
    assignment_expression          shift and go to state 39
    unary_expression               shift and go to state 3
    relational_expression          shift and go to state 17
    add_expression                 shift and go to state 28
    print_expression               shift and go to state 40
    postfix_expression             shift and go to state 15
    mult_expression                shift and go to state 25
    logical_and_expression         shift and go to state 8
    primary_expression             shift and go to state 26
    expression                     shift and go to state 213
    logical_or_expression          shift and go to state 21
    equality_expression            shift and go to state 29
    scan_expression                shift and go to state 10

state 206

    (46) selection_statement -> IF LPAREN expression RPAREN . statement
    (47) selection_statement -> IF LPAREN expression RPAREN . statement ELSE statement
    (29) statement -> . labeled_statement
    (30) statement -> . expression_statement
    (31) statement -> . compound_statement
    (32) statement -> . selection_statement
    (33) statement -> . iteration_statement
    (34) statement -> . jump_statement
    (35) labeled_statement -> . CASE constant_expression COLON statement
    (36) labeled_statement -> . DEFAULT COLON statement
    (37) expression_statement -> . expression_opt SEMI
    (38) compound_statement -> . LBRACE mix_list RBRACE
    (39) compound_statement -> . LBRACE RBRACE
    (46) selection_statement -> . IF LPAREN expression RPAREN statement
    (47) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (48) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (49) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (50) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (51) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (52) jump_statement -> . CONTINUE SEMI
    (53) jump_statement -> . BREAK SEMI
    (54) jump_statement -> . RETURN expression_opt SEMI
    (55) expression_opt -> . empty
    (56) expression_opt -> . expression
    (118) empty -> .
    (57) expression -> . print_expression
    (58) expression -> . expression COMMA print_expression
    (59) print_expression -> . assignment_expression
    (60) print_expression -> . PRINT LPAREN scan_expression RPAREN
    (61) print_expression -> . PRINTLN LPAREN scan_expression RPAREN
    (62) assignment_expression -> . scan_expression
    (63) assignment_expression -> . unary_expression ASSIGN_OP assignment_expression
    (64) assignment_expression -> . unary_expression ADD_ASSIGN assignment_expression
    (65) assignment_expression -> . unary_expression MIN_ASSIGN assignment_expression
    (66) assignment_expression -> . unary_expression MUL_ASSIGN assignment_expression
    (67) assignment_expression -> . unary_expression DIV_ASSIGN assignment_expression
    (68) assignment_expression -> . unary_expression MOD_ASSIGN assignment_expression
    (69) scan_expression -> . logical_or_expression
    (70) scan_expression -> . SCAN LPAREN RPAREN
    (93) unary_expression -> . postfix_expression
    (94) unary_expression -> . INC unary_expression
    (95) unary_expression -> . DEC unary_expression
    (96) unary_expression -> . SUB_OP add_expression
    (97) unary_expression -> . NOT logical_or_expression
    (74) logical_or_expression -> . logical_and_expression
    (75) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (98) postfix_expression -> . primary_expression
    (99) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (100) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (101) postfix_expression -> . postfix_expression LPAREN RPAREN
    (102) postfix_expression -> . postfix_expression INC
    (103) postfix_expression -> . postfix_expression DEC
    (76) logical_and_expression -> . equality_expression
    (77) logical_and_expression -> . logical_and_expression AND equality_expression
    (104) primary_expression -> . identifier
    (105) primary_expression -> . constant
    (106) primary_expression -> . LPAREN expression RPAREN
    (78) equality_expression -> . relational_expression
    (79) equality_expression -> . equality_expression EQ relational_expression
    (80) equality_expression -> . equality_expression NEQ relational_expression
    (109) identifier -> . FLOAT_ID
    (110) identifier -> . INT_ID
    (111) identifier -> . CHAR_ID
    (112) identifier -> . STR_ID
    (113) identifier -> . VOID_ID
    (114) constant -> . FLOAT_LIT
    (115) constant -> . INT_LIT
    (116) constant -> . CHAR_LIT
    (117) constant -> . STR_LIT
    (81) relational_expression -> . add_expression
    (82) relational_expression -> . relational_expression LT add_expression
    (83) relational_expression -> . relational_expression GT add_expression
    (84) relational_expression -> . relational_expression LE add_expression
    (85) relational_expression -> . relational_expression GE add_expression
    (86) add_expression -> . mult_expression
    (87) add_expression -> . add_expression ADD_OP mult_expression
    (88) add_expression -> . add_expression SUB_OP mult_expression
    (89) mult_expression -> . unary_expression
    (90) mult_expression -> . mult_expression MULT_OP unary_expression
    (91) mult_expression -> . mult_expression DIV_OP unary_expression
    (92) mult_expression -> . mult_expression MOD_OP unary_expression

    CASE            shift and go to state 112
    DEFAULT         shift and go to state 110
    LBRACE          shift and go to state 55
    IF              shift and go to state 122
    SWITCH          shift and go to state 113
    WHILE           shift and go to state 111
    FOR             shift and go to state 105
    DO              shift and go to state 119
    CONTINUE        shift and go to state 107
    BREAK           shift and go to state 117
    RETURN          shift and go to state 102
    SEMI            reduce using rule 118 (empty -> .)
    PRINT           shift and go to state 37
    PRINTLN         shift and go to state 38
    SCAN            shift and go to state 4
    INC             shift and go to state 36
    DEC             shift and go to state 7
    SUB_OP          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 2
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 30
    CHAR_ID         shift and go to state 13
    STR_ID          shift and go to state 19
    VOID_ID         shift and go to state 23
    FLOAT_LIT       shift and go to state 31
    INT_LIT         shift and go to state 33
    CHAR_LIT        shift and go to state 12
    STR_LIT         shift and go to state 9

    expression_statement           shift and go to state 94
    constant                       shift and go to state 1
    unary_expression               shift and go to state 3
    iteration_statement            shift and go to state 96
    scan_expression                shift and go to state 10
    compound_statement             shift and go to state 104
    selection_statement            shift and go to state 120
    postfix_expression             shift and go to state 15
    relational_expression          shift and go to state 17
    statement                      shift and go to state 214
    logical_or_expression          shift and go to state 21
    empty                          shift and go to state 118
    assignment_expression          shift and go to state 39
    print_expression               shift and go to state 40
    expression_opt                 shift and go to state 123
    primary_expression             shift and go to state 26
    logical_and_expression         shift and go to state 8
    add_expression                 shift and go to state 28
    equality_expression            shift and go to state 29
    jump_statement                 shift and go to state 116
    labeled_statement              shift and go to state 103
    mult_expression                shift and go to state 25
    identifier                     shift and go to state 35
    expression                     shift and go to state 108

state 207

    (27) fxn_prot_args -> identifier COMMA fxn_prot_args .

    RPAREN          reduce using rule 27 (fxn_prot_args -> identifier COMMA fxn_prot_args .)


state 208

    (20) initializer -> LBRACE initializer_list COMMA . RBRACE
    (22) initializer_list -> initializer_list COMMA . initializer
    (18) initializer -> . assignment_expression
    (19) initializer -> . LBRACE initializer_list RBRACE
    (20) initializer -> . LBRACE initializer_list COMMA RBRACE
    (62) assignment_expression -> . scan_expression
    (63) assignment_expression -> . unary_expression ASSIGN_OP assignment_expression
    (64) assignment_expression -> . unary_expression ADD_ASSIGN assignment_expression
    (65) assignment_expression -> . unary_expression MIN_ASSIGN assignment_expression
    (66) assignment_expression -> . unary_expression MUL_ASSIGN assignment_expression
    (67) assignment_expression -> . unary_expression DIV_ASSIGN assignment_expression
    (68) assignment_expression -> . unary_expression MOD_ASSIGN assignment_expression
    (69) scan_expression -> . logical_or_expression
    (70) scan_expression -> . SCAN LPAREN RPAREN
    (93) unary_expression -> . postfix_expression
    (94) unary_expression -> . INC unary_expression
    (95) unary_expression -> . DEC unary_expression
    (96) unary_expression -> . SUB_OP add_expression
    (97) unary_expression -> . NOT logical_or_expression
    (74) logical_or_expression -> . logical_and_expression
    (75) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (98) postfix_expression -> . primary_expression
    (99) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (100) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (101) postfix_expression -> . postfix_expression LPAREN RPAREN
    (102) postfix_expression -> . postfix_expression INC
    (103) postfix_expression -> . postfix_expression DEC
    (76) logical_and_expression -> . equality_expression
    (77) logical_and_expression -> . logical_and_expression AND equality_expression
    (104) primary_expression -> . identifier
    (105) primary_expression -> . constant
    (106) primary_expression -> . LPAREN expression RPAREN
    (78) equality_expression -> . relational_expression
    (79) equality_expression -> . equality_expression EQ relational_expression
    (80) equality_expression -> . equality_expression NEQ relational_expression
    (109) identifier -> . FLOAT_ID
    (110) identifier -> . INT_ID
    (111) identifier -> . CHAR_ID
    (112) identifier -> . STR_ID
    (113) identifier -> . VOID_ID
    (114) constant -> . FLOAT_LIT
    (115) constant -> . INT_LIT
    (116) constant -> . CHAR_LIT
    (117) constant -> . STR_LIT
    (81) relational_expression -> . add_expression
    (82) relational_expression -> . relational_expression LT add_expression
    (83) relational_expression -> . relational_expression GT add_expression
    (84) relational_expression -> . relational_expression LE add_expression
    (85) relational_expression -> . relational_expression GE add_expression
    (86) add_expression -> . mult_expression
    (87) add_expression -> . add_expression ADD_OP mult_expression
    (88) add_expression -> . add_expression SUB_OP mult_expression
    (89) mult_expression -> . unary_expression
    (90) mult_expression -> . mult_expression MULT_OP unary_expression
    (91) mult_expression -> . mult_expression DIV_OP unary_expression
    (92) mult_expression -> . mult_expression MOD_OP unary_expression

    RBRACE          shift and go to state 216
    LBRACE          shift and go to state 183
    SCAN            shift and go to state 4
    INC             shift and go to state 36
    DEC             shift and go to state 7
    SUB_OP          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 2
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 30
    CHAR_ID         shift and go to state 13
    STR_ID          shift and go to state 19
    VOID_ID         shift and go to state 23
    FLOAT_LIT       shift and go to state 31
    INT_LIT         shift and go to state 33
    CHAR_LIT        shift and go to state 12
    STR_LIT         shift and go to state 9

    constant                       shift and go to state 1
    assignment_expression          shift and go to state 182
    unary_expression               shift and go to state 3
    relational_expression          shift and go to state 17
    postfix_expression             shift and go to state 15
    initializer                    shift and go to state 215
    primary_expression             shift and go to state 26
    mult_expression                shift and go to state 25
    logical_and_expression         shift and go to state 8
    identifier                     shift and go to state 35
    add_expression                 shift and go to state 28
    logical_or_expression          shift and go to state 21
    equality_expression            shift and go to state 29
    scan_expression                shift and go to state 10

state 209

    (19) initializer -> LBRACE initializer_list RBRACE .

    RBRACE          reduce using rule 19 (initializer -> LBRACE initializer_list RBRACE .)
    COMMA           reduce using rule 19 (initializer -> LBRACE initializer_list RBRACE .)
    SEMI            reduce using rule 19 (initializer -> LBRACE initializer_list RBRACE .)


state 210

    (50) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt . SEMI expression_opt RPAREN statement

    SEMI            shift and go to state 217


state 211

    (49) iteration_statement -> WHILE LPAREN expression RPAREN statement .

    CASE            reduce using rule 49 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 49 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 49 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    IF              reduce using rule 49 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 49 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 49 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FOR             reduce using rule 49 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DO              reduce using rule 49 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 49 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 49 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 49 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    PRINT           reduce using rule 49 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    PRINTLN         reduce using rule 49 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    VAR             reduce using rule 49 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 49 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SCAN            reduce using rule 49 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    INC             reduce using rule 49 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DEC             reduce using rule 49 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SUB_OP          reduce using rule 49 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    NOT             reduce using rule 49 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FLOAT_ID        reduce using rule 49 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    INT_ID          reduce using rule 49 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CHAR_ID         reduce using rule 49 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    STR_ID          reduce using rule 49 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    VOID_ID         reduce using rule 49 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FLOAT_LIT       reduce using rule 49 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    INT_LIT         reduce using rule 49 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CHAR_LIT        reduce using rule 49 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    STR_LIT         reduce using rule 49 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SEMI            reduce using rule 49 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    RBRACE          reduce using rule 49 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 49 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)


state 212

    (48) selection_statement -> SWITCH LPAREN expression RPAREN statement .

    CASE            reduce using rule 48 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 48 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 48 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    IF              reduce using rule 48 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 48 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 48 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    FOR             reduce using rule 48 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DO              reduce using rule 48 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 48 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 48 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 48 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    PRINT           reduce using rule 48 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    PRINTLN         reduce using rule 48 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    VAR             reduce using rule 48 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 48 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SCAN            reduce using rule 48 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    INC             reduce using rule 48 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DEC             reduce using rule 48 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SUB_OP          reduce using rule 48 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    NOT             reduce using rule 48 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    FLOAT_ID        reduce using rule 48 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    INT_ID          reduce using rule 48 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CHAR_ID         reduce using rule 48 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    STR_ID          reduce using rule 48 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    VOID_ID         reduce using rule 48 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    FLOAT_LIT       reduce using rule 48 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    INT_LIT         reduce using rule 48 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CHAR_LIT        reduce using rule 48 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    STR_LIT         reduce using rule 48 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SEMI            reduce using rule 48 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    RBRACE          reduce using rule 48 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 48 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)


state 213

    (51) iteration_statement -> DO statement WHILE LPAREN expression . RPAREN SEMI
    (58) expression -> expression . COMMA print_expression

    RPAREN          shift and go to state 218
    COMMA           shift and go to state 82


state 214

    (46) selection_statement -> IF LPAREN expression RPAREN statement .
    (47) selection_statement -> IF LPAREN expression RPAREN statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    CASE            reduce using rule 46 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 46 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 46 (selection_statement -> IF LPAREN expression RPAREN statement .)
    IF              reduce using rule 46 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 46 (selection_statement -> IF LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 46 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FOR             reduce using rule 46 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DO              reduce using rule 46 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 46 (selection_statement -> IF LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 46 (selection_statement -> IF LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 46 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PRINT           reduce using rule 46 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PRINTLN         reduce using rule 46 (selection_statement -> IF LPAREN expression RPAREN statement .)
    VAR             reduce using rule 46 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 46 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SCAN            reduce using rule 46 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INC             reduce using rule 46 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DEC             reduce using rule 46 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SUB_OP          reduce using rule 46 (selection_statement -> IF LPAREN expression RPAREN statement .)
    NOT             reduce using rule 46 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FLOAT_ID        reduce using rule 46 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INT_ID          reduce using rule 46 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CHAR_ID         reduce using rule 46 (selection_statement -> IF LPAREN expression RPAREN statement .)
    STR_ID          reduce using rule 46 (selection_statement -> IF LPAREN expression RPAREN statement .)
    VOID_ID         reduce using rule 46 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FLOAT_LIT       reduce using rule 46 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INT_LIT         reduce using rule 46 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CHAR_LIT        reduce using rule 46 (selection_statement -> IF LPAREN expression RPAREN statement .)
    STR_LIT         reduce using rule 46 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SEMI            reduce using rule 46 (selection_statement -> IF LPAREN expression RPAREN statement .)
    RBRACE          reduce using rule 46 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ELSE            shift and go to state 219

  ! ELSE            [ reduce using rule 46 (selection_statement -> IF LPAREN expression RPAREN statement .) ]


state 215

    (22) initializer_list -> initializer_list COMMA initializer .

    RBRACE          reduce using rule 22 (initializer_list -> initializer_list COMMA initializer .)
    COMMA           reduce using rule 22 (initializer_list -> initializer_list COMMA initializer .)


state 216

    (20) initializer -> LBRACE initializer_list COMMA RBRACE .

    RBRACE          reduce using rule 20 (initializer -> LBRACE initializer_list COMMA RBRACE .)
    COMMA           reduce using rule 20 (initializer -> LBRACE initializer_list COMMA RBRACE .)
    SEMI            reduce using rule 20 (initializer -> LBRACE initializer_list COMMA RBRACE .)


state 217

    (50) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI . expression_opt RPAREN statement
    (55) expression_opt -> . empty
    (56) expression_opt -> . expression
    (118) empty -> .
    (57) expression -> . print_expression
    (58) expression -> . expression COMMA print_expression
    (59) print_expression -> . assignment_expression
    (60) print_expression -> . PRINT LPAREN scan_expression RPAREN
    (61) print_expression -> . PRINTLN LPAREN scan_expression RPAREN
    (62) assignment_expression -> . scan_expression
    (63) assignment_expression -> . unary_expression ASSIGN_OP assignment_expression
    (64) assignment_expression -> . unary_expression ADD_ASSIGN assignment_expression
    (65) assignment_expression -> . unary_expression MIN_ASSIGN assignment_expression
    (66) assignment_expression -> . unary_expression MUL_ASSIGN assignment_expression
    (67) assignment_expression -> . unary_expression DIV_ASSIGN assignment_expression
    (68) assignment_expression -> . unary_expression MOD_ASSIGN assignment_expression
    (69) scan_expression -> . logical_or_expression
    (70) scan_expression -> . SCAN LPAREN RPAREN
    (93) unary_expression -> . postfix_expression
    (94) unary_expression -> . INC unary_expression
    (95) unary_expression -> . DEC unary_expression
    (96) unary_expression -> . SUB_OP add_expression
    (97) unary_expression -> . NOT logical_or_expression
    (74) logical_or_expression -> . logical_and_expression
    (75) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (98) postfix_expression -> . primary_expression
    (99) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (100) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (101) postfix_expression -> . postfix_expression LPAREN RPAREN
    (102) postfix_expression -> . postfix_expression INC
    (103) postfix_expression -> . postfix_expression DEC
    (76) logical_and_expression -> . equality_expression
    (77) logical_and_expression -> . logical_and_expression AND equality_expression
    (104) primary_expression -> . identifier
    (105) primary_expression -> . constant
    (106) primary_expression -> . LPAREN expression RPAREN
    (78) equality_expression -> . relational_expression
    (79) equality_expression -> . equality_expression EQ relational_expression
    (80) equality_expression -> . equality_expression NEQ relational_expression
    (109) identifier -> . FLOAT_ID
    (110) identifier -> . INT_ID
    (111) identifier -> . CHAR_ID
    (112) identifier -> . STR_ID
    (113) identifier -> . VOID_ID
    (114) constant -> . FLOAT_LIT
    (115) constant -> . INT_LIT
    (116) constant -> . CHAR_LIT
    (117) constant -> . STR_LIT
    (81) relational_expression -> . add_expression
    (82) relational_expression -> . relational_expression LT add_expression
    (83) relational_expression -> . relational_expression GT add_expression
    (84) relational_expression -> . relational_expression LE add_expression
    (85) relational_expression -> . relational_expression GE add_expression
    (86) add_expression -> . mult_expression
    (87) add_expression -> . add_expression ADD_OP mult_expression
    (88) add_expression -> . add_expression SUB_OP mult_expression
    (89) mult_expression -> . unary_expression
    (90) mult_expression -> . mult_expression MULT_OP unary_expression
    (91) mult_expression -> . mult_expression DIV_OP unary_expression
    (92) mult_expression -> . mult_expression MOD_OP unary_expression

    RPAREN          reduce using rule 118 (empty -> .)
    PRINT           shift and go to state 37
    PRINTLN         shift and go to state 38
    SCAN            shift and go to state 4
    INC             shift and go to state 36
    DEC             shift and go to state 7
    SUB_OP          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 2
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 30
    CHAR_ID         shift and go to state 13
    STR_ID          shift and go to state 19
    VOID_ID         shift and go to state 23
    FLOAT_LIT       shift and go to state 31
    INT_LIT         shift and go to state 33
    CHAR_LIT        shift and go to state 12
    STR_LIT         shift and go to state 9

    identifier                     shift and go to state 35
    constant                       shift and go to state 1
    assignment_expression          shift and go to state 39
    unary_expression               shift and go to state 3
    relational_expression          shift and go to state 17
    add_expression                 shift and go to state 28
    print_expression               shift and go to state 40
    expression_opt                 shift and go to state 220
    equality_expression            shift and go to state 29
    postfix_expression             shift and go to state 15
    mult_expression                shift and go to state 25
    logical_and_expression         shift and go to state 8
    primary_expression             shift and go to state 26
    expression                     shift and go to state 108
    logical_or_expression          shift and go to state 21
    empty                          shift and go to state 118
    scan_expression                shift and go to state 10

state 218

    (51) iteration_statement -> DO statement WHILE LPAREN expression RPAREN . SEMI

    SEMI            shift and go to state 221


state 219

    (47) selection_statement -> IF LPAREN expression RPAREN statement ELSE . statement
    (29) statement -> . labeled_statement
    (30) statement -> . expression_statement
    (31) statement -> . compound_statement
    (32) statement -> . selection_statement
    (33) statement -> . iteration_statement
    (34) statement -> . jump_statement
    (35) labeled_statement -> . CASE constant_expression COLON statement
    (36) labeled_statement -> . DEFAULT COLON statement
    (37) expression_statement -> . expression_opt SEMI
    (38) compound_statement -> . LBRACE mix_list RBRACE
    (39) compound_statement -> . LBRACE RBRACE
    (46) selection_statement -> . IF LPAREN expression RPAREN statement
    (47) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (48) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (49) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (50) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (51) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (52) jump_statement -> . CONTINUE SEMI
    (53) jump_statement -> . BREAK SEMI
    (54) jump_statement -> . RETURN expression_opt SEMI
    (55) expression_opt -> . empty
    (56) expression_opt -> . expression
    (118) empty -> .
    (57) expression -> . print_expression
    (58) expression -> . expression COMMA print_expression
    (59) print_expression -> . assignment_expression
    (60) print_expression -> . PRINT LPAREN scan_expression RPAREN
    (61) print_expression -> . PRINTLN LPAREN scan_expression RPAREN
    (62) assignment_expression -> . scan_expression
    (63) assignment_expression -> . unary_expression ASSIGN_OP assignment_expression
    (64) assignment_expression -> . unary_expression ADD_ASSIGN assignment_expression
    (65) assignment_expression -> . unary_expression MIN_ASSIGN assignment_expression
    (66) assignment_expression -> . unary_expression MUL_ASSIGN assignment_expression
    (67) assignment_expression -> . unary_expression DIV_ASSIGN assignment_expression
    (68) assignment_expression -> . unary_expression MOD_ASSIGN assignment_expression
    (69) scan_expression -> . logical_or_expression
    (70) scan_expression -> . SCAN LPAREN RPAREN
    (93) unary_expression -> . postfix_expression
    (94) unary_expression -> . INC unary_expression
    (95) unary_expression -> . DEC unary_expression
    (96) unary_expression -> . SUB_OP add_expression
    (97) unary_expression -> . NOT logical_or_expression
    (74) logical_or_expression -> . logical_and_expression
    (75) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (98) postfix_expression -> . primary_expression
    (99) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (100) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (101) postfix_expression -> . postfix_expression LPAREN RPAREN
    (102) postfix_expression -> . postfix_expression INC
    (103) postfix_expression -> . postfix_expression DEC
    (76) logical_and_expression -> . equality_expression
    (77) logical_and_expression -> . logical_and_expression AND equality_expression
    (104) primary_expression -> . identifier
    (105) primary_expression -> . constant
    (106) primary_expression -> . LPAREN expression RPAREN
    (78) equality_expression -> . relational_expression
    (79) equality_expression -> . equality_expression EQ relational_expression
    (80) equality_expression -> . equality_expression NEQ relational_expression
    (109) identifier -> . FLOAT_ID
    (110) identifier -> . INT_ID
    (111) identifier -> . CHAR_ID
    (112) identifier -> . STR_ID
    (113) identifier -> . VOID_ID
    (114) constant -> . FLOAT_LIT
    (115) constant -> . INT_LIT
    (116) constant -> . CHAR_LIT
    (117) constant -> . STR_LIT
    (81) relational_expression -> . add_expression
    (82) relational_expression -> . relational_expression LT add_expression
    (83) relational_expression -> . relational_expression GT add_expression
    (84) relational_expression -> . relational_expression LE add_expression
    (85) relational_expression -> . relational_expression GE add_expression
    (86) add_expression -> . mult_expression
    (87) add_expression -> . add_expression ADD_OP mult_expression
    (88) add_expression -> . add_expression SUB_OP mult_expression
    (89) mult_expression -> . unary_expression
    (90) mult_expression -> . mult_expression MULT_OP unary_expression
    (91) mult_expression -> . mult_expression DIV_OP unary_expression
    (92) mult_expression -> . mult_expression MOD_OP unary_expression

    CASE            shift and go to state 112
    DEFAULT         shift and go to state 110
    LBRACE          shift and go to state 55
    IF              shift and go to state 122
    SWITCH          shift and go to state 113
    WHILE           shift and go to state 111
    FOR             shift and go to state 105
    DO              shift and go to state 119
    CONTINUE        shift and go to state 107
    BREAK           shift and go to state 117
    RETURN          shift and go to state 102
    SEMI            reduce using rule 118 (empty -> .)
    PRINT           shift and go to state 37
    PRINTLN         shift and go to state 38
    SCAN            shift and go to state 4
    INC             shift and go to state 36
    DEC             shift and go to state 7
    SUB_OP          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 2
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 30
    CHAR_ID         shift and go to state 13
    STR_ID          shift and go to state 19
    VOID_ID         shift and go to state 23
    FLOAT_LIT       shift and go to state 31
    INT_LIT         shift and go to state 33
    CHAR_LIT        shift and go to state 12
    STR_LIT         shift and go to state 9

    expression_statement           shift and go to state 94
    constant                       shift and go to state 1
    unary_expression               shift and go to state 3
    iteration_statement            shift and go to state 96
    scan_expression                shift and go to state 10
    compound_statement             shift and go to state 104
    selection_statement            shift and go to state 120
    postfix_expression             shift and go to state 15
    relational_expression          shift and go to state 17
    statement                      shift and go to state 222
    logical_or_expression          shift and go to state 21
    empty                          shift and go to state 118
    assignment_expression          shift and go to state 39
    print_expression               shift and go to state 40
    expression_opt                 shift and go to state 123
    primary_expression             shift and go to state 26
    logical_and_expression         shift and go to state 8
    add_expression                 shift and go to state 28
    equality_expression            shift and go to state 29
    jump_statement                 shift and go to state 116
    labeled_statement              shift and go to state 103
    mult_expression                shift and go to state 25
    identifier                     shift and go to state 35
    expression                     shift and go to state 108

state 220

    (50) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt . RPAREN statement

    RPAREN          shift and go to state 223


state 221

    (51) iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .

    CASE            reduce using rule 51 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    DEFAULT         reduce using rule 51 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    LBRACE          reduce using rule 51 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    IF              reduce using rule 51 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    SWITCH          reduce using rule 51 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    WHILE           reduce using rule 51 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    FOR             reduce using rule 51 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    DO              reduce using rule 51 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    CONTINUE        reduce using rule 51 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    BREAK           reduce using rule 51 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    RETURN          reduce using rule 51 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    PRINT           reduce using rule 51 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    PRINTLN         reduce using rule 51 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    VAR             reduce using rule 51 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    LPAREN          reduce using rule 51 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    SCAN            reduce using rule 51 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    INC             reduce using rule 51 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    DEC             reduce using rule 51 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    SUB_OP          reduce using rule 51 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    NOT             reduce using rule 51 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    FLOAT_ID        reduce using rule 51 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    INT_ID          reduce using rule 51 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    CHAR_ID         reduce using rule 51 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    STR_ID          reduce using rule 51 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    VOID_ID         reduce using rule 51 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    FLOAT_LIT       reduce using rule 51 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    INT_LIT         reduce using rule 51 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    CHAR_LIT        reduce using rule 51 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    STR_LIT         reduce using rule 51 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    SEMI            reduce using rule 51 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    RBRACE          reduce using rule 51 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    ELSE            reduce using rule 51 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)


state 222

    (47) selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .

    CASE            reduce using rule 47 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DEFAULT         reduce using rule 47 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LBRACE          reduce using rule 47 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    IF              reduce using rule 47 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SWITCH          reduce using rule 47 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    WHILE           reduce using rule 47 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FOR             reduce using rule 47 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DO              reduce using rule 47 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CONTINUE        reduce using rule 47 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    BREAK           reduce using rule 47 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RETURN          reduce using rule 47 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PRINT           reduce using rule 47 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PRINTLN         reduce using rule 47 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    VAR             reduce using rule 47 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LPAREN          reduce using rule 47 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SCAN            reduce using rule 47 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INC             reduce using rule 47 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DEC             reduce using rule 47 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SUB_OP          reduce using rule 47 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    NOT             reduce using rule 47 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FLOAT_ID        reduce using rule 47 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INT_ID          reduce using rule 47 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CHAR_ID         reduce using rule 47 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STR_ID          reduce using rule 47 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    VOID_ID         reduce using rule 47 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FLOAT_LIT       reduce using rule 47 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INT_LIT         reduce using rule 47 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CHAR_LIT        reduce using rule 47 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STR_LIT         reduce using rule 47 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SEMI            reduce using rule 47 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RBRACE          reduce using rule 47 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ELSE            reduce using rule 47 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)


state 223

    (50) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN . statement
    (29) statement -> . labeled_statement
    (30) statement -> . expression_statement
    (31) statement -> . compound_statement
    (32) statement -> . selection_statement
    (33) statement -> . iteration_statement
    (34) statement -> . jump_statement
    (35) labeled_statement -> . CASE constant_expression COLON statement
    (36) labeled_statement -> . DEFAULT COLON statement
    (37) expression_statement -> . expression_opt SEMI
    (38) compound_statement -> . LBRACE mix_list RBRACE
    (39) compound_statement -> . LBRACE RBRACE
    (46) selection_statement -> . IF LPAREN expression RPAREN statement
    (47) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (48) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (49) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (50) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (51) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (52) jump_statement -> . CONTINUE SEMI
    (53) jump_statement -> . BREAK SEMI
    (54) jump_statement -> . RETURN expression_opt SEMI
    (55) expression_opt -> . empty
    (56) expression_opt -> . expression
    (118) empty -> .
    (57) expression -> . print_expression
    (58) expression -> . expression COMMA print_expression
    (59) print_expression -> . assignment_expression
    (60) print_expression -> . PRINT LPAREN scan_expression RPAREN
    (61) print_expression -> . PRINTLN LPAREN scan_expression RPAREN
    (62) assignment_expression -> . scan_expression
    (63) assignment_expression -> . unary_expression ASSIGN_OP assignment_expression
    (64) assignment_expression -> . unary_expression ADD_ASSIGN assignment_expression
    (65) assignment_expression -> . unary_expression MIN_ASSIGN assignment_expression
    (66) assignment_expression -> . unary_expression MUL_ASSIGN assignment_expression
    (67) assignment_expression -> . unary_expression DIV_ASSIGN assignment_expression
    (68) assignment_expression -> . unary_expression MOD_ASSIGN assignment_expression
    (69) scan_expression -> . logical_or_expression
    (70) scan_expression -> . SCAN LPAREN RPAREN
    (93) unary_expression -> . postfix_expression
    (94) unary_expression -> . INC unary_expression
    (95) unary_expression -> . DEC unary_expression
    (96) unary_expression -> . SUB_OP add_expression
    (97) unary_expression -> . NOT logical_or_expression
    (74) logical_or_expression -> . logical_and_expression
    (75) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (98) postfix_expression -> . primary_expression
    (99) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (100) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (101) postfix_expression -> . postfix_expression LPAREN RPAREN
    (102) postfix_expression -> . postfix_expression INC
    (103) postfix_expression -> . postfix_expression DEC
    (76) logical_and_expression -> . equality_expression
    (77) logical_and_expression -> . logical_and_expression AND equality_expression
    (104) primary_expression -> . identifier
    (105) primary_expression -> . constant
    (106) primary_expression -> . LPAREN expression RPAREN
    (78) equality_expression -> . relational_expression
    (79) equality_expression -> . equality_expression EQ relational_expression
    (80) equality_expression -> . equality_expression NEQ relational_expression
    (109) identifier -> . FLOAT_ID
    (110) identifier -> . INT_ID
    (111) identifier -> . CHAR_ID
    (112) identifier -> . STR_ID
    (113) identifier -> . VOID_ID
    (114) constant -> . FLOAT_LIT
    (115) constant -> . INT_LIT
    (116) constant -> . CHAR_LIT
    (117) constant -> . STR_LIT
    (81) relational_expression -> . add_expression
    (82) relational_expression -> . relational_expression LT add_expression
    (83) relational_expression -> . relational_expression GT add_expression
    (84) relational_expression -> . relational_expression LE add_expression
    (85) relational_expression -> . relational_expression GE add_expression
    (86) add_expression -> . mult_expression
    (87) add_expression -> . add_expression ADD_OP mult_expression
    (88) add_expression -> . add_expression SUB_OP mult_expression
    (89) mult_expression -> . unary_expression
    (90) mult_expression -> . mult_expression MULT_OP unary_expression
    (91) mult_expression -> . mult_expression DIV_OP unary_expression
    (92) mult_expression -> . mult_expression MOD_OP unary_expression

    CASE            shift and go to state 112
    DEFAULT         shift and go to state 110
    LBRACE          shift and go to state 55
    IF              shift and go to state 122
    SWITCH          shift and go to state 113
    WHILE           shift and go to state 111
    FOR             shift and go to state 105
    DO              shift and go to state 119
    CONTINUE        shift and go to state 107
    BREAK           shift and go to state 117
    RETURN          shift and go to state 102
    SEMI            reduce using rule 118 (empty -> .)
    PRINT           shift and go to state 37
    PRINTLN         shift and go to state 38
    SCAN            shift and go to state 4
    INC             shift and go to state 36
    DEC             shift and go to state 7
    SUB_OP          shift and go to state 32
    NOT             shift and go to state 34
    LPAREN          shift and go to state 2
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 30
    CHAR_ID         shift and go to state 13
    STR_ID          shift and go to state 19
    VOID_ID         shift and go to state 23
    FLOAT_LIT       shift and go to state 31
    INT_LIT         shift and go to state 33
    CHAR_LIT        shift and go to state 12
    STR_LIT         shift and go to state 9

    expression_statement           shift and go to state 94
    constant                       shift and go to state 1
    unary_expression               shift and go to state 3
    iteration_statement            shift and go to state 96
    scan_expression                shift and go to state 10
    compound_statement             shift and go to state 104
    selection_statement            shift and go to state 120
    postfix_expression             shift and go to state 15
    relational_expression          shift and go to state 17
    statement                      shift and go to state 224
    logical_or_expression          shift and go to state 21
    empty                          shift and go to state 118
    assignment_expression          shift and go to state 39
    print_expression               shift and go to state 40
    expression_opt                 shift and go to state 123
    primary_expression             shift and go to state 26
    logical_and_expression         shift and go to state 8
    add_expression                 shift and go to state 28
    equality_expression            shift and go to state 29
    jump_statement                 shift and go to state 116
    labeled_statement              shift and go to state 103
    mult_expression                shift and go to state 25
    identifier                     shift and go to state 35
    expression                     shift and go to state 108

state 224

    (50) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .

    CASE            reduce using rule 50 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    DEFAULT         reduce using rule 50 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    LBRACE          reduce using rule 50 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    IF              reduce using rule 50 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    SWITCH          reduce using rule 50 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    WHILE           reduce using rule 50 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    FOR             reduce using rule 50 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    DO              reduce using rule 50 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    CONTINUE        reduce using rule 50 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    BREAK           reduce using rule 50 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    RETURN          reduce using rule 50 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    PRINT           reduce using rule 50 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    PRINTLN         reduce using rule 50 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    VAR             reduce using rule 50 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    LPAREN          reduce using rule 50 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    SCAN            reduce using rule 50 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    INC             reduce using rule 50 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    DEC             reduce using rule 50 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    SUB_OP          reduce using rule 50 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    NOT             reduce using rule 50 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    FLOAT_ID        reduce using rule 50 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    INT_ID          reduce using rule 50 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    CHAR_ID         reduce using rule 50 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    STR_ID          reduce using rule 50 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    VOID_ID         reduce using rule 50 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    FLOAT_LIT       reduce using rule 50 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    INT_LIT         reduce using rule 50 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    CHAR_LIT        reduce using rule 50 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    STR_LIT         reduce using rule 50 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    SEMI            reduce using rule 50 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    RBRACE          reduce using rule 50 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    ELSE            reduce using rule 50 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for OR in state 8 resolved as shift
WARNING: shift/reduce conflict for AND in state 8 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 15 resolved as shift
WARNING: shift/reduce conflict for INC in state 15 resolved as shift
WARNING: shift/reduce conflict for DEC in state 15 resolved as shift
WARNING: shift/reduce conflict for LT in state 17 resolved as shift
WARNING: shift/reduce conflict for GT in state 17 resolved as shift
WARNING: shift/reduce conflict for LE in state 17 resolved as shift
WARNING: shift/reduce conflict for GE in state 17 resolved as shift
WARNING: shift/reduce conflict for MULT_OP in state 25 resolved as shift
WARNING: shift/reduce conflict for DIV_OP in state 25 resolved as shift
WARNING: shift/reduce conflict for MOD_OP in state 25 resolved as shift
WARNING: shift/reduce conflict for ADD_OP in state 28 resolved as shift
WARNING: shift/reduce conflict for SUB_OP in state 28 resolved as shift
WARNING: shift/reduce conflict for EQ in state 29 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 29 resolved as shift
WARNING: shift/reduce conflict for ADD_OP in state 76 resolved as shift
WARNING: shift/reduce conflict for SUB_OP in state 76 resolved as shift
WARNING: shift/reduce conflict for EQ in state 90 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 90 resolved as shift
WARNING: shift/reduce conflict for ADD_OP in state 128 resolved as shift
WARNING: shift/reduce conflict for SUB_OP in state 128 resolved as shift
WARNING: shift/reduce conflict for ADD_OP in state 129 resolved as shift
WARNING: shift/reduce conflict for SUB_OP in state 129 resolved as shift
WARNING: shift/reduce conflict for ADD_OP in state 130 resolved as shift
WARNING: shift/reduce conflict for SUB_OP in state 130 resolved as shift
WARNING: shift/reduce conflict for ADD_OP in state 131 resolved as shift
WARNING: shift/reduce conflict for SUB_OP in state 131 resolved as shift
WARNING: shift/reduce conflict for MULT_OP in state 136 resolved as shift
WARNING: shift/reduce conflict for DIV_OP in state 136 resolved as shift
WARNING: shift/reduce conflict for MOD_OP in state 136 resolved as shift
WARNING: shift/reduce conflict for MULT_OP in state 137 resolved as shift
WARNING: shift/reduce conflict for DIV_OP in state 137 resolved as shift
WARNING: shift/reduce conflict for MOD_OP in state 137 resolved as shift
WARNING: shift/reduce conflict for LT in state 138 resolved as shift
WARNING: shift/reduce conflict for GT in state 138 resolved as shift
WARNING: shift/reduce conflict for LE in state 138 resolved as shift
WARNING: shift/reduce conflict for GE in state 138 resolved as shift
WARNING: shift/reduce conflict for LT in state 139 resolved as shift
WARNING: shift/reduce conflict for GT in state 139 resolved as shift
WARNING: shift/reduce conflict for LE in state 139 resolved as shift
WARNING: shift/reduce conflict for GE in state 139 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 214 resolved as shift
WARNING: reduce/reduce conflict in state 148 resolved using rule (declaration_list -> declaration)
WARNING: rejected rule (declaration_list -> declaration_list declaration) in state 148
WARNING: reduce/reduce conflict in state 164 resolved using rule (statement_list -> statement)
WARNING: rejected rule (statement_list -> statement_list statement) in state 164
WARNING: Rule (declaration_list -> declaration_list declaration) is never reduced
WARNING: Rule (statement_list -> statement_list statement) is never reduced
