Created by PLY version 3.6 (http://www.dabeaz.com/ply)

Unused terminals:

    MULTILINE_COMMENT
    NULL
    LINE_COMMENT

Grammar

Rule 0     S' -> start
Rule 1     start -> pre_main main post_main
Rule 2     pre_main -> assignment_expression pre_main
Rule 3     pre_main -> fxn_var_statement pre_main
Rule 4     pre_main -> empty
Rule 5     main -> MAIN LPAREN empty RPAREN compound_statement
Rule 6     post_main -> fxn_var_statement post_main
Rule 7     post_main -> empty
Rule 8     fxn_var_statement -> fxn_prot
Rule 9     fxn_var_statement -> fxn_definition
Rule 10    declaration -> init_declarator_list SEMI
Rule 11    declaration_list -> declaration
Rule 12    declaration_list -> declaration_list declaration
Rule 13    init_declarator_list -> init_declarator
Rule 14    init_declarator_list -> init_declarator_list COMMA init_declarator
Rule 15    init_declarator -> declarator
Rule 16    init_declarator -> declarator ASSIGN_OP initializer
Rule 17    declarator -> identifier
Rule 18    declarator -> LPAREN declarator RPAREN
Rule 19    declarator -> declarator LBRACKET constant_expression_opt RBRACKET
Rule 20    initializer -> assignment_expression
Rule 21    initializer -> LBRACE initializer_list RBRACE
Rule 22    initializer -> LBRACE initializer_list COMMA RBRACE
Rule 23    initializer_list -> initializer
Rule 24    initializer_list -> initializer_list COMMA initializer
Rule 25    fxn_prot -> fxn_declaration SEMI
Rule 26    fxn_definition -> fxn_declaration compound_statement
Rule 27    fxn_declaration -> identifier LPAREN fxn_prot_args RPAREN
Rule 28    fxn_declaration -> identifier LPAREN empty RPAREN
Rule 29    fxn_prot_args -> identifier COMMA fxn_prot_args
Rule 30    fxn_prot_args -> identifier
Rule 31    statement -> labeled_statement
Rule 32    statement -> expression_statement
Rule 33    statement -> compound_statement
Rule 34    statement -> print_statement
Rule 35    statement -> scan_statement
Rule 36    statement -> selection_statement
Rule 37    statement -> iteration_statement
Rule 38    statement -> jump_statement
Rule 39    print_statement -> PRINT LPAREN assignment_expression RPAREN
Rule 40    scan_statement -> SCAN LPAREN identifier RPAREN
Rule 41    labeled_statement -> identifier COLON statement
Rule 42    labeled_statement -> CASE constant_expression COLON statement
Rule 43    labeled_statement -> DEFAULT COLON statement
Rule 44    expression_statement -> expression_opt SEMI
Rule 45    compound_statement -> LBRACE declaration_list statement_list RBRACE
Rule 46    compound_statement -> LBRACE statement_list RBRACE
Rule 47    compound_statement -> LBRACE declaration_list RBRACE
Rule 48    compound_statement -> LBRACE RBRACE
Rule 49    statement_list -> statement
Rule 50    statement_list -> statement_list statement
Rule 51    selection_statement -> IF LPAREN expression RPAREN statement
Rule 52    selection_statement -> IF LPAREN expression RPAREN statement ELSE statement
Rule 53    selection_statement -> IF LPAREN expression RPAREN statement else_if_statement ELSE statement
Rule 54    selection_statement -> SWITCH LPAREN expression RPAREN statement
Rule 55    else_if_statement -> ELSE_IF LPAREN expression RPAREN statement else_if_statement
Rule 56    else_if_statement -> empty
Rule 57    iteration_statement -> WHILE LPAREN expression RPAREN statement
Rule 58    iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
Rule 59    iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI
Rule 60    jump_statement -> CONTINUE SEMI
Rule 61    jump_statement -> BREAK SEMI
Rule 62    jump_statement -> RETURN expression_opt SEMI
Rule 63    expression_opt -> empty
Rule 64    expression_opt -> expression
Rule 65    expression -> assignment_expression
Rule 66    expression -> expression COMMA assignment_expression
Rule 67    assignment_expression -> conditional_expression
Rule 68    assignment_expression -> unary_expression assignment_operator assignment_expression
Rule 69    assignment_operator -> ASSIGN_OP
Rule 70    assignment_operator -> ADD_ASSIGN
Rule 71    assignment_operator -> MIN_ASSIGN
Rule 72    assignment_operator -> MUL_ASSIGN
Rule 73    assignment_operator -> DIV_ASSIGN
Rule 74    assignment_operator -> MOD_ASSIGN
Rule 75    conditional_expression -> logical_or_expression
Rule 76    conditional_expression -> logical_or_expression COND_OP expression COLON conditional_expression
Rule 77    constant_expression_opt -> empty
Rule 78    constant_expression_opt -> constant_expression
Rule 79    constant_expression -> conditional_expression
Rule 80    logical_or_expression -> logical_and_expression
Rule 81    logical_or_expression -> logical_and_expression OR logical_or_expression
Rule 82    logical_and_expression -> equality_expression
Rule 83    logical_and_expression -> logical_and_expression AND equality_expression
Rule 84    equality_expression -> relational_expression
Rule 85    equality_expression -> equality_expression EQ relational_expression
Rule 86    equality_expression -> equality_expression NEQ relational_expression
Rule 87    relational_expression -> add_expression
Rule 88    relational_expression -> relational_expression LT add_expression
Rule 89    relational_expression -> relational_expression GT add_expression
Rule 90    relational_expression -> relational_expression LE add_expression
Rule 91    relational_expression -> relational_expression GE add_expression
Rule 92    add_expression -> mult_expression
Rule 93    add_expression -> add_expression ADD_OP mult_expression
Rule 94    add_expression -> add_expression SUB_OP mult_expression
Rule 95    mult_expression -> unary_expression
Rule 96    mult_expression -> mult_expression MULT_OP unary_expression
Rule 97    mult_expression -> mult_expression DIV_OP unary_expression
Rule 98    mult_expression -> mult_expression MOD_OP unary_expression
Rule 99    unary_expression -> postfix_expression
Rule 100   unary_expression -> INC unary_expression
Rule 101   unary_expression -> DEC unary_expression
Rule 102   unary_expression -> SUB_OP add_expression
Rule 103   unary_expression -> NOT logical_or_expression
Rule 104   postfix_expression -> primary_expression
Rule 105   postfix_expression -> postfix_expression LBRACKET expression RBRACKET
Rule 106   postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN
Rule 107   postfix_expression -> postfix_expression LPAREN RPAREN
Rule 108   postfix_expression -> postfix_expression INC
Rule 109   postfix_expression -> postfix_expression DEC
Rule 110   primary_expression -> identifier
Rule 111   primary_expression -> constant
Rule 112   primary_expression -> LPAREN expression RPAREN
Rule 113   argument_expression_list -> assignment_expression
Rule 114   argument_expression_list -> argument_expression_list COMMA assignment_expression
Rule 115   identifier -> FLOAT_ID
Rule 116   identifier -> INT_ID
Rule 117   identifier -> CHAR_ID
Rule 118   identifier -> STR_ID
Rule 119   constant -> FLOAT_LIT
Rule 120   constant -> INT_LIT
Rule 121   constant -> CHAR_LIT
Rule 122   constant -> STR_LIT
Rule 123   empty -> <empty>

Terminals, with rules where they appear

ADD_ASSIGN           : 70
ADD_OP               : 93
AND                  : 83
ASSIGN_OP            : 16 69
BREAK                : 61
CASE                 : 42
CHAR_ID              : 117
CHAR_LIT             : 121
COLON                : 41 42 43 76
COMMA                : 14 22 24 29 66 114
COND_OP              : 76
CONTINUE             : 60
DEC                  : 101 109
DEFAULT              : 43
DIV_ASSIGN           : 73
DIV_OP               : 97
DO                   : 59
ELSE                 : 52 53
ELSE_IF              : 55
EQ                   : 85
FLOAT_ID             : 115
FLOAT_LIT            : 119
FOR                  : 58
GE                   : 91
GT                   : 89
IF                   : 51 52 53
INC                  : 100 108
INT_ID               : 116
INT_LIT              : 120
LBRACE               : 21 22 45 46 47 48
LBRACKET             : 19 105
LE                   : 90
LINE_COMMENT         : 
LPAREN               : 5 18 27 28 39 40 51 52 53 54 55 57 58 59 106 107 112
LT                   : 88
MAIN                 : 5
MIN_ASSIGN           : 71
MOD_ASSIGN           : 74
MOD_OP               : 98
MULTILINE_COMMENT    : 
MULT_OP              : 96
MUL_ASSIGN           : 72
NEQ                  : 86
NOT                  : 103
NULL                 : 
OR                   : 81
PRINT                : 39
RBRACE               : 21 22 45 46 47 48
RBRACKET             : 19 105
RETURN               : 62
RPAREN               : 5 18 27 28 39 40 51 52 53 54 55 57 58 59 106 107 112
SCAN                 : 40
SEMI                 : 10 25 44 58 58 59 60 61 62
STR_ID               : 118
STR_LIT              : 122
SUB_OP               : 94 102
SWITCH               : 54
WHILE                : 57 59
error                : 

Nonterminals, with rules where they appear

add_expression       : 87 88 89 90 91 93 94 102
argument_expression_list : 106 114
assignment_expression : 2 20 39 65 66 68 113 114
assignment_operator  : 68
compound_statement   : 5 26 33
conditional_expression : 67 76 79
constant             : 111
constant_expression  : 42 78
constant_expression_opt : 19
declaration          : 11 12
declaration_list     : 12 45 47
declarator           : 15 16 18 19
else_if_statement    : 53 55
empty                : 4 5 7 28 56 63 77
equality_expression  : 82 83 85 86
expression           : 51 52 53 54 55 57 59 64 66 76 105 112
expression_opt       : 44 58 58 58 62
expression_statement : 32
fxn_declaration      : 25 26
fxn_definition       : 9
fxn_prot             : 8
fxn_prot_args        : 27 29
fxn_var_statement    : 3 6
identifier           : 17 27 28 29 30 40 41 110
init_declarator      : 13 14
init_declarator_list : 10 14
initializer          : 16 23 24
initializer_list     : 21 22 24
iteration_statement  : 37
jump_statement       : 38
labeled_statement    : 31
logical_and_expression : 80 81 83
logical_or_expression : 75 76 81 103
main                 : 1
mult_expression      : 92 93 94 96 97 98
post_main            : 1 6
postfix_expression   : 99 105 106 107 108 109
pre_main             : 1 2 3
primary_expression   : 104
print_statement      : 34
relational_expression : 84 85 86 88 89 90 91
scan_statement       : 35
selection_statement  : 36
start                : 0
statement            : 41 42 43 49 50 51 52 52 53 53 54 55 57 58 59
statement_list       : 45 46 50
unary_expression     : 68 95 96 97 98 100 101

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . pre_main main post_main
    (2) pre_main -> . assignment_expression pre_main
    (3) pre_main -> . fxn_var_statement pre_main
    (4) pre_main -> . empty
    (67) assignment_expression -> . conditional_expression
    (68) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (8) fxn_var_statement -> . fxn_prot
    (9) fxn_var_statement -> . fxn_definition
    (123) empty -> .
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression COND_OP expression COLON conditional_expression
    (99) unary_expression -> . postfix_expression
    (100) unary_expression -> . INC unary_expression
    (101) unary_expression -> . DEC unary_expression
    (102) unary_expression -> . SUB_OP add_expression
    (103) unary_expression -> . NOT logical_or_expression
    (25) fxn_prot -> . fxn_declaration SEMI
    (26) fxn_definition -> . fxn_declaration compound_statement
    (80) logical_or_expression -> . logical_and_expression
    (81) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (104) postfix_expression -> . primary_expression
    (105) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (106) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (107) postfix_expression -> . postfix_expression LPAREN RPAREN
    (108) postfix_expression -> . postfix_expression INC
    (109) postfix_expression -> . postfix_expression DEC
    (27) fxn_declaration -> . identifier LPAREN fxn_prot_args RPAREN
    (28) fxn_declaration -> . identifier LPAREN empty RPAREN
    (82) logical_and_expression -> . equality_expression
    (83) logical_and_expression -> . logical_and_expression AND equality_expression
    (110) primary_expression -> . identifier
    (111) primary_expression -> . constant
    (112) primary_expression -> . LPAREN expression RPAREN
    (115) identifier -> . FLOAT_ID
    (116) identifier -> . INT_ID
    (117) identifier -> . CHAR_ID
    (118) identifier -> . STR_ID
    (84) equality_expression -> . relational_expression
    (85) equality_expression -> . equality_expression EQ relational_expression
    (86) equality_expression -> . equality_expression NEQ relational_expression
    (119) constant -> . FLOAT_LIT
    (120) constant -> . INT_LIT
    (121) constant -> . CHAR_LIT
    (122) constant -> . STR_LIT
    (87) relational_expression -> . add_expression
    (88) relational_expression -> . relational_expression LT add_expression
    (89) relational_expression -> . relational_expression GT add_expression
    (90) relational_expression -> . relational_expression LE add_expression
    (91) relational_expression -> . relational_expression GE add_expression
    (92) add_expression -> . mult_expression
    (93) add_expression -> . add_expression ADD_OP mult_expression
    (94) add_expression -> . add_expression SUB_OP mult_expression
    (95) mult_expression -> . unary_expression
    (96) mult_expression -> . mult_expression MULT_OP unary_expression
    (97) mult_expression -> . mult_expression DIV_OP unary_expression
    (98) mult_expression -> . mult_expression MOD_OP unary_expression

    MAIN            reduce using rule 123 (empty -> .)
    INC             shift and go to state 33
    DEC             shift and go to state 3
    SUB_OP          shift and go to state 28
    NOT             shift and go to state 31
    LPAREN          shift and go to state 20
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 25
    CHAR_ID         shift and go to state 7
    STR_ID          shift and go to state 13
    FLOAT_LIT       shift and go to state 27
    INT_LIT         shift and go to state 29
    CHAR_LIT        shift and go to state 6
    STR_LIT         shift and go to state 4

    constant                       shift and go to state 1
    unary_expression               shift and go to state 2
    fxn_var_statement              shift and go to state 26
    fxn_declaration                shift and go to state 8
    postfix_expression             shift and go to state 9
    start                          shift and go to state 10
    relational_expression          shift and go to state 11
    fxn_definition                 shift and go to state 12
    fxn_prot                       shift and go to state 14
    logical_or_expression          shift and go to state 15
    empty                          shift and go to state 16
    assignment_expression          shift and go to state 17
    primary_expression             shift and go to state 19
    logical_and_expression         shift and go to state 21
    add_expression                 shift and go to state 22
    equality_expression            shift and go to state 23
    pre_main                       shift and go to state 24
    conditional_expression         shift and go to state 30
    mult_expression                shift and go to state 18
    identifier                     shift and go to state 32

state 1

    (111) primary_expression -> constant .

    LBRACKET        reduce using rule 111 (primary_expression -> constant .)
    LPAREN          reduce using rule 111 (primary_expression -> constant .)
    INC             reduce using rule 111 (primary_expression -> constant .)
    DEC             reduce using rule 111 (primary_expression -> constant .)
    MULT_OP         reduce using rule 111 (primary_expression -> constant .)
    DIV_OP          reduce using rule 111 (primary_expression -> constant .)
    MOD_OP          reduce using rule 111 (primary_expression -> constant .)
    ADD_OP          reduce using rule 111 (primary_expression -> constant .)
    SUB_OP          reduce using rule 111 (primary_expression -> constant .)
    LT              reduce using rule 111 (primary_expression -> constant .)
    GT              reduce using rule 111 (primary_expression -> constant .)
    LE              reduce using rule 111 (primary_expression -> constant .)
    GE              reduce using rule 111 (primary_expression -> constant .)
    EQ              reduce using rule 111 (primary_expression -> constant .)
    NEQ             reduce using rule 111 (primary_expression -> constant .)
    OR              reduce using rule 111 (primary_expression -> constant .)
    AND             reduce using rule 111 (primary_expression -> constant .)
    COND_OP         reduce using rule 111 (primary_expression -> constant .)
    COLON           reduce using rule 111 (primary_expression -> constant .)
    ASSIGN_OP       reduce using rule 111 (primary_expression -> constant .)
    ADD_ASSIGN      reduce using rule 111 (primary_expression -> constant .)
    MIN_ASSIGN      reduce using rule 111 (primary_expression -> constant .)
    MUL_ASSIGN      reduce using rule 111 (primary_expression -> constant .)
    DIV_ASSIGN      reduce using rule 111 (primary_expression -> constant .)
    MOD_ASSIGN      reduce using rule 111 (primary_expression -> constant .)
    COMMA           reduce using rule 111 (primary_expression -> constant .)
    SEMI            reduce using rule 111 (primary_expression -> constant .)
    RPAREN          reduce using rule 111 (primary_expression -> constant .)
    NOT             reduce using rule 111 (primary_expression -> constant .)
    FLOAT_ID        reduce using rule 111 (primary_expression -> constant .)
    INT_ID          reduce using rule 111 (primary_expression -> constant .)
    CHAR_ID         reduce using rule 111 (primary_expression -> constant .)
    STR_ID          reduce using rule 111 (primary_expression -> constant .)
    FLOAT_LIT       reduce using rule 111 (primary_expression -> constant .)
    INT_LIT         reduce using rule 111 (primary_expression -> constant .)
    CHAR_LIT        reduce using rule 111 (primary_expression -> constant .)
    STR_LIT         reduce using rule 111 (primary_expression -> constant .)
    MAIN            reduce using rule 111 (primary_expression -> constant .)
    RBRACKET        reduce using rule 111 (primary_expression -> constant .)
    RBRACE          reduce using rule 111 (primary_expression -> constant .)


state 2

    (68) assignment_expression -> unary_expression . assignment_operator assignment_expression
    (95) mult_expression -> unary_expression .
    (69) assignment_operator -> . ASSIGN_OP
    (70) assignment_operator -> . ADD_ASSIGN
    (71) assignment_operator -> . MIN_ASSIGN
    (72) assignment_operator -> . MUL_ASSIGN
    (73) assignment_operator -> . DIV_ASSIGN
    (74) assignment_operator -> . MOD_ASSIGN

    MULT_OP         reduce using rule 95 (mult_expression -> unary_expression .)
    DIV_OP          reduce using rule 95 (mult_expression -> unary_expression .)
    MOD_OP          reduce using rule 95 (mult_expression -> unary_expression .)
    ADD_OP          reduce using rule 95 (mult_expression -> unary_expression .)
    SUB_OP          reduce using rule 95 (mult_expression -> unary_expression .)
    LT              reduce using rule 95 (mult_expression -> unary_expression .)
    GT              reduce using rule 95 (mult_expression -> unary_expression .)
    LE              reduce using rule 95 (mult_expression -> unary_expression .)
    GE              reduce using rule 95 (mult_expression -> unary_expression .)
    EQ              reduce using rule 95 (mult_expression -> unary_expression .)
    NEQ             reduce using rule 95 (mult_expression -> unary_expression .)
    OR              reduce using rule 95 (mult_expression -> unary_expression .)
    AND             reduce using rule 95 (mult_expression -> unary_expression .)
    COND_OP         reduce using rule 95 (mult_expression -> unary_expression .)
    COMMA           reduce using rule 95 (mult_expression -> unary_expression .)
    SEMI            reduce using rule 95 (mult_expression -> unary_expression .)
    INC             reduce using rule 95 (mult_expression -> unary_expression .)
    DEC             reduce using rule 95 (mult_expression -> unary_expression .)
    NOT             reduce using rule 95 (mult_expression -> unary_expression .)
    LPAREN          reduce using rule 95 (mult_expression -> unary_expression .)
    FLOAT_ID        reduce using rule 95 (mult_expression -> unary_expression .)
    INT_ID          reduce using rule 95 (mult_expression -> unary_expression .)
    CHAR_ID         reduce using rule 95 (mult_expression -> unary_expression .)
    STR_ID          reduce using rule 95 (mult_expression -> unary_expression .)
    FLOAT_LIT       reduce using rule 95 (mult_expression -> unary_expression .)
    INT_LIT         reduce using rule 95 (mult_expression -> unary_expression .)
    CHAR_LIT        reduce using rule 95 (mult_expression -> unary_expression .)
    STR_LIT         reduce using rule 95 (mult_expression -> unary_expression .)
    MAIN            reduce using rule 95 (mult_expression -> unary_expression .)
    RPAREN          reduce using rule 95 (mult_expression -> unary_expression .)
    RBRACKET        reduce using rule 95 (mult_expression -> unary_expression .)
    COLON           reduce using rule 95 (mult_expression -> unary_expression .)
    RBRACE          reduce using rule 95 (mult_expression -> unary_expression .)
    ASSIGN_OP       shift and go to state 37
    ADD_ASSIGN      shift and go to state 39
    MIN_ASSIGN      shift and go to state 38
    MUL_ASSIGN      shift and go to state 35
    DIV_ASSIGN      shift and go to state 40
    MOD_ASSIGN      shift and go to state 34

    assignment_operator            shift and go to state 36

state 3

    (101) unary_expression -> DEC . unary_expression
    (99) unary_expression -> . postfix_expression
    (100) unary_expression -> . INC unary_expression
    (101) unary_expression -> . DEC unary_expression
    (102) unary_expression -> . SUB_OP add_expression
    (103) unary_expression -> . NOT logical_or_expression
    (104) postfix_expression -> . primary_expression
    (105) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (106) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (107) postfix_expression -> . postfix_expression LPAREN RPAREN
    (108) postfix_expression -> . postfix_expression INC
    (109) postfix_expression -> . postfix_expression DEC
    (110) primary_expression -> . identifier
    (111) primary_expression -> . constant
    (112) primary_expression -> . LPAREN expression RPAREN
    (115) identifier -> . FLOAT_ID
    (116) identifier -> . INT_ID
    (117) identifier -> . CHAR_ID
    (118) identifier -> . STR_ID
    (119) constant -> . FLOAT_LIT
    (120) constant -> . INT_LIT
    (121) constant -> . CHAR_LIT
    (122) constant -> . STR_LIT

    INC             shift and go to state 33
    DEC             shift and go to state 3
    SUB_OP          shift and go to state 28
    NOT             shift and go to state 31
    LPAREN          shift and go to state 20
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 25
    CHAR_ID         shift and go to state 7
    STR_ID          shift and go to state 13
    FLOAT_LIT       shift and go to state 27
    INT_LIT         shift and go to state 29
    CHAR_LIT        shift and go to state 6
    STR_LIT         shift and go to state 4

    constant                       shift and go to state 1
    unary_expression               shift and go to state 41
    postfix_expression             shift and go to state 9
    primary_expression             shift and go to state 19
    identifier                     shift and go to state 42

state 4

    (122) constant -> STR_LIT .

    LBRACKET        reduce using rule 122 (constant -> STR_LIT .)
    LPAREN          reduce using rule 122 (constant -> STR_LIT .)
    INC             reduce using rule 122 (constant -> STR_LIT .)
    DEC             reduce using rule 122 (constant -> STR_LIT .)
    ASSIGN_OP       reduce using rule 122 (constant -> STR_LIT .)
    ADD_ASSIGN      reduce using rule 122 (constant -> STR_LIT .)
    MIN_ASSIGN      reduce using rule 122 (constant -> STR_LIT .)
    MUL_ASSIGN      reduce using rule 122 (constant -> STR_LIT .)
    DIV_ASSIGN      reduce using rule 122 (constant -> STR_LIT .)
    MOD_ASSIGN      reduce using rule 122 (constant -> STR_LIT .)
    MULT_OP         reduce using rule 122 (constant -> STR_LIT .)
    DIV_OP          reduce using rule 122 (constant -> STR_LIT .)
    MOD_OP          reduce using rule 122 (constant -> STR_LIT .)
    ADD_OP          reduce using rule 122 (constant -> STR_LIT .)
    SUB_OP          reduce using rule 122 (constant -> STR_LIT .)
    LT              reduce using rule 122 (constant -> STR_LIT .)
    GT              reduce using rule 122 (constant -> STR_LIT .)
    LE              reduce using rule 122 (constant -> STR_LIT .)
    GE              reduce using rule 122 (constant -> STR_LIT .)
    EQ              reduce using rule 122 (constant -> STR_LIT .)
    NEQ             reduce using rule 122 (constant -> STR_LIT .)
    OR              reduce using rule 122 (constant -> STR_LIT .)
    AND             reduce using rule 122 (constant -> STR_LIT .)
    COND_OP         reduce using rule 122 (constant -> STR_LIT .)
    COMMA           reduce using rule 122 (constant -> STR_LIT .)
    SEMI            reduce using rule 122 (constant -> STR_LIT .)
    RPAREN          reduce using rule 122 (constant -> STR_LIT .)
    NOT             reduce using rule 122 (constant -> STR_LIT .)
    FLOAT_ID        reduce using rule 122 (constant -> STR_LIT .)
    INT_ID          reduce using rule 122 (constant -> STR_LIT .)
    CHAR_ID         reduce using rule 122 (constant -> STR_LIT .)
    STR_ID          reduce using rule 122 (constant -> STR_LIT .)
    FLOAT_LIT       reduce using rule 122 (constant -> STR_LIT .)
    INT_LIT         reduce using rule 122 (constant -> STR_LIT .)
    CHAR_LIT        reduce using rule 122 (constant -> STR_LIT .)
    STR_LIT         reduce using rule 122 (constant -> STR_LIT .)
    MAIN            reduce using rule 122 (constant -> STR_LIT .)
    RBRACKET        reduce using rule 122 (constant -> STR_LIT .)
    COLON           reduce using rule 122 (constant -> STR_LIT .)
    RBRACE          reduce using rule 122 (constant -> STR_LIT .)


state 5

    (115) identifier -> FLOAT_ID .

    COLON           reduce using rule 115 (identifier -> FLOAT_ID .)
    LBRACKET        reduce using rule 115 (identifier -> FLOAT_ID .)
    LPAREN          reduce using rule 115 (identifier -> FLOAT_ID .)
    INC             reduce using rule 115 (identifier -> FLOAT_ID .)
    DEC             reduce using rule 115 (identifier -> FLOAT_ID .)
    ASSIGN_OP       reduce using rule 115 (identifier -> FLOAT_ID .)
    ADD_ASSIGN      reduce using rule 115 (identifier -> FLOAT_ID .)
    MIN_ASSIGN      reduce using rule 115 (identifier -> FLOAT_ID .)
    MUL_ASSIGN      reduce using rule 115 (identifier -> FLOAT_ID .)
    DIV_ASSIGN      reduce using rule 115 (identifier -> FLOAT_ID .)
    MOD_ASSIGN      reduce using rule 115 (identifier -> FLOAT_ID .)
    MULT_OP         reduce using rule 115 (identifier -> FLOAT_ID .)
    DIV_OP          reduce using rule 115 (identifier -> FLOAT_ID .)
    MOD_OP          reduce using rule 115 (identifier -> FLOAT_ID .)
    ADD_OP          reduce using rule 115 (identifier -> FLOAT_ID .)
    SUB_OP          reduce using rule 115 (identifier -> FLOAT_ID .)
    LT              reduce using rule 115 (identifier -> FLOAT_ID .)
    GT              reduce using rule 115 (identifier -> FLOAT_ID .)
    LE              reduce using rule 115 (identifier -> FLOAT_ID .)
    GE              reduce using rule 115 (identifier -> FLOAT_ID .)
    EQ              reduce using rule 115 (identifier -> FLOAT_ID .)
    NEQ             reduce using rule 115 (identifier -> FLOAT_ID .)
    OR              reduce using rule 115 (identifier -> FLOAT_ID .)
    AND             reduce using rule 115 (identifier -> FLOAT_ID .)
    COND_OP         reduce using rule 115 (identifier -> FLOAT_ID .)
    COMMA           reduce using rule 115 (identifier -> FLOAT_ID .)
    SEMI            reduce using rule 115 (identifier -> FLOAT_ID .)
    NOT             reduce using rule 115 (identifier -> FLOAT_ID .)
    FLOAT_ID        reduce using rule 115 (identifier -> FLOAT_ID .)
    INT_ID          reduce using rule 115 (identifier -> FLOAT_ID .)
    CHAR_ID         reduce using rule 115 (identifier -> FLOAT_ID .)
    STR_ID          reduce using rule 115 (identifier -> FLOAT_ID .)
    FLOAT_LIT       reduce using rule 115 (identifier -> FLOAT_ID .)
    INT_LIT         reduce using rule 115 (identifier -> FLOAT_ID .)
    CHAR_LIT        reduce using rule 115 (identifier -> FLOAT_ID .)
    STR_LIT         reduce using rule 115 (identifier -> FLOAT_ID .)
    MAIN            reduce using rule 115 (identifier -> FLOAT_ID .)
    RPAREN          reduce using rule 115 (identifier -> FLOAT_ID .)
    RBRACKET        reduce using rule 115 (identifier -> FLOAT_ID .)
    RBRACE          reduce using rule 115 (identifier -> FLOAT_ID .)


state 6

    (121) constant -> CHAR_LIT .

    LBRACKET        reduce using rule 121 (constant -> CHAR_LIT .)
    LPAREN          reduce using rule 121 (constant -> CHAR_LIT .)
    INC             reduce using rule 121 (constant -> CHAR_LIT .)
    DEC             reduce using rule 121 (constant -> CHAR_LIT .)
    ASSIGN_OP       reduce using rule 121 (constant -> CHAR_LIT .)
    ADD_ASSIGN      reduce using rule 121 (constant -> CHAR_LIT .)
    MIN_ASSIGN      reduce using rule 121 (constant -> CHAR_LIT .)
    MUL_ASSIGN      reduce using rule 121 (constant -> CHAR_LIT .)
    DIV_ASSIGN      reduce using rule 121 (constant -> CHAR_LIT .)
    MOD_ASSIGN      reduce using rule 121 (constant -> CHAR_LIT .)
    MULT_OP         reduce using rule 121 (constant -> CHAR_LIT .)
    DIV_OP          reduce using rule 121 (constant -> CHAR_LIT .)
    MOD_OP          reduce using rule 121 (constant -> CHAR_LIT .)
    ADD_OP          reduce using rule 121 (constant -> CHAR_LIT .)
    SUB_OP          reduce using rule 121 (constant -> CHAR_LIT .)
    LT              reduce using rule 121 (constant -> CHAR_LIT .)
    GT              reduce using rule 121 (constant -> CHAR_LIT .)
    LE              reduce using rule 121 (constant -> CHAR_LIT .)
    GE              reduce using rule 121 (constant -> CHAR_LIT .)
    EQ              reduce using rule 121 (constant -> CHAR_LIT .)
    NEQ             reduce using rule 121 (constant -> CHAR_LIT .)
    OR              reduce using rule 121 (constant -> CHAR_LIT .)
    AND             reduce using rule 121 (constant -> CHAR_LIT .)
    COND_OP         reduce using rule 121 (constant -> CHAR_LIT .)
    COMMA           reduce using rule 121 (constant -> CHAR_LIT .)
    SEMI            reduce using rule 121 (constant -> CHAR_LIT .)
    RPAREN          reduce using rule 121 (constant -> CHAR_LIT .)
    NOT             reduce using rule 121 (constant -> CHAR_LIT .)
    FLOAT_ID        reduce using rule 121 (constant -> CHAR_LIT .)
    INT_ID          reduce using rule 121 (constant -> CHAR_LIT .)
    CHAR_ID         reduce using rule 121 (constant -> CHAR_LIT .)
    STR_ID          reduce using rule 121 (constant -> CHAR_LIT .)
    FLOAT_LIT       reduce using rule 121 (constant -> CHAR_LIT .)
    INT_LIT         reduce using rule 121 (constant -> CHAR_LIT .)
    CHAR_LIT        reduce using rule 121 (constant -> CHAR_LIT .)
    STR_LIT         reduce using rule 121 (constant -> CHAR_LIT .)
    MAIN            reduce using rule 121 (constant -> CHAR_LIT .)
    RBRACKET        reduce using rule 121 (constant -> CHAR_LIT .)
    COLON           reduce using rule 121 (constant -> CHAR_LIT .)
    RBRACE          reduce using rule 121 (constant -> CHAR_LIT .)


state 7

    (117) identifier -> CHAR_ID .

    COLON           reduce using rule 117 (identifier -> CHAR_ID .)
    LBRACKET        reduce using rule 117 (identifier -> CHAR_ID .)
    LPAREN          reduce using rule 117 (identifier -> CHAR_ID .)
    INC             reduce using rule 117 (identifier -> CHAR_ID .)
    DEC             reduce using rule 117 (identifier -> CHAR_ID .)
    ASSIGN_OP       reduce using rule 117 (identifier -> CHAR_ID .)
    ADD_ASSIGN      reduce using rule 117 (identifier -> CHAR_ID .)
    MIN_ASSIGN      reduce using rule 117 (identifier -> CHAR_ID .)
    MUL_ASSIGN      reduce using rule 117 (identifier -> CHAR_ID .)
    DIV_ASSIGN      reduce using rule 117 (identifier -> CHAR_ID .)
    MOD_ASSIGN      reduce using rule 117 (identifier -> CHAR_ID .)
    MULT_OP         reduce using rule 117 (identifier -> CHAR_ID .)
    DIV_OP          reduce using rule 117 (identifier -> CHAR_ID .)
    MOD_OP          reduce using rule 117 (identifier -> CHAR_ID .)
    ADD_OP          reduce using rule 117 (identifier -> CHAR_ID .)
    SUB_OP          reduce using rule 117 (identifier -> CHAR_ID .)
    LT              reduce using rule 117 (identifier -> CHAR_ID .)
    GT              reduce using rule 117 (identifier -> CHAR_ID .)
    LE              reduce using rule 117 (identifier -> CHAR_ID .)
    GE              reduce using rule 117 (identifier -> CHAR_ID .)
    EQ              reduce using rule 117 (identifier -> CHAR_ID .)
    NEQ             reduce using rule 117 (identifier -> CHAR_ID .)
    OR              reduce using rule 117 (identifier -> CHAR_ID .)
    AND             reduce using rule 117 (identifier -> CHAR_ID .)
    COND_OP         reduce using rule 117 (identifier -> CHAR_ID .)
    COMMA           reduce using rule 117 (identifier -> CHAR_ID .)
    SEMI            reduce using rule 117 (identifier -> CHAR_ID .)
    NOT             reduce using rule 117 (identifier -> CHAR_ID .)
    FLOAT_ID        reduce using rule 117 (identifier -> CHAR_ID .)
    INT_ID          reduce using rule 117 (identifier -> CHAR_ID .)
    CHAR_ID         reduce using rule 117 (identifier -> CHAR_ID .)
    STR_ID          reduce using rule 117 (identifier -> CHAR_ID .)
    FLOAT_LIT       reduce using rule 117 (identifier -> CHAR_ID .)
    INT_LIT         reduce using rule 117 (identifier -> CHAR_ID .)
    CHAR_LIT        reduce using rule 117 (identifier -> CHAR_ID .)
    STR_LIT         reduce using rule 117 (identifier -> CHAR_ID .)
    MAIN            reduce using rule 117 (identifier -> CHAR_ID .)
    RPAREN          reduce using rule 117 (identifier -> CHAR_ID .)
    RBRACKET        reduce using rule 117 (identifier -> CHAR_ID .)
    RBRACE          reduce using rule 117 (identifier -> CHAR_ID .)


state 8

    (25) fxn_prot -> fxn_declaration . SEMI
    (26) fxn_definition -> fxn_declaration . compound_statement
    (45) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (46) compound_statement -> . LBRACE statement_list RBRACE
    (47) compound_statement -> . LBRACE declaration_list RBRACE
    (48) compound_statement -> . LBRACE RBRACE

    SEMI            shift and go to state 44
    LBRACE          shift and go to state 43

    compound_statement             shift and go to state 45

state 9

    (99) unary_expression -> postfix_expression .
    (105) postfix_expression -> postfix_expression . LBRACKET expression RBRACKET
    (106) postfix_expression -> postfix_expression . LPAREN argument_expression_list RPAREN
    (107) postfix_expression -> postfix_expression . LPAREN RPAREN
    (108) postfix_expression -> postfix_expression . INC
    (109) postfix_expression -> postfix_expression . DEC

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for INC resolved as shift
  ! shift/reduce conflict for DEC resolved as shift
    ASSIGN_OP       reduce using rule 99 (unary_expression -> postfix_expression .)
    ADD_ASSIGN      reduce using rule 99 (unary_expression -> postfix_expression .)
    MIN_ASSIGN      reduce using rule 99 (unary_expression -> postfix_expression .)
    MUL_ASSIGN      reduce using rule 99 (unary_expression -> postfix_expression .)
    DIV_ASSIGN      reduce using rule 99 (unary_expression -> postfix_expression .)
    MOD_ASSIGN      reduce using rule 99 (unary_expression -> postfix_expression .)
    MULT_OP         reduce using rule 99 (unary_expression -> postfix_expression .)
    DIV_OP          reduce using rule 99 (unary_expression -> postfix_expression .)
    MOD_OP          reduce using rule 99 (unary_expression -> postfix_expression .)
    ADD_OP          reduce using rule 99 (unary_expression -> postfix_expression .)
    SUB_OP          reduce using rule 99 (unary_expression -> postfix_expression .)
    LT              reduce using rule 99 (unary_expression -> postfix_expression .)
    GT              reduce using rule 99 (unary_expression -> postfix_expression .)
    LE              reduce using rule 99 (unary_expression -> postfix_expression .)
    GE              reduce using rule 99 (unary_expression -> postfix_expression .)
    EQ              reduce using rule 99 (unary_expression -> postfix_expression .)
    NEQ             reduce using rule 99 (unary_expression -> postfix_expression .)
    OR              reduce using rule 99 (unary_expression -> postfix_expression .)
    AND             reduce using rule 99 (unary_expression -> postfix_expression .)
    COND_OP         reduce using rule 99 (unary_expression -> postfix_expression .)
    NOT             reduce using rule 99 (unary_expression -> postfix_expression .)
    FLOAT_ID        reduce using rule 99 (unary_expression -> postfix_expression .)
    INT_ID          reduce using rule 99 (unary_expression -> postfix_expression .)
    CHAR_ID         reduce using rule 99 (unary_expression -> postfix_expression .)
    STR_ID          reduce using rule 99 (unary_expression -> postfix_expression .)
    FLOAT_LIT       reduce using rule 99 (unary_expression -> postfix_expression .)
    INT_LIT         reduce using rule 99 (unary_expression -> postfix_expression .)
    CHAR_LIT        reduce using rule 99 (unary_expression -> postfix_expression .)
    STR_LIT         reduce using rule 99 (unary_expression -> postfix_expression .)
    MAIN            reduce using rule 99 (unary_expression -> postfix_expression .)
    RPAREN          reduce using rule 99 (unary_expression -> postfix_expression .)
    COMMA           reduce using rule 99 (unary_expression -> postfix_expression .)
    SEMI            reduce using rule 99 (unary_expression -> postfix_expression .)
    RBRACKET        reduce using rule 99 (unary_expression -> postfix_expression .)
    COLON           reduce using rule 99 (unary_expression -> postfix_expression .)
    RBRACE          reduce using rule 99 (unary_expression -> postfix_expression .)
    LBRACKET        shift and go to state 46
    LPAREN          shift and go to state 47
    INC             shift and go to state 49
    DEC             shift and go to state 48

  ! INC             [ reduce using rule 99 (unary_expression -> postfix_expression .) ]
  ! DEC             [ reduce using rule 99 (unary_expression -> postfix_expression .) ]
  ! LPAREN          [ reduce using rule 99 (unary_expression -> postfix_expression .) ]


state 10

    (0) S' -> start .



state 11

    (84) equality_expression -> relational_expression .
    (88) relational_expression -> relational_expression . LT add_expression
    (89) relational_expression -> relational_expression . GT add_expression
    (90) relational_expression -> relational_expression . LE add_expression
    (91) relational_expression -> relational_expression . GE add_expression

  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    EQ              reduce using rule 84 (equality_expression -> relational_expression .)
    NEQ             reduce using rule 84 (equality_expression -> relational_expression .)
    OR              reduce using rule 84 (equality_expression -> relational_expression .)
    AND             reduce using rule 84 (equality_expression -> relational_expression .)
    COND_OP         reduce using rule 84 (equality_expression -> relational_expression .)
    COMMA           reduce using rule 84 (equality_expression -> relational_expression .)
    SEMI            reduce using rule 84 (equality_expression -> relational_expression .)
    ASSIGN_OP       reduce using rule 84 (equality_expression -> relational_expression .)
    ADD_ASSIGN      reduce using rule 84 (equality_expression -> relational_expression .)
    MIN_ASSIGN      reduce using rule 84 (equality_expression -> relational_expression .)
    MUL_ASSIGN      reduce using rule 84 (equality_expression -> relational_expression .)
    DIV_ASSIGN      reduce using rule 84 (equality_expression -> relational_expression .)
    MOD_ASSIGN      reduce using rule 84 (equality_expression -> relational_expression .)
    MULT_OP         reduce using rule 84 (equality_expression -> relational_expression .)
    DIV_OP          reduce using rule 84 (equality_expression -> relational_expression .)
    MOD_OP          reduce using rule 84 (equality_expression -> relational_expression .)
    ADD_OP          reduce using rule 84 (equality_expression -> relational_expression .)
    SUB_OP          reduce using rule 84 (equality_expression -> relational_expression .)
    INC             reduce using rule 84 (equality_expression -> relational_expression .)
    DEC             reduce using rule 84 (equality_expression -> relational_expression .)
    NOT             reduce using rule 84 (equality_expression -> relational_expression .)
    LPAREN          reduce using rule 84 (equality_expression -> relational_expression .)
    FLOAT_ID        reduce using rule 84 (equality_expression -> relational_expression .)
    INT_ID          reduce using rule 84 (equality_expression -> relational_expression .)
    CHAR_ID         reduce using rule 84 (equality_expression -> relational_expression .)
    STR_ID          reduce using rule 84 (equality_expression -> relational_expression .)
    FLOAT_LIT       reduce using rule 84 (equality_expression -> relational_expression .)
    INT_LIT         reduce using rule 84 (equality_expression -> relational_expression .)
    CHAR_LIT        reduce using rule 84 (equality_expression -> relational_expression .)
    STR_LIT         reduce using rule 84 (equality_expression -> relational_expression .)
    MAIN            reduce using rule 84 (equality_expression -> relational_expression .)
    RPAREN          reduce using rule 84 (equality_expression -> relational_expression .)
    RBRACKET        reduce using rule 84 (equality_expression -> relational_expression .)
    COLON           reduce using rule 84 (equality_expression -> relational_expression .)
    RBRACE          reduce using rule 84 (equality_expression -> relational_expression .)
    LT              shift and go to state 51
    GT              shift and go to state 50
    LE              shift and go to state 53
    GE              shift and go to state 52

  ! LT              [ reduce using rule 84 (equality_expression -> relational_expression .) ]
  ! GT              [ reduce using rule 84 (equality_expression -> relational_expression .) ]
  ! LE              [ reduce using rule 84 (equality_expression -> relational_expression .) ]
  ! GE              [ reduce using rule 84 (equality_expression -> relational_expression .) ]


state 12

    (9) fxn_var_statement -> fxn_definition .

    FLOAT_ID        reduce using rule 9 (fxn_var_statement -> fxn_definition .)
    INT_ID          reduce using rule 9 (fxn_var_statement -> fxn_definition .)
    CHAR_ID         reduce using rule 9 (fxn_var_statement -> fxn_definition .)
    STR_ID          reduce using rule 9 (fxn_var_statement -> fxn_definition .)
    $end            reduce using rule 9 (fxn_var_statement -> fxn_definition .)
    INC             reduce using rule 9 (fxn_var_statement -> fxn_definition .)
    DEC             reduce using rule 9 (fxn_var_statement -> fxn_definition .)
    SUB_OP          reduce using rule 9 (fxn_var_statement -> fxn_definition .)
    NOT             reduce using rule 9 (fxn_var_statement -> fxn_definition .)
    LPAREN          reduce using rule 9 (fxn_var_statement -> fxn_definition .)
    FLOAT_LIT       reduce using rule 9 (fxn_var_statement -> fxn_definition .)
    INT_LIT         reduce using rule 9 (fxn_var_statement -> fxn_definition .)
    CHAR_LIT        reduce using rule 9 (fxn_var_statement -> fxn_definition .)
    STR_LIT         reduce using rule 9 (fxn_var_statement -> fxn_definition .)
    MAIN            reduce using rule 9 (fxn_var_statement -> fxn_definition .)


state 13

    (118) identifier -> STR_ID .

    COLON           reduce using rule 118 (identifier -> STR_ID .)
    LBRACKET        reduce using rule 118 (identifier -> STR_ID .)
    LPAREN          reduce using rule 118 (identifier -> STR_ID .)
    INC             reduce using rule 118 (identifier -> STR_ID .)
    DEC             reduce using rule 118 (identifier -> STR_ID .)
    ASSIGN_OP       reduce using rule 118 (identifier -> STR_ID .)
    ADD_ASSIGN      reduce using rule 118 (identifier -> STR_ID .)
    MIN_ASSIGN      reduce using rule 118 (identifier -> STR_ID .)
    MUL_ASSIGN      reduce using rule 118 (identifier -> STR_ID .)
    DIV_ASSIGN      reduce using rule 118 (identifier -> STR_ID .)
    MOD_ASSIGN      reduce using rule 118 (identifier -> STR_ID .)
    MULT_OP         reduce using rule 118 (identifier -> STR_ID .)
    DIV_OP          reduce using rule 118 (identifier -> STR_ID .)
    MOD_OP          reduce using rule 118 (identifier -> STR_ID .)
    ADD_OP          reduce using rule 118 (identifier -> STR_ID .)
    SUB_OP          reduce using rule 118 (identifier -> STR_ID .)
    LT              reduce using rule 118 (identifier -> STR_ID .)
    GT              reduce using rule 118 (identifier -> STR_ID .)
    LE              reduce using rule 118 (identifier -> STR_ID .)
    GE              reduce using rule 118 (identifier -> STR_ID .)
    EQ              reduce using rule 118 (identifier -> STR_ID .)
    NEQ             reduce using rule 118 (identifier -> STR_ID .)
    OR              reduce using rule 118 (identifier -> STR_ID .)
    AND             reduce using rule 118 (identifier -> STR_ID .)
    COND_OP         reduce using rule 118 (identifier -> STR_ID .)
    COMMA           reduce using rule 118 (identifier -> STR_ID .)
    SEMI            reduce using rule 118 (identifier -> STR_ID .)
    NOT             reduce using rule 118 (identifier -> STR_ID .)
    FLOAT_ID        reduce using rule 118 (identifier -> STR_ID .)
    INT_ID          reduce using rule 118 (identifier -> STR_ID .)
    CHAR_ID         reduce using rule 118 (identifier -> STR_ID .)
    STR_ID          reduce using rule 118 (identifier -> STR_ID .)
    FLOAT_LIT       reduce using rule 118 (identifier -> STR_ID .)
    INT_LIT         reduce using rule 118 (identifier -> STR_ID .)
    CHAR_LIT        reduce using rule 118 (identifier -> STR_ID .)
    STR_LIT         reduce using rule 118 (identifier -> STR_ID .)
    MAIN            reduce using rule 118 (identifier -> STR_ID .)
    RPAREN          reduce using rule 118 (identifier -> STR_ID .)
    RBRACKET        reduce using rule 118 (identifier -> STR_ID .)
    RBRACE          reduce using rule 118 (identifier -> STR_ID .)


state 14

    (8) fxn_var_statement -> fxn_prot .

    FLOAT_ID        reduce using rule 8 (fxn_var_statement -> fxn_prot .)
    INT_ID          reduce using rule 8 (fxn_var_statement -> fxn_prot .)
    CHAR_ID         reduce using rule 8 (fxn_var_statement -> fxn_prot .)
    STR_ID          reduce using rule 8 (fxn_var_statement -> fxn_prot .)
    $end            reduce using rule 8 (fxn_var_statement -> fxn_prot .)
    INC             reduce using rule 8 (fxn_var_statement -> fxn_prot .)
    DEC             reduce using rule 8 (fxn_var_statement -> fxn_prot .)
    SUB_OP          reduce using rule 8 (fxn_var_statement -> fxn_prot .)
    NOT             reduce using rule 8 (fxn_var_statement -> fxn_prot .)
    LPAREN          reduce using rule 8 (fxn_var_statement -> fxn_prot .)
    FLOAT_LIT       reduce using rule 8 (fxn_var_statement -> fxn_prot .)
    INT_LIT         reduce using rule 8 (fxn_var_statement -> fxn_prot .)
    CHAR_LIT        reduce using rule 8 (fxn_var_statement -> fxn_prot .)
    STR_LIT         reduce using rule 8 (fxn_var_statement -> fxn_prot .)
    MAIN            reduce using rule 8 (fxn_var_statement -> fxn_prot .)


state 15

    (75) conditional_expression -> logical_or_expression .
    (76) conditional_expression -> logical_or_expression . COND_OP expression COLON conditional_expression

    RPAREN          reduce using rule 75 (conditional_expression -> logical_or_expression .)
    COMMA           reduce using rule 75 (conditional_expression -> logical_or_expression .)
    COLON           reduce using rule 75 (conditional_expression -> logical_or_expression .)
    INC             reduce using rule 75 (conditional_expression -> logical_or_expression .)
    DEC             reduce using rule 75 (conditional_expression -> logical_or_expression .)
    SUB_OP          reduce using rule 75 (conditional_expression -> logical_or_expression .)
    NOT             reduce using rule 75 (conditional_expression -> logical_or_expression .)
    LPAREN          reduce using rule 75 (conditional_expression -> logical_or_expression .)
    FLOAT_ID        reduce using rule 75 (conditional_expression -> logical_or_expression .)
    INT_ID          reduce using rule 75 (conditional_expression -> logical_or_expression .)
    CHAR_ID         reduce using rule 75 (conditional_expression -> logical_or_expression .)
    STR_ID          reduce using rule 75 (conditional_expression -> logical_or_expression .)
    FLOAT_LIT       reduce using rule 75 (conditional_expression -> logical_or_expression .)
    INT_LIT         reduce using rule 75 (conditional_expression -> logical_or_expression .)
    CHAR_LIT        reduce using rule 75 (conditional_expression -> logical_or_expression .)
    STR_LIT         reduce using rule 75 (conditional_expression -> logical_or_expression .)
    MAIN            reduce using rule 75 (conditional_expression -> logical_or_expression .)
    RBRACE          reduce using rule 75 (conditional_expression -> logical_or_expression .)
    SEMI            reduce using rule 75 (conditional_expression -> logical_or_expression .)
    RBRACKET        reduce using rule 75 (conditional_expression -> logical_or_expression .)
    COND_OP         shift and go to state 54


state 16

    (4) pre_main -> empty .

    MAIN            reduce using rule 4 (pre_main -> empty .)


state 17

    (2) pre_main -> assignment_expression . pre_main
    (2) pre_main -> . assignment_expression pre_main
    (3) pre_main -> . fxn_var_statement pre_main
    (4) pre_main -> . empty
    (67) assignment_expression -> . conditional_expression
    (68) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (8) fxn_var_statement -> . fxn_prot
    (9) fxn_var_statement -> . fxn_definition
    (123) empty -> .
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression COND_OP expression COLON conditional_expression
    (99) unary_expression -> . postfix_expression
    (100) unary_expression -> . INC unary_expression
    (101) unary_expression -> . DEC unary_expression
    (102) unary_expression -> . SUB_OP add_expression
    (103) unary_expression -> . NOT logical_or_expression
    (25) fxn_prot -> . fxn_declaration SEMI
    (26) fxn_definition -> . fxn_declaration compound_statement
    (80) logical_or_expression -> . logical_and_expression
    (81) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (104) postfix_expression -> . primary_expression
    (105) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (106) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (107) postfix_expression -> . postfix_expression LPAREN RPAREN
    (108) postfix_expression -> . postfix_expression INC
    (109) postfix_expression -> . postfix_expression DEC
    (27) fxn_declaration -> . identifier LPAREN fxn_prot_args RPAREN
    (28) fxn_declaration -> . identifier LPAREN empty RPAREN
    (82) logical_and_expression -> . equality_expression
    (83) logical_and_expression -> . logical_and_expression AND equality_expression
    (110) primary_expression -> . identifier
    (111) primary_expression -> . constant
    (112) primary_expression -> . LPAREN expression RPAREN
    (115) identifier -> . FLOAT_ID
    (116) identifier -> . INT_ID
    (117) identifier -> . CHAR_ID
    (118) identifier -> . STR_ID
    (84) equality_expression -> . relational_expression
    (85) equality_expression -> . equality_expression EQ relational_expression
    (86) equality_expression -> . equality_expression NEQ relational_expression
    (119) constant -> . FLOAT_LIT
    (120) constant -> . INT_LIT
    (121) constant -> . CHAR_LIT
    (122) constant -> . STR_LIT
    (87) relational_expression -> . add_expression
    (88) relational_expression -> . relational_expression LT add_expression
    (89) relational_expression -> . relational_expression GT add_expression
    (90) relational_expression -> . relational_expression LE add_expression
    (91) relational_expression -> . relational_expression GE add_expression
    (92) add_expression -> . mult_expression
    (93) add_expression -> . add_expression ADD_OP mult_expression
    (94) add_expression -> . add_expression SUB_OP mult_expression
    (95) mult_expression -> . unary_expression
    (96) mult_expression -> . mult_expression MULT_OP unary_expression
    (97) mult_expression -> . mult_expression DIV_OP unary_expression
    (98) mult_expression -> . mult_expression MOD_OP unary_expression

    MAIN            reduce using rule 123 (empty -> .)
    INC             shift and go to state 33
    DEC             shift and go to state 3
    SUB_OP          shift and go to state 28
    NOT             shift and go to state 31
    LPAREN          shift and go to state 20
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 25
    CHAR_ID         shift and go to state 7
    STR_ID          shift and go to state 13
    FLOAT_LIT       shift and go to state 27
    INT_LIT         shift and go to state 29
    CHAR_LIT        shift and go to state 6
    STR_LIT         shift and go to state 4

    constant                       shift and go to state 1
    unary_expression               shift and go to state 2
    fxn_var_statement              shift and go to state 26
    fxn_declaration                shift and go to state 8
    postfix_expression             shift and go to state 9
    relational_expression          shift and go to state 11
    fxn_definition                 shift and go to state 12
    fxn_prot                       shift and go to state 14
    logical_or_expression          shift and go to state 15
    empty                          shift and go to state 16
    assignment_expression          shift and go to state 17
    primary_expression             shift and go to state 19
    logical_and_expression         shift and go to state 21
    add_expression                 shift and go to state 22
    equality_expression            shift and go to state 23
    pre_main                       shift and go to state 55
    conditional_expression         shift and go to state 30
    mult_expression                shift and go to state 18
    identifier                     shift and go to state 32

state 18

    (92) add_expression -> mult_expression .
    (96) mult_expression -> mult_expression . MULT_OP unary_expression
    (97) mult_expression -> mult_expression . DIV_OP unary_expression
    (98) mult_expression -> mult_expression . MOD_OP unary_expression

  ! shift/reduce conflict for MULT_OP resolved as shift
  ! shift/reduce conflict for DIV_OP resolved as shift
  ! shift/reduce conflict for MOD_OP resolved as shift
    ASSIGN_OP       reduce using rule 92 (add_expression -> mult_expression .)
    ADD_ASSIGN      reduce using rule 92 (add_expression -> mult_expression .)
    MIN_ASSIGN      reduce using rule 92 (add_expression -> mult_expression .)
    MUL_ASSIGN      reduce using rule 92 (add_expression -> mult_expression .)
    DIV_ASSIGN      reduce using rule 92 (add_expression -> mult_expression .)
    MOD_ASSIGN      reduce using rule 92 (add_expression -> mult_expression .)
    ADD_OP          reduce using rule 92 (add_expression -> mult_expression .)
    SUB_OP          reduce using rule 92 (add_expression -> mult_expression .)
    LT              reduce using rule 92 (add_expression -> mult_expression .)
    GT              reduce using rule 92 (add_expression -> mult_expression .)
    LE              reduce using rule 92 (add_expression -> mult_expression .)
    GE              reduce using rule 92 (add_expression -> mult_expression .)
    EQ              reduce using rule 92 (add_expression -> mult_expression .)
    NEQ             reduce using rule 92 (add_expression -> mult_expression .)
    OR              reduce using rule 92 (add_expression -> mult_expression .)
    AND             reduce using rule 92 (add_expression -> mult_expression .)
    COND_OP         reduce using rule 92 (add_expression -> mult_expression .)
    INC             reduce using rule 92 (add_expression -> mult_expression .)
    DEC             reduce using rule 92 (add_expression -> mult_expression .)
    NOT             reduce using rule 92 (add_expression -> mult_expression .)
    LPAREN          reduce using rule 92 (add_expression -> mult_expression .)
    FLOAT_ID        reduce using rule 92 (add_expression -> mult_expression .)
    INT_ID          reduce using rule 92 (add_expression -> mult_expression .)
    CHAR_ID         reduce using rule 92 (add_expression -> mult_expression .)
    STR_ID          reduce using rule 92 (add_expression -> mult_expression .)
    FLOAT_LIT       reduce using rule 92 (add_expression -> mult_expression .)
    INT_LIT         reduce using rule 92 (add_expression -> mult_expression .)
    CHAR_LIT        reduce using rule 92 (add_expression -> mult_expression .)
    STR_LIT         reduce using rule 92 (add_expression -> mult_expression .)
    MAIN            reduce using rule 92 (add_expression -> mult_expression .)
    RPAREN          reduce using rule 92 (add_expression -> mult_expression .)
    COMMA           reduce using rule 92 (add_expression -> mult_expression .)
    SEMI            reduce using rule 92 (add_expression -> mult_expression .)
    RBRACKET        reduce using rule 92 (add_expression -> mult_expression .)
    COLON           reduce using rule 92 (add_expression -> mult_expression .)
    RBRACE          reduce using rule 92 (add_expression -> mult_expression .)
    MULT_OP         shift and go to state 56
    DIV_OP          shift and go to state 58
    MOD_OP          shift and go to state 57

  ! MULT_OP         [ reduce using rule 92 (add_expression -> mult_expression .) ]
  ! DIV_OP          [ reduce using rule 92 (add_expression -> mult_expression .) ]
  ! MOD_OP          [ reduce using rule 92 (add_expression -> mult_expression .) ]


state 19

    (104) postfix_expression -> primary_expression .

    LBRACKET        reduce using rule 104 (postfix_expression -> primary_expression .)
    LPAREN          reduce using rule 104 (postfix_expression -> primary_expression .)
    INC             reduce using rule 104 (postfix_expression -> primary_expression .)
    DEC             reduce using rule 104 (postfix_expression -> primary_expression .)
    ASSIGN_OP       reduce using rule 104 (postfix_expression -> primary_expression .)
    ADD_ASSIGN      reduce using rule 104 (postfix_expression -> primary_expression .)
    MIN_ASSIGN      reduce using rule 104 (postfix_expression -> primary_expression .)
    MUL_ASSIGN      reduce using rule 104 (postfix_expression -> primary_expression .)
    DIV_ASSIGN      reduce using rule 104 (postfix_expression -> primary_expression .)
    MOD_ASSIGN      reduce using rule 104 (postfix_expression -> primary_expression .)
    MULT_OP         reduce using rule 104 (postfix_expression -> primary_expression .)
    DIV_OP          reduce using rule 104 (postfix_expression -> primary_expression .)
    MOD_OP          reduce using rule 104 (postfix_expression -> primary_expression .)
    ADD_OP          reduce using rule 104 (postfix_expression -> primary_expression .)
    SUB_OP          reduce using rule 104 (postfix_expression -> primary_expression .)
    LT              reduce using rule 104 (postfix_expression -> primary_expression .)
    GT              reduce using rule 104 (postfix_expression -> primary_expression .)
    LE              reduce using rule 104 (postfix_expression -> primary_expression .)
    GE              reduce using rule 104 (postfix_expression -> primary_expression .)
    EQ              reduce using rule 104 (postfix_expression -> primary_expression .)
    NEQ             reduce using rule 104 (postfix_expression -> primary_expression .)
    OR              reduce using rule 104 (postfix_expression -> primary_expression .)
    AND             reduce using rule 104 (postfix_expression -> primary_expression .)
    COND_OP         reduce using rule 104 (postfix_expression -> primary_expression .)
    NOT             reduce using rule 104 (postfix_expression -> primary_expression .)
    FLOAT_ID        reduce using rule 104 (postfix_expression -> primary_expression .)
    INT_ID          reduce using rule 104 (postfix_expression -> primary_expression .)
    CHAR_ID         reduce using rule 104 (postfix_expression -> primary_expression .)
    STR_ID          reduce using rule 104 (postfix_expression -> primary_expression .)
    FLOAT_LIT       reduce using rule 104 (postfix_expression -> primary_expression .)
    INT_LIT         reduce using rule 104 (postfix_expression -> primary_expression .)
    CHAR_LIT        reduce using rule 104 (postfix_expression -> primary_expression .)
    STR_LIT         reduce using rule 104 (postfix_expression -> primary_expression .)
    MAIN            reduce using rule 104 (postfix_expression -> primary_expression .)
    RPAREN          reduce using rule 104 (postfix_expression -> primary_expression .)
    COMMA           reduce using rule 104 (postfix_expression -> primary_expression .)
    SEMI            reduce using rule 104 (postfix_expression -> primary_expression .)
    RBRACKET        reduce using rule 104 (postfix_expression -> primary_expression .)
    COLON           reduce using rule 104 (postfix_expression -> primary_expression .)
    RBRACE          reduce using rule 104 (postfix_expression -> primary_expression .)


state 20

    (112) primary_expression -> LPAREN . expression RPAREN
    (65) expression -> . assignment_expression
    (66) expression -> . expression COMMA assignment_expression
    (67) assignment_expression -> . conditional_expression
    (68) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression COND_OP expression COLON conditional_expression
    (99) unary_expression -> . postfix_expression
    (100) unary_expression -> . INC unary_expression
    (101) unary_expression -> . DEC unary_expression
    (102) unary_expression -> . SUB_OP add_expression
    (103) unary_expression -> . NOT logical_or_expression
    (80) logical_or_expression -> . logical_and_expression
    (81) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (104) postfix_expression -> . primary_expression
    (105) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (106) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (107) postfix_expression -> . postfix_expression LPAREN RPAREN
    (108) postfix_expression -> . postfix_expression INC
    (109) postfix_expression -> . postfix_expression DEC
    (82) logical_and_expression -> . equality_expression
    (83) logical_and_expression -> . logical_and_expression AND equality_expression
    (110) primary_expression -> . identifier
    (111) primary_expression -> . constant
    (112) primary_expression -> . LPAREN expression RPAREN
    (84) equality_expression -> . relational_expression
    (85) equality_expression -> . equality_expression EQ relational_expression
    (86) equality_expression -> . equality_expression NEQ relational_expression
    (115) identifier -> . FLOAT_ID
    (116) identifier -> . INT_ID
    (117) identifier -> . CHAR_ID
    (118) identifier -> . STR_ID
    (119) constant -> . FLOAT_LIT
    (120) constant -> . INT_LIT
    (121) constant -> . CHAR_LIT
    (122) constant -> . STR_LIT
    (87) relational_expression -> . add_expression
    (88) relational_expression -> . relational_expression LT add_expression
    (89) relational_expression -> . relational_expression GT add_expression
    (90) relational_expression -> . relational_expression LE add_expression
    (91) relational_expression -> . relational_expression GE add_expression
    (92) add_expression -> . mult_expression
    (93) add_expression -> . add_expression ADD_OP mult_expression
    (94) add_expression -> . add_expression SUB_OP mult_expression
    (95) mult_expression -> . unary_expression
    (96) mult_expression -> . mult_expression MULT_OP unary_expression
    (97) mult_expression -> . mult_expression DIV_OP unary_expression
    (98) mult_expression -> . mult_expression MOD_OP unary_expression

    INC             shift and go to state 33
    DEC             shift and go to state 3
    SUB_OP          shift and go to state 28
    NOT             shift and go to state 31
    LPAREN          shift and go to state 20
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 25
    CHAR_ID         shift and go to state 7
    STR_ID          shift and go to state 13
    FLOAT_LIT       shift and go to state 27
    INT_LIT         shift and go to state 29
    CHAR_LIT        shift and go to state 6
    STR_LIT         shift and go to state 4

    constant                       shift and go to state 1
    assignment_expression          shift and go to state 59
    unary_expression               shift and go to state 2
    relational_expression          shift and go to state 11
    add_expression                 shift and go to state 22
    postfix_expression             shift and go to state 9
    conditional_expression         shift and go to state 30
    mult_expression                shift and go to state 18
    logical_and_expression         shift and go to state 21
    identifier                     shift and go to state 42
    expression                     shift and go to state 60
    logical_or_expression          shift and go to state 15
    equality_expression            shift and go to state 23
    primary_expression             shift and go to state 19

state 21

    (80) logical_or_expression -> logical_and_expression .
    (81) logical_or_expression -> logical_and_expression . OR logical_or_expression
    (83) logical_and_expression -> logical_and_expression . AND equality_expression

  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    COND_OP         reduce using rule 80 (logical_or_expression -> logical_and_expression .)
    COMMA           reduce using rule 80 (logical_or_expression -> logical_and_expression .)
    SEMI            reduce using rule 80 (logical_or_expression -> logical_and_expression .)
    RPAREN          reduce using rule 80 (logical_or_expression -> logical_and_expression .)
    INC             reduce using rule 80 (logical_or_expression -> logical_and_expression .)
    DEC             reduce using rule 80 (logical_or_expression -> logical_and_expression .)
    SUB_OP          reduce using rule 80 (logical_or_expression -> logical_and_expression .)
    NOT             reduce using rule 80 (logical_or_expression -> logical_and_expression .)
    LPAREN          reduce using rule 80 (logical_or_expression -> logical_and_expression .)
    FLOAT_ID        reduce using rule 80 (logical_or_expression -> logical_and_expression .)
    INT_ID          reduce using rule 80 (logical_or_expression -> logical_and_expression .)
    CHAR_ID         reduce using rule 80 (logical_or_expression -> logical_and_expression .)
    STR_ID          reduce using rule 80 (logical_or_expression -> logical_and_expression .)
    FLOAT_LIT       reduce using rule 80 (logical_or_expression -> logical_and_expression .)
    INT_LIT         reduce using rule 80 (logical_or_expression -> logical_and_expression .)
    CHAR_LIT        reduce using rule 80 (logical_or_expression -> logical_and_expression .)
    STR_LIT         reduce using rule 80 (logical_or_expression -> logical_and_expression .)
    MAIN            reduce using rule 80 (logical_or_expression -> logical_and_expression .)
    RBRACKET        reduce using rule 80 (logical_or_expression -> logical_and_expression .)
    COLON           reduce using rule 80 (logical_or_expression -> logical_and_expression .)
    RBRACE          reduce using rule 80 (logical_or_expression -> logical_and_expression .)
    ASSIGN_OP       reduce using rule 80 (logical_or_expression -> logical_and_expression .)
    ADD_ASSIGN      reduce using rule 80 (logical_or_expression -> logical_and_expression .)
    MIN_ASSIGN      reduce using rule 80 (logical_or_expression -> logical_and_expression .)
    MUL_ASSIGN      reduce using rule 80 (logical_or_expression -> logical_and_expression .)
    DIV_ASSIGN      reduce using rule 80 (logical_or_expression -> logical_and_expression .)
    MOD_ASSIGN      reduce using rule 80 (logical_or_expression -> logical_and_expression .)
    MULT_OP         reduce using rule 80 (logical_or_expression -> logical_and_expression .)
    DIV_OP          reduce using rule 80 (logical_or_expression -> logical_and_expression .)
    MOD_OP          reduce using rule 80 (logical_or_expression -> logical_and_expression .)
    ADD_OP          reduce using rule 80 (logical_or_expression -> logical_and_expression .)
    LT              reduce using rule 80 (logical_or_expression -> logical_and_expression .)
    GT              reduce using rule 80 (logical_or_expression -> logical_and_expression .)
    LE              reduce using rule 80 (logical_or_expression -> logical_and_expression .)
    GE              reduce using rule 80 (logical_or_expression -> logical_and_expression .)
    EQ              reduce using rule 80 (logical_or_expression -> logical_and_expression .)
    NEQ             reduce using rule 80 (logical_or_expression -> logical_and_expression .)
    OR              shift and go to state 62
    AND             shift and go to state 61

  ! OR              [ reduce using rule 80 (logical_or_expression -> logical_and_expression .) ]
  ! AND             [ reduce using rule 80 (logical_or_expression -> logical_and_expression .) ]


state 22

    (87) relational_expression -> add_expression .
    (93) add_expression -> add_expression . ADD_OP mult_expression
    (94) add_expression -> add_expression . SUB_OP mult_expression

  ! shift/reduce conflict for ADD_OP resolved as shift
  ! shift/reduce conflict for SUB_OP resolved as shift
    LT              reduce using rule 87 (relational_expression -> add_expression .)
    GT              reduce using rule 87 (relational_expression -> add_expression .)
    LE              reduce using rule 87 (relational_expression -> add_expression .)
    GE              reduce using rule 87 (relational_expression -> add_expression .)
    EQ              reduce using rule 87 (relational_expression -> add_expression .)
    NEQ             reduce using rule 87 (relational_expression -> add_expression .)
    OR              reduce using rule 87 (relational_expression -> add_expression .)
    AND             reduce using rule 87 (relational_expression -> add_expression .)
    COND_OP         reduce using rule 87 (relational_expression -> add_expression .)
    RPAREN          reduce using rule 87 (relational_expression -> add_expression .)
    COMMA           reduce using rule 87 (relational_expression -> add_expression .)
    SEMI            reduce using rule 87 (relational_expression -> add_expression .)
    INC             reduce using rule 87 (relational_expression -> add_expression .)
    DEC             reduce using rule 87 (relational_expression -> add_expression .)
    NOT             reduce using rule 87 (relational_expression -> add_expression .)
    LPAREN          reduce using rule 87 (relational_expression -> add_expression .)
    FLOAT_ID        reduce using rule 87 (relational_expression -> add_expression .)
    INT_ID          reduce using rule 87 (relational_expression -> add_expression .)
    CHAR_ID         reduce using rule 87 (relational_expression -> add_expression .)
    STR_ID          reduce using rule 87 (relational_expression -> add_expression .)
    FLOAT_LIT       reduce using rule 87 (relational_expression -> add_expression .)
    INT_LIT         reduce using rule 87 (relational_expression -> add_expression .)
    CHAR_LIT        reduce using rule 87 (relational_expression -> add_expression .)
    STR_LIT         reduce using rule 87 (relational_expression -> add_expression .)
    MAIN            reduce using rule 87 (relational_expression -> add_expression .)
    COLON           reduce using rule 87 (relational_expression -> add_expression .)
    ASSIGN_OP       reduce using rule 87 (relational_expression -> add_expression .)
    ADD_ASSIGN      reduce using rule 87 (relational_expression -> add_expression .)
    MIN_ASSIGN      reduce using rule 87 (relational_expression -> add_expression .)
    MUL_ASSIGN      reduce using rule 87 (relational_expression -> add_expression .)
    DIV_ASSIGN      reduce using rule 87 (relational_expression -> add_expression .)
    MOD_ASSIGN      reduce using rule 87 (relational_expression -> add_expression .)
    MULT_OP         reduce using rule 87 (relational_expression -> add_expression .)
    DIV_OP          reduce using rule 87 (relational_expression -> add_expression .)
    MOD_OP          reduce using rule 87 (relational_expression -> add_expression .)
    RBRACKET        reduce using rule 87 (relational_expression -> add_expression .)
    RBRACE          reduce using rule 87 (relational_expression -> add_expression .)
    ADD_OP          shift and go to state 64
    SUB_OP          shift and go to state 63

  ! SUB_OP          [ reduce using rule 87 (relational_expression -> add_expression .) ]
  ! ADD_OP          [ reduce using rule 87 (relational_expression -> add_expression .) ]


state 23

    (82) logical_and_expression -> equality_expression .
    (85) equality_expression -> equality_expression . EQ relational_expression
    (86) equality_expression -> equality_expression . NEQ relational_expression

  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
    OR              reduce using rule 82 (logical_and_expression -> equality_expression .)
    AND             reduce using rule 82 (logical_and_expression -> equality_expression .)
    COND_OP         reduce using rule 82 (logical_and_expression -> equality_expression .)
    SEMI            reduce using rule 82 (logical_and_expression -> equality_expression .)
    COMMA           reduce using rule 82 (logical_and_expression -> equality_expression .)
    COLON           reduce using rule 82 (logical_and_expression -> equality_expression .)
    RPAREN          reduce using rule 82 (logical_and_expression -> equality_expression .)
    INC             reduce using rule 82 (logical_and_expression -> equality_expression .)
    DEC             reduce using rule 82 (logical_and_expression -> equality_expression .)
    SUB_OP          reduce using rule 82 (logical_and_expression -> equality_expression .)
    NOT             reduce using rule 82 (logical_and_expression -> equality_expression .)
    LPAREN          reduce using rule 82 (logical_and_expression -> equality_expression .)
    FLOAT_ID        reduce using rule 82 (logical_and_expression -> equality_expression .)
    INT_ID          reduce using rule 82 (logical_and_expression -> equality_expression .)
    CHAR_ID         reduce using rule 82 (logical_and_expression -> equality_expression .)
    STR_ID          reduce using rule 82 (logical_and_expression -> equality_expression .)
    FLOAT_LIT       reduce using rule 82 (logical_and_expression -> equality_expression .)
    INT_LIT         reduce using rule 82 (logical_and_expression -> equality_expression .)
    CHAR_LIT        reduce using rule 82 (logical_and_expression -> equality_expression .)
    STR_LIT         reduce using rule 82 (logical_and_expression -> equality_expression .)
    MAIN            reduce using rule 82 (logical_and_expression -> equality_expression .)
    ASSIGN_OP       reduce using rule 82 (logical_and_expression -> equality_expression .)
    ADD_ASSIGN      reduce using rule 82 (logical_and_expression -> equality_expression .)
    MIN_ASSIGN      reduce using rule 82 (logical_and_expression -> equality_expression .)
    MUL_ASSIGN      reduce using rule 82 (logical_and_expression -> equality_expression .)
    DIV_ASSIGN      reduce using rule 82 (logical_and_expression -> equality_expression .)
    MOD_ASSIGN      reduce using rule 82 (logical_and_expression -> equality_expression .)
    MULT_OP         reduce using rule 82 (logical_and_expression -> equality_expression .)
    DIV_OP          reduce using rule 82 (logical_and_expression -> equality_expression .)
    MOD_OP          reduce using rule 82 (logical_and_expression -> equality_expression .)
    ADD_OP          reduce using rule 82 (logical_and_expression -> equality_expression .)
    LT              reduce using rule 82 (logical_and_expression -> equality_expression .)
    GT              reduce using rule 82 (logical_and_expression -> equality_expression .)
    LE              reduce using rule 82 (logical_and_expression -> equality_expression .)
    GE              reduce using rule 82 (logical_and_expression -> equality_expression .)
    RBRACKET        reduce using rule 82 (logical_and_expression -> equality_expression .)
    RBRACE          reduce using rule 82 (logical_and_expression -> equality_expression .)
    EQ              shift and go to state 65
    NEQ             shift and go to state 66

  ! EQ              [ reduce using rule 82 (logical_and_expression -> equality_expression .) ]
  ! NEQ             [ reduce using rule 82 (logical_and_expression -> equality_expression .) ]


state 24

    (1) start -> pre_main . main post_main
    (5) main -> . MAIN LPAREN empty RPAREN compound_statement

    MAIN            shift and go to state 67

    main                           shift and go to state 68

state 25

    (116) identifier -> INT_ID .

    COLON           reduce using rule 116 (identifier -> INT_ID .)
    LBRACKET        reduce using rule 116 (identifier -> INT_ID .)
    LPAREN          reduce using rule 116 (identifier -> INT_ID .)
    INC             reduce using rule 116 (identifier -> INT_ID .)
    DEC             reduce using rule 116 (identifier -> INT_ID .)
    ASSIGN_OP       reduce using rule 116 (identifier -> INT_ID .)
    ADD_ASSIGN      reduce using rule 116 (identifier -> INT_ID .)
    MIN_ASSIGN      reduce using rule 116 (identifier -> INT_ID .)
    MUL_ASSIGN      reduce using rule 116 (identifier -> INT_ID .)
    DIV_ASSIGN      reduce using rule 116 (identifier -> INT_ID .)
    MOD_ASSIGN      reduce using rule 116 (identifier -> INT_ID .)
    MULT_OP         reduce using rule 116 (identifier -> INT_ID .)
    DIV_OP          reduce using rule 116 (identifier -> INT_ID .)
    MOD_OP          reduce using rule 116 (identifier -> INT_ID .)
    ADD_OP          reduce using rule 116 (identifier -> INT_ID .)
    SUB_OP          reduce using rule 116 (identifier -> INT_ID .)
    LT              reduce using rule 116 (identifier -> INT_ID .)
    GT              reduce using rule 116 (identifier -> INT_ID .)
    LE              reduce using rule 116 (identifier -> INT_ID .)
    GE              reduce using rule 116 (identifier -> INT_ID .)
    EQ              reduce using rule 116 (identifier -> INT_ID .)
    NEQ             reduce using rule 116 (identifier -> INT_ID .)
    OR              reduce using rule 116 (identifier -> INT_ID .)
    AND             reduce using rule 116 (identifier -> INT_ID .)
    COND_OP         reduce using rule 116 (identifier -> INT_ID .)
    COMMA           reduce using rule 116 (identifier -> INT_ID .)
    SEMI            reduce using rule 116 (identifier -> INT_ID .)
    NOT             reduce using rule 116 (identifier -> INT_ID .)
    FLOAT_ID        reduce using rule 116 (identifier -> INT_ID .)
    INT_ID          reduce using rule 116 (identifier -> INT_ID .)
    CHAR_ID         reduce using rule 116 (identifier -> INT_ID .)
    STR_ID          reduce using rule 116 (identifier -> INT_ID .)
    FLOAT_LIT       reduce using rule 116 (identifier -> INT_ID .)
    INT_LIT         reduce using rule 116 (identifier -> INT_ID .)
    CHAR_LIT        reduce using rule 116 (identifier -> INT_ID .)
    STR_LIT         reduce using rule 116 (identifier -> INT_ID .)
    MAIN            reduce using rule 116 (identifier -> INT_ID .)
    RPAREN          reduce using rule 116 (identifier -> INT_ID .)
    RBRACKET        reduce using rule 116 (identifier -> INT_ID .)
    RBRACE          reduce using rule 116 (identifier -> INT_ID .)


state 26

    (3) pre_main -> fxn_var_statement . pre_main
    (2) pre_main -> . assignment_expression pre_main
    (3) pre_main -> . fxn_var_statement pre_main
    (4) pre_main -> . empty
    (67) assignment_expression -> . conditional_expression
    (68) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (8) fxn_var_statement -> . fxn_prot
    (9) fxn_var_statement -> . fxn_definition
    (123) empty -> .
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression COND_OP expression COLON conditional_expression
    (99) unary_expression -> . postfix_expression
    (100) unary_expression -> . INC unary_expression
    (101) unary_expression -> . DEC unary_expression
    (102) unary_expression -> . SUB_OP add_expression
    (103) unary_expression -> . NOT logical_or_expression
    (25) fxn_prot -> . fxn_declaration SEMI
    (26) fxn_definition -> . fxn_declaration compound_statement
    (80) logical_or_expression -> . logical_and_expression
    (81) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (104) postfix_expression -> . primary_expression
    (105) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (106) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (107) postfix_expression -> . postfix_expression LPAREN RPAREN
    (108) postfix_expression -> . postfix_expression INC
    (109) postfix_expression -> . postfix_expression DEC
    (27) fxn_declaration -> . identifier LPAREN fxn_prot_args RPAREN
    (28) fxn_declaration -> . identifier LPAREN empty RPAREN
    (82) logical_and_expression -> . equality_expression
    (83) logical_and_expression -> . logical_and_expression AND equality_expression
    (110) primary_expression -> . identifier
    (111) primary_expression -> . constant
    (112) primary_expression -> . LPAREN expression RPAREN
    (115) identifier -> . FLOAT_ID
    (116) identifier -> . INT_ID
    (117) identifier -> . CHAR_ID
    (118) identifier -> . STR_ID
    (84) equality_expression -> . relational_expression
    (85) equality_expression -> . equality_expression EQ relational_expression
    (86) equality_expression -> . equality_expression NEQ relational_expression
    (119) constant -> . FLOAT_LIT
    (120) constant -> . INT_LIT
    (121) constant -> . CHAR_LIT
    (122) constant -> . STR_LIT
    (87) relational_expression -> . add_expression
    (88) relational_expression -> . relational_expression LT add_expression
    (89) relational_expression -> . relational_expression GT add_expression
    (90) relational_expression -> . relational_expression LE add_expression
    (91) relational_expression -> . relational_expression GE add_expression
    (92) add_expression -> . mult_expression
    (93) add_expression -> . add_expression ADD_OP mult_expression
    (94) add_expression -> . add_expression SUB_OP mult_expression
    (95) mult_expression -> . unary_expression
    (96) mult_expression -> . mult_expression MULT_OP unary_expression
    (97) mult_expression -> . mult_expression DIV_OP unary_expression
    (98) mult_expression -> . mult_expression MOD_OP unary_expression

    MAIN            reduce using rule 123 (empty -> .)
    INC             shift and go to state 33
    DEC             shift and go to state 3
    SUB_OP          shift and go to state 28
    NOT             shift and go to state 31
    LPAREN          shift and go to state 20
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 25
    CHAR_ID         shift and go to state 7
    STR_ID          shift and go to state 13
    FLOAT_LIT       shift and go to state 27
    INT_LIT         shift and go to state 29
    CHAR_LIT        shift and go to state 6
    STR_LIT         shift and go to state 4

    constant                       shift and go to state 1
    unary_expression               shift and go to state 2
    fxn_var_statement              shift and go to state 26
    fxn_declaration                shift and go to state 8
    postfix_expression             shift and go to state 9
    relational_expression          shift and go to state 11
    fxn_definition                 shift and go to state 12
    fxn_prot                       shift and go to state 14
    logical_or_expression          shift and go to state 15
    empty                          shift and go to state 16
    assignment_expression          shift and go to state 17
    primary_expression             shift and go to state 19
    logical_and_expression         shift and go to state 21
    add_expression                 shift and go to state 22
    equality_expression            shift and go to state 23
    pre_main                       shift and go to state 69
    conditional_expression         shift and go to state 30
    mult_expression                shift and go to state 18
    identifier                     shift and go to state 32

state 27

    (119) constant -> FLOAT_LIT .

    LBRACKET        reduce using rule 119 (constant -> FLOAT_LIT .)
    LPAREN          reduce using rule 119 (constant -> FLOAT_LIT .)
    INC             reduce using rule 119 (constant -> FLOAT_LIT .)
    DEC             reduce using rule 119 (constant -> FLOAT_LIT .)
    ASSIGN_OP       reduce using rule 119 (constant -> FLOAT_LIT .)
    ADD_ASSIGN      reduce using rule 119 (constant -> FLOAT_LIT .)
    MIN_ASSIGN      reduce using rule 119 (constant -> FLOAT_LIT .)
    MUL_ASSIGN      reduce using rule 119 (constant -> FLOAT_LIT .)
    DIV_ASSIGN      reduce using rule 119 (constant -> FLOAT_LIT .)
    MOD_ASSIGN      reduce using rule 119 (constant -> FLOAT_LIT .)
    MULT_OP         reduce using rule 119 (constant -> FLOAT_LIT .)
    DIV_OP          reduce using rule 119 (constant -> FLOAT_LIT .)
    MOD_OP          reduce using rule 119 (constant -> FLOAT_LIT .)
    ADD_OP          reduce using rule 119 (constant -> FLOAT_LIT .)
    SUB_OP          reduce using rule 119 (constant -> FLOAT_LIT .)
    LT              reduce using rule 119 (constant -> FLOAT_LIT .)
    GT              reduce using rule 119 (constant -> FLOAT_LIT .)
    LE              reduce using rule 119 (constant -> FLOAT_LIT .)
    GE              reduce using rule 119 (constant -> FLOAT_LIT .)
    EQ              reduce using rule 119 (constant -> FLOAT_LIT .)
    NEQ             reduce using rule 119 (constant -> FLOAT_LIT .)
    OR              reduce using rule 119 (constant -> FLOAT_LIT .)
    AND             reduce using rule 119 (constant -> FLOAT_LIT .)
    COND_OP         reduce using rule 119 (constant -> FLOAT_LIT .)
    COMMA           reduce using rule 119 (constant -> FLOAT_LIT .)
    SEMI            reduce using rule 119 (constant -> FLOAT_LIT .)
    RPAREN          reduce using rule 119 (constant -> FLOAT_LIT .)
    NOT             reduce using rule 119 (constant -> FLOAT_LIT .)
    FLOAT_ID        reduce using rule 119 (constant -> FLOAT_LIT .)
    INT_ID          reduce using rule 119 (constant -> FLOAT_LIT .)
    CHAR_ID         reduce using rule 119 (constant -> FLOAT_LIT .)
    STR_ID          reduce using rule 119 (constant -> FLOAT_LIT .)
    FLOAT_LIT       reduce using rule 119 (constant -> FLOAT_LIT .)
    INT_LIT         reduce using rule 119 (constant -> FLOAT_LIT .)
    CHAR_LIT        reduce using rule 119 (constant -> FLOAT_LIT .)
    STR_LIT         reduce using rule 119 (constant -> FLOAT_LIT .)
    MAIN            reduce using rule 119 (constant -> FLOAT_LIT .)
    RBRACKET        reduce using rule 119 (constant -> FLOAT_LIT .)
    COLON           reduce using rule 119 (constant -> FLOAT_LIT .)
    RBRACE          reduce using rule 119 (constant -> FLOAT_LIT .)


state 28

    (102) unary_expression -> SUB_OP . add_expression
    (92) add_expression -> . mult_expression
    (93) add_expression -> . add_expression ADD_OP mult_expression
    (94) add_expression -> . add_expression SUB_OP mult_expression
    (95) mult_expression -> . unary_expression
    (96) mult_expression -> . mult_expression MULT_OP unary_expression
    (97) mult_expression -> . mult_expression DIV_OP unary_expression
    (98) mult_expression -> . mult_expression MOD_OP unary_expression
    (99) unary_expression -> . postfix_expression
    (100) unary_expression -> . INC unary_expression
    (101) unary_expression -> . DEC unary_expression
    (102) unary_expression -> . SUB_OP add_expression
    (103) unary_expression -> . NOT logical_or_expression
    (104) postfix_expression -> . primary_expression
    (105) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (106) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (107) postfix_expression -> . postfix_expression LPAREN RPAREN
    (108) postfix_expression -> . postfix_expression INC
    (109) postfix_expression -> . postfix_expression DEC
    (110) primary_expression -> . identifier
    (111) primary_expression -> . constant
    (112) primary_expression -> . LPAREN expression RPAREN
    (115) identifier -> . FLOAT_ID
    (116) identifier -> . INT_ID
    (117) identifier -> . CHAR_ID
    (118) identifier -> . STR_ID
    (119) constant -> . FLOAT_LIT
    (120) constant -> . INT_LIT
    (121) constant -> . CHAR_LIT
    (122) constant -> . STR_LIT

    INC             shift and go to state 33
    DEC             shift and go to state 3
    SUB_OP          shift and go to state 28
    NOT             shift and go to state 31
    LPAREN          shift and go to state 20
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 25
    CHAR_ID         shift and go to state 7
    STR_ID          shift and go to state 13
    FLOAT_LIT       shift and go to state 27
    INT_LIT         shift and go to state 29
    CHAR_LIT        shift and go to state 6
    STR_LIT         shift and go to state 4

    constant                       shift and go to state 1
    unary_expression               shift and go to state 70
    postfix_expression             shift and go to state 9
    primary_expression             shift and go to state 19
    mult_expression                shift and go to state 18
    identifier                     shift and go to state 42
    add_expression                 shift and go to state 71

state 29

    (120) constant -> INT_LIT .

    LBRACKET        reduce using rule 120 (constant -> INT_LIT .)
    LPAREN          reduce using rule 120 (constant -> INT_LIT .)
    INC             reduce using rule 120 (constant -> INT_LIT .)
    DEC             reduce using rule 120 (constant -> INT_LIT .)
    ASSIGN_OP       reduce using rule 120 (constant -> INT_LIT .)
    ADD_ASSIGN      reduce using rule 120 (constant -> INT_LIT .)
    MIN_ASSIGN      reduce using rule 120 (constant -> INT_LIT .)
    MUL_ASSIGN      reduce using rule 120 (constant -> INT_LIT .)
    DIV_ASSIGN      reduce using rule 120 (constant -> INT_LIT .)
    MOD_ASSIGN      reduce using rule 120 (constant -> INT_LIT .)
    MULT_OP         reduce using rule 120 (constant -> INT_LIT .)
    DIV_OP          reduce using rule 120 (constant -> INT_LIT .)
    MOD_OP          reduce using rule 120 (constant -> INT_LIT .)
    ADD_OP          reduce using rule 120 (constant -> INT_LIT .)
    SUB_OP          reduce using rule 120 (constant -> INT_LIT .)
    LT              reduce using rule 120 (constant -> INT_LIT .)
    GT              reduce using rule 120 (constant -> INT_LIT .)
    LE              reduce using rule 120 (constant -> INT_LIT .)
    GE              reduce using rule 120 (constant -> INT_LIT .)
    EQ              reduce using rule 120 (constant -> INT_LIT .)
    NEQ             reduce using rule 120 (constant -> INT_LIT .)
    OR              reduce using rule 120 (constant -> INT_LIT .)
    AND             reduce using rule 120 (constant -> INT_LIT .)
    COND_OP         reduce using rule 120 (constant -> INT_LIT .)
    COMMA           reduce using rule 120 (constant -> INT_LIT .)
    SEMI            reduce using rule 120 (constant -> INT_LIT .)
    RPAREN          reduce using rule 120 (constant -> INT_LIT .)
    NOT             reduce using rule 120 (constant -> INT_LIT .)
    FLOAT_ID        reduce using rule 120 (constant -> INT_LIT .)
    INT_ID          reduce using rule 120 (constant -> INT_LIT .)
    CHAR_ID         reduce using rule 120 (constant -> INT_LIT .)
    STR_ID          reduce using rule 120 (constant -> INT_LIT .)
    FLOAT_LIT       reduce using rule 120 (constant -> INT_LIT .)
    INT_LIT         reduce using rule 120 (constant -> INT_LIT .)
    CHAR_LIT        reduce using rule 120 (constant -> INT_LIT .)
    STR_LIT         reduce using rule 120 (constant -> INT_LIT .)
    MAIN            reduce using rule 120 (constant -> INT_LIT .)
    RBRACKET        reduce using rule 120 (constant -> INT_LIT .)
    COLON           reduce using rule 120 (constant -> INT_LIT .)
    RBRACE          reduce using rule 120 (constant -> INT_LIT .)


state 30

    (67) assignment_expression -> conditional_expression .

    RPAREN          reduce using rule 67 (assignment_expression -> conditional_expression .)
    COMMA           reduce using rule 67 (assignment_expression -> conditional_expression .)
    INC             reduce using rule 67 (assignment_expression -> conditional_expression .)
    DEC             reduce using rule 67 (assignment_expression -> conditional_expression .)
    SUB_OP          reduce using rule 67 (assignment_expression -> conditional_expression .)
    NOT             reduce using rule 67 (assignment_expression -> conditional_expression .)
    LPAREN          reduce using rule 67 (assignment_expression -> conditional_expression .)
    FLOAT_ID        reduce using rule 67 (assignment_expression -> conditional_expression .)
    INT_ID          reduce using rule 67 (assignment_expression -> conditional_expression .)
    CHAR_ID         reduce using rule 67 (assignment_expression -> conditional_expression .)
    STR_ID          reduce using rule 67 (assignment_expression -> conditional_expression .)
    FLOAT_LIT       reduce using rule 67 (assignment_expression -> conditional_expression .)
    INT_LIT         reduce using rule 67 (assignment_expression -> conditional_expression .)
    CHAR_LIT        reduce using rule 67 (assignment_expression -> conditional_expression .)
    STR_LIT         reduce using rule 67 (assignment_expression -> conditional_expression .)
    MAIN            reduce using rule 67 (assignment_expression -> conditional_expression .)
    SEMI            reduce using rule 67 (assignment_expression -> conditional_expression .)
    RBRACKET        reduce using rule 67 (assignment_expression -> conditional_expression .)
    COLON           reduce using rule 67 (assignment_expression -> conditional_expression .)
    RBRACE          reduce using rule 67 (assignment_expression -> conditional_expression .)


state 31

    (103) unary_expression -> NOT . logical_or_expression
    (80) logical_or_expression -> . logical_and_expression
    (81) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (82) logical_and_expression -> . equality_expression
    (83) logical_and_expression -> . logical_and_expression AND equality_expression
    (84) equality_expression -> . relational_expression
    (85) equality_expression -> . equality_expression EQ relational_expression
    (86) equality_expression -> . equality_expression NEQ relational_expression
    (87) relational_expression -> . add_expression
    (88) relational_expression -> . relational_expression LT add_expression
    (89) relational_expression -> . relational_expression GT add_expression
    (90) relational_expression -> . relational_expression LE add_expression
    (91) relational_expression -> . relational_expression GE add_expression
    (92) add_expression -> . mult_expression
    (93) add_expression -> . add_expression ADD_OP mult_expression
    (94) add_expression -> . add_expression SUB_OP mult_expression
    (95) mult_expression -> . unary_expression
    (96) mult_expression -> . mult_expression MULT_OP unary_expression
    (97) mult_expression -> . mult_expression DIV_OP unary_expression
    (98) mult_expression -> . mult_expression MOD_OP unary_expression
    (99) unary_expression -> . postfix_expression
    (100) unary_expression -> . INC unary_expression
    (101) unary_expression -> . DEC unary_expression
    (102) unary_expression -> . SUB_OP add_expression
    (103) unary_expression -> . NOT logical_or_expression
    (104) postfix_expression -> . primary_expression
    (105) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (106) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (107) postfix_expression -> . postfix_expression LPAREN RPAREN
    (108) postfix_expression -> . postfix_expression INC
    (109) postfix_expression -> . postfix_expression DEC
    (110) primary_expression -> . identifier
    (111) primary_expression -> . constant
    (112) primary_expression -> . LPAREN expression RPAREN
    (115) identifier -> . FLOAT_ID
    (116) identifier -> . INT_ID
    (117) identifier -> . CHAR_ID
    (118) identifier -> . STR_ID
    (119) constant -> . FLOAT_LIT
    (120) constant -> . INT_LIT
    (121) constant -> . CHAR_LIT
    (122) constant -> . STR_LIT

    INC             shift and go to state 33
    DEC             shift and go to state 3
    SUB_OP          shift and go to state 28
    NOT             shift and go to state 31
    LPAREN          shift and go to state 20
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 25
    CHAR_ID         shift and go to state 7
    STR_ID          shift and go to state 13
    FLOAT_LIT       shift and go to state 27
    INT_LIT         shift and go to state 29
    CHAR_LIT        shift and go to state 6
    STR_LIT         shift and go to state 4

    constant                       shift and go to state 1
    unary_expression               shift and go to state 70
    postfix_expression             shift and go to state 9
    relational_expression          shift and go to state 11
    mult_expression                shift and go to state 18
    logical_and_expression         shift and go to state 21
    identifier                     shift and go to state 42
    add_expression                 shift and go to state 22
    logical_or_expression          shift and go to state 72
    equality_expression            shift and go to state 23
    primary_expression             shift and go to state 19

state 32

    (27) fxn_declaration -> identifier . LPAREN fxn_prot_args RPAREN
    (28) fxn_declaration -> identifier . LPAREN empty RPAREN
    (110) primary_expression -> identifier .

  ! shift/reduce conflict for LPAREN resolved as shift
    LPAREN          shift and go to state 73
    LBRACKET        reduce using rule 110 (primary_expression -> identifier .)
    INC             reduce using rule 110 (primary_expression -> identifier .)
    DEC             reduce using rule 110 (primary_expression -> identifier .)
    ASSIGN_OP       reduce using rule 110 (primary_expression -> identifier .)
    ADD_ASSIGN      reduce using rule 110 (primary_expression -> identifier .)
    MIN_ASSIGN      reduce using rule 110 (primary_expression -> identifier .)
    MUL_ASSIGN      reduce using rule 110 (primary_expression -> identifier .)
    DIV_ASSIGN      reduce using rule 110 (primary_expression -> identifier .)
    MOD_ASSIGN      reduce using rule 110 (primary_expression -> identifier .)
    MULT_OP         reduce using rule 110 (primary_expression -> identifier .)
    DIV_OP          reduce using rule 110 (primary_expression -> identifier .)
    MOD_OP          reduce using rule 110 (primary_expression -> identifier .)
    ADD_OP          reduce using rule 110 (primary_expression -> identifier .)
    SUB_OP          reduce using rule 110 (primary_expression -> identifier .)
    LT              reduce using rule 110 (primary_expression -> identifier .)
    GT              reduce using rule 110 (primary_expression -> identifier .)
    LE              reduce using rule 110 (primary_expression -> identifier .)
    GE              reduce using rule 110 (primary_expression -> identifier .)
    EQ              reduce using rule 110 (primary_expression -> identifier .)
    NEQ             reduce using rule 110 (primary_expression -> identifier .)
    OR              reduce using rule 110 (primary_expression -> identifier .)
    AND             reduce using rule 110 (primary_expression -> identifier .)
    COND_OP         reduce using rule 110 (primary_expression -> identifier .)
    NOT             reduce using rule 110 (primary_expression -> identifier .)
    FLOAT_ID        reduce using rule 110 (primary_expression -> identifier .)
    INT_ID          reduce using rule 110 (primary_expression -> identifier .)
    CHAR_ID         reduce using rule 110 (primary_expression -> identifier .)
    STR_ID          reduce using rule 110 (primary_expression -> identifier .)
    FLOAT_LIT       reduce using rule 110 (primary_expression -> identifier .)
    INT_LIT         reduce using rule 110 (primary_expression -> identifier .)
    CHAR_LIT        reduce using rule 110 (primary_expression -> identifier .)
    STR_LIT         reduce using rule 110 (primary_expression -> identifier .)
    MAIN            reduce using rule 110 (primary_expression -> identifier .)

  ! LPAREN          [ reduce using rule 110 (primary_expression -> identifier .) ]


state 33

    (100) unary_expression -> INC . unary_expression
    (99) unary_expression -> . postfix_expression
    (100) unary_expression -> . INC unary_expression
    (101) unary_expression -> . DEC unary_expression
    (102) unary_expression -> . SUB_OP add_expression
    (103) unary_expression -> . NOT logical_or_expression
    (104) postfix_expression -> . primary_expression
    (105) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (106) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (107) postfix_expression -> . postfix_expression LPAREN RPAREN
    (108) postfix_expression -> . postfix_expression INC
    (109) postfix_expression -> . postfix_expression DEC
    (110) primary_expression -> . identifier
    (111) primary_expression -> . constant
    (112) primary_expression -> . LPAREN expression RPAREN
    (115) identifier -> . FLOAT_ID
    (116) identifier -> . INT_ID
    (117) identifier -> . CHAR_ID
    (118) identifier -> . STR_ID
    (119) constant -> . FLOAT_LIT
    (120) constant -> . INT_LIT
    (121) constant -> . CHAR_LIT
    (122) constant -> . STR_LIT

    INC             shift and go to state 33
    DEC             shift and go to state 3
    SUB_OP          shift and go to state 28
    NOT             shift and go to state 31
    LPAREN          shift and go to state 20
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 25
    CHAR_ID         shift and go to state 7
    STR_ID          shift and go to state 13
    FLOAT_LIT       shift and go to state 27
    INT_LIT         shift and go to state 29
    CHAR_LIT        shift and go to state 6
    STR_LIT         shift and go to state 4

    constant                       shift and go to state 1
    unary_expression               shift and go to state 74
    postfix_expression             shift and go to state 9
    primary_expression             shift and go to state 19
    identifier                     shift and go to state 42

state 34

    (74) assignment_operator -> MOD_ASSIGN .

    INC             reduce using rule 74 (assignment_operator -> MOD_ASSIGN .)
    DEC             reduce using rule 74 (assignment_operator -> MOD_ASSIGN .)
    SUB_OP          reduce using rule 74 (assignment_operator -> MOD_ASSIGN .)
    NOT             reduce using rule 74 (assignment_operator -> MOD_ASSIGN .)
    LPAREN          reduce using rule 74 (assignment_operator -> MOD_ASSIGN .)
    FLOAT_ID        reduce using rule 74 (assignment_operator -> MOD_ASSIGN .)
    INT_ID          reduce using rule 74 (assignment_operator -> MOD_ASSIGN .)
    CHAR_ID         reduce using rule 74 (assignment_operator -> MOD_ASSIGN .)
    STR_ID          reduce using rule 74 (assignment_operator -> MOD_ASSIGN .)
    FLOAT_LIT       reduce using rule 74 (assignment_operator -> MOD_ASSIGN .)
    INT_LIT         reduce using rule 74 (assignment_operator -> MOD_ASSIGN .)
    CHAR_LIT        reduce using rule 74 (assignment_operator -> MOD_ASSIGN .)
    STR_LIT         reduce using rule 74 (assignment_operator -> MOD_ASSIGN .)


state 35

    (72) assignment_operator -> MUL_ASSIGN .

    INC             reduce using rule 72 (assignment_operator -> MUL_ASSIGN .)
    DEC             reduce using rule 72 (assignment_operator -> MUL_ASSIGN .)
    SUB_OP          reduce using rule 72 (assignment_operator -> MUL_ASSIGN .)
    NOT             reduce using rule 72 (assignment_operator -> MUL_ASSIGN .)
    LPAREN          reduce using rule 72 (assignment_operator -> MUL_ASSIGN .)
    FLOAT_ID        reduce using rule 72 (assignment_operator -> MUL_ASSIGN .)
    INT_ID          reduce using rule 72 (assignment_operator -> MUL_ASSIGN .)
    CHAR_ID         reduce using rule 72 (assignment_operator -> MUL_ASSIGN .)
    STR_ID          reduce using rule 72 (assignment_operator -> MUL_ASSIGN .)
    FLOAT_LIT       reduce using rule 72 (assignment_operator -> MUL_ASSIGN .)
    INT_LIT         reduce using rule 72 (assignment_operator -> MUL_ASSIGN .)
    CHAR_LIT        reduce using rule 72 (assignment_operator -> MUL_ASSIGN .)
    STR_LIT         reduce using rule 72 (assignment_operator -> MUL_ASSIGN .)


state 36

    (68) assignment_expression -> unary_expression assignment_operator . assignment_expression
    (67) assignment_expression -> . conditional_expression
    (68) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression COND_OP expression COLON conditional_expression
    (99) unary_expression -> . postfix_expression
    (100) unary_expression -> . INC unary_expression
    (101) unary_expression -> . DEC unary_expression
    (102) unary_expression -> . SUB_OP add_expression
    (103) unary_expression -> . NOT logical_or_expression
    (80) logical_or_expression -> . logical_and_expression
    (81) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (104) postfix_expression -> . primary_expression
    (105) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (106) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (107) postfix_expression -> . postfix_expression LPAREN RPAREN
    (108) postfix_expression -> . postfix_expression INC
    (109) postfix_expression -> . postfix_expression DEC
    (82) logical_and_expression -> . equality_expression
    (83) logical_and_expression -> . logical_and_expression AND equality_expression
    (110) primary_expression -> . identifier
    (111) primary_expression -> . constant
    (112) primary_expression -> . LPAREN expression RPAREN
    (84) equality_expression -> . relational_expression
    (85) equality_expression -> . equality_expression EQ relational_expression
    (86) equality_expression -> . equality_expression NEQ relational_expression
    (115) identifier -> . FLOAT_ID
    (116) identifier -> . INT_ID
    (117) identifier -> . CHAR_ID
    (118) identifier -> . STR_ID
    (119) constant -> . FLOAT_LIT
    (120) constant -> . INT_LIT
    (121) constant -> . CHAR_LIT
    (122) constant -> . STR_LIT
    (87) relational_expression -> . add_expression
    (88) relational_expression -> . relational_expression LT add_expression
    (89) relational_expression -> . relational_expression GT add_expression
    (90) relational_expression -> . relational_expression LE add_expression
    (91) relational_expression -> . relational_expression GE add_expression
    (92) add_expression -> . mult_expression
    (93) add_expression -> . add_expression ADD_OP mult_expression
    (94) add_expression -> . add_expression SUB_OP mult_expression
    (95) mult_expression -> . unary_expression
    (96) mult_expression -> . mult_expression MULT_OP unary_expression
    (97) mult_expression -> . mult_expression DIV_OP unary_expression
    (98) mult_expression -> . mult_expression MOD_OP unary_expression

    INC             shift and go to state 33
    DEC             shift and go to state 3
    SUB_OP          shift and go to state 28
    NOT             shift and go to state 31
    LPAREN          shift and go to state 20
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 25
    CHAR_ID         shift and go to state 7
    STR_ID          shift and go to state 13
    FLOAT_LIT       shift and go to state 27
    INT_LIT         shift and go to state 29
    CHAR_LIT        shift and go to state 6
    STR_LIT         shift and go to state 4

    constant                       shift and go to state 1
    assignment_expression          shift and go to state 75
    unary_expression               shift and go to state 2
    relational_expression          shift and go to state 11
    add_expression                 shift and go to state 22
    postfix_expression             shift and go to state 9
    conditional_expression         shift and go to state 30
    mult_expression                shift and go to state 18
    logical_and_expression         shift and go to state 21
    identifier                     shift and go to state 42
    logical_or_expression          shift and go to state 15
    equality_expression            shift and go to state 23
    primary_expression             shift and go to state 19

state 37

    (69) assignment_operator -> ASSIGN_OP .

    INC             reduce using rule 69 (assignment_operator -> ASSIGN_OP .)
    DEC             reduce using rule 69 (assignment_operator -> ASSIGN_OP .)
    SUB_OP          reduce using rule 69 (assignment_operator -> ASSIGN_OP .)
    NOT             reduce using rule 69 (assignment_operator -> ASSIGN_OP .)
    LPAREN          reduce using rule 69 (assignment_operator -> ASSIGN_OP .)
    FLOAT_ID        reduce using rule 69 (assignment_operator -> ASSIGN_OP .)
    INT_ID          reduce using rule 69 (assignment_operator -> ASSIGN_OP .)
    CHAR_ID         reduce using rule 69 (assignment_operator -> ASSIGN_OP .)
    STR_ID          reduce using rule 69 (assignment_operator -> ASSIGN_OP .)
    FLOAT_LIT       reduce using rule 69 (assignment_operator -> ASSIGN_OP .)
    INT_LIT         reduce using rule 69 (assignment_operator -> ASSIGN_OP .)
    CHAR_LIT        reduce using rule 69 (assignment_operator -> ASSIGN_OP .)
    STR_LIT         reduce using rule 69 (assignment_operator -> ASSIGN_OP .)


state 38

    (71) assignment_operator -> MIN_ASSIGN .

    INC             reduce using rule 71 (assignment_operator -> MIN_ASSIGN .)
    DEC             reduce using rule 71 (assignment_operator -> MIN_ASSIGN .)
    SUB_OP          reduce using rule 71 (assignment_operator -> MIN_ASSIGN .)
    NOT             reduce using rule 71 (assignment_operator -> MIN_ASSIGN .)
    LPAREN          reduce using rule 71 (assignment_operator -> MIN_ASSIGN .)
    FLOAT_ID        reduce using rule 71 (assignment_operator -> MIN_ASSIGN .)
    INT_ID          reduce using rule 71 (assignment_operator -> MIN_ASSIGN .)
    CHAR_ID         reduce using rule 71 (assignment_operator -> MIN_ASSIGN .)
    STR_ID          reduce using rule 71 (assignment_operator -> MIN_ASSIGN .)
    FLOAT_LIT       reduce using rule 71 (assignment_operator -> MIN_ASSIGN .)
    INT_LIT         reduce using rule 71 (assignment_operator -> MIN_ASSIGN .)
    CHAR_LIT        reduce using rule 71 (assignment_operator -> MIN_ASSIGN .)
    STR_LIT         reduce using rule 71 (assignment_operator -> MIN_ASSIGN .)


state 39

    (70) assignment_operator -> ADD_ASSIGN .

    INC             reduce using rule 70 (assignment_operator -> ADD_ASSIGN .)
    DEC             reduce using rule 70 (assignment_operator -> ADD_ASSIGN .)
    SUB_OP          reduce using rule 70 (assignment_operator -> ADD_ASSIGN .)
    NOT             reduce using rule 70 (assignment_operator -> ADD_ASSIGN .)
    LPAREN          reduce using rule 70 (assignment_operator -> ADD_ASSIGN .)
    FLOAT_ID        reduce using rule 70 (assignment_operator -> ADD_ASSIGN .)
    INT_ID          reduce using rule 70 (assignment_operator -> ADD_ASSIGN .)
    CHAR_ID         reduce using rule 70 (assignment_operator -> ADD_ASSIGN .)
    STR_ID          reduce using rule 70 (assignment_operator -> ADD_ASSIGN .)
    FLOAT_LIT       reduce using rule 70 (assignment_operator -> ADD_ASSIGN .)
    INT_LIT         reduce using rule 70 (assignment_operator -> ADD_ASSIGN .)
    CHAR_LIT        reduce using rule 70 (assignment_operator -> ADD_ASSIGN .)
    STR_LIT         reduce using rule 70 (assignment_operator -> ADD_ASSIGN .)


state 40

    (73) assignment_operator -> DIV_ASSIGN .

    INC             reduce using rule 73 (assignment_operator -> DIV_ASSIGN .)
    DEC             reduce using rule 73 (assignment_operator -> DIV_ASSIGN .)
    SUB_OP          reduce using rule 73 (assignment_operator -> DIV_ASSIGN .)
    NOT             reduce using rule 73 (assignment_operator -> DIV_ASSIGN .)
    LPAREN          reduce using rule 73 (assignment_operator -> DIV_ASSIGN .)
    FLOAT_ID        reduce using rule 73 (assignment_operator -> DIV_ASSIGN .)
    INT_ID          reduce using rule 73 (assignment_operator -> DIV_ASSIGN .)
    CHAR_ID         reduce using rule 73 (assignment_operator -> DIV_ASSIGN .)
    STR_ID          reduce using rule 73 (assignment_operator -> DIV_ASSIGN .)
    FLOAT_LIT       reduce using rule 73 (assignment_operator -> DIV_ASSIGN .)
    INT_LIT         reduce using rule 73 (assignment_operator -> DIV_ASSIGN .)
    CHAR_LIT        reduce using rule 73 (assignment_operator -> DIV_ASSIGN .)
    STR_LIT         reduce using rule 73 (assignment_operator -> DIV_ASSIGN .)


state 41

    (101) unary_expression -> DEC unary_expression .

    ASSIGN_OP       reduce using rule 101 (unary_expression -> DEC unary_expression .)
    ADD_ASSIGN      reduce using rule 101 (unary_expression -> DEC unary_expression .)
    MIN_ASSIGN      reduce using rule 101 (unary_expression -> DEC unary_expression .)
    MUL_ASSIGN      reduce using rule 101 (unary_expression -> DEC unary_expression .)
    DIV_ASSIGN      reduce using rule 101 (unary_expression -> DEC unary_expression .)
    MOD_ASSIGN      reduce using rule 101 (unary_expression -> DEC unary_expression .)
    MULT_OP         reduce using rule 101 (unary_expression -> DEC unary_expression .)
    DIV_OP          reduce using rule 101 (unary_expression -> DEC unary_expression .)
    MOD_OP          reduce using rule 101 (unary_expression -> DEC unary_expression .)
    ADD_OP          reduce using rule 101 (unary_expression -> DEC unary_expression .)
    SUB_OP          reduce using rule 101 (unary_expression -> DEC unary_expression .)
    LT              reduce using rule 101 (unary_expression -> DEC unary_expression .)
    GT              reduce using rule 101 (unary_expression -> DEC unary_expression .)
    LE              reduce using rule 101 (unary_expression -> DEC unary_expression .)
    GE              reduce using rule 101 (unary_expression -> DEC unary_expression .)
    EQ              reduce using rule 101 (unary_expression -> DEC unary_expression .)
    NEQ             reduce using rule 101 (unary_expression -> DEC unary_expression .)
    OR              reduce using rule 101 (unary_expression -> DEC unary_expression .)
    AND             reduce using rule 101 (unary_expression -> DEC unary_expression .)
    COND_OP         reduce using rule 101 (unary_expression -> DEC unary_expression .)
    INC             reduce using rule 101 (unary_expression -> DEC unary_expression .)
    DEC             reduce using rule 101 (unary_expression -> DEC unary_expression .)
    NOT             reduce using rule 101 (unary_expression -> DEC unary_expression .)
    LPAREN          reduce using rule 101 (unary_expression -> DEC unary_expression .)
    FLOAT_ID        reduce using rule 101 (unary_expression -> DEC unary_expression .)
    INT_ID          reduce using rule 101 (unary_expression -> DEC unary_expression .)
    CHAR_ID         reduce using rule 101 (unary_expression -> DEC unary_expression .)
    STR_ID          reduce using rule 101 (unary_expression -> DEC unary_expression .)
    FLOAT_LIT       reduce using rule 101 (unary_expression -> DEC unary_expression .)
    INT_LIT         reduce using rule 101 (unary_expression -> DEC unary_expression .)
    CHAR_LIT        reduce using rule 101 (unary_expression -> DEC unary_expression .)
    STR_LIT         reduce using rule 101 (unary_expression -> DEC unary_expression .)
    MAIN            reduce using rule 101 (unary_expression -> DEC unary_expression .)
    RPAREN          reduce using rule 101 (unary_expression -> DEC unary_expression .)
    COMMA           reduce using rule 101 (unary_expression -> DEC unary_expression .)
    SEMI            reduce using rule 101 (unary_expression -> DEC unary_expression .)
    RBRACKET        reduce using rule 101 (unary_expression -> DEC unary_expression .)
    COLON           reduce using rule 101 (unary_expression -> DEC unary_expression .)
    RBRACE          reduce using rule 101 (unary_expression -> DEC unary_expression .)


state 42

    (110) primary_expression -> identifier .

    LBRACKET        reduce using rule 110 (primary_expression -> identifier .)
    LPAREN          reduce using rule 110 (primary_expression -> identifier .)
    INC             reduce using rule 110 (primary_expression -> identifier .)
    DEC             reduce using rule 110 (primary_expression -> identifier .)
    MULT_OP         reduce using rule 110 (primary_expression -> identifier .)
    DIV_OP          reduce using rule 110 (primary_expression -> identifier .)
    MOD_OP          reduce using rule 110 (primary_expression -> identifier .)
    ADD_OP          reduce using rule 110 (primary_expression -> identifier .)
    SUB_OP          reduce using rule 110 (primary_expression -> identifier .)
    LT              reduce using rule 110 (primary_expression -> identifier .)
    GT              reduce using rule 110 (primary_expression -> identifier .)
    LE              reduce using rule 110 (primary_expression -> identifier .)
    GE              reduce using rule 110 (primary_expression -> identifier .)
    EQ              reduce using rule 110 (primary_expression -> identifier .)
    NEQ             reduce using rule 110 (primary_expression -> identifier .)
    OR              reduce using rule 110 (primary_expression -> identifier .)
    AND             reduce using rule 110 (primary_expression -> identifier .)
    COND_OP         reduce using rule 110 (primary_expression -> identifier .)
    COLON           reduce using rule 110 (primary_expression -> identifier .)
    ASSIGN_OP       reduce using rule 110 (primary_expression -> identifier .)
    ADD_ASSIGN      reduce using rule 110 (primary_expression -> identifier .)
    MIN_ASSIGN      reduce using rule 110 (primary_expression -> identifier .)
    MUL_ASSIGN      reduce using rule 110 (primary_expression -> identifier .)
    DIV_ASSIGN      reduce using rule 110 (primary_expression -> identifier .)
    MOD_ASSIGN      reduce using rule 110 (primary_expression -> identifier .)
    RPAREN          reduce using rule 110 (primary_expression -> identifier .)
    COMMA           reduce using rule 110 (primary_expression -> identifier .)
    NOT             reduce using rule 110 (primary_expression -> identifier .)
    FLOAT_ID        reduce using rule 110 (primary_expression -> identifier .)
    INT_ID          reduce using rule 110 (primary_expression -> identifier .)
    CHAR_ID         reduce using rule 110 (primary_expression -> identifier .)
    STR_ID          reduce using rule 110 (primary_expression -> identifier .)
    FLOAT_LIT       reduce using rule 110 (primary_expression -> identifier .)
    INT_LIT         reduce using rule 110 (primary_expression -> identifier .)
    CHAR_LIT        reduce using rule 110 (primary_expression -> identifier .)
    STR_LIT         reduce using rule 110 (primary_expression -> identifier .)
    MAIN            reduce using rule 110 (primary_expression -> identifier .)
    SEMI            reduce using rule 110 (primary_expression -> identifier .)
    RBRACKET        reduce using rule 110 (primary_expression -> identifier .)
    RBRACE          reduce using rule 110 (primary_expression -> identifier .)


state 43

    (45) compound_statement -> LBRACE . declaration_list statement_list RBRACE
    (46) compound_statement -> LBRACE . statement_list RBRACE
    (47) compound_statement -> LBRACE . declaration_list RBRACE
    (48) compound_statement -> LBRACE . RBRACE
    (11) declaration_list -> . declaration
    (12) declaration_list -> . declaration_list declaration
    (49) statement_list -> . statement
    (50) statement_list -> . statement_list statement
    (10) declaration -> . init_declarator_list SEMI
    (31) statement -> . labeled_statement
    (32) statement -> . expression_statement
    (33) statement -> . compound_statement
    (34) statement -> . print_statement
    (35) statement -> . scan_statement
    (36) statement -> . selection_statement
    (37) statement -> . iteration_statement
    (38) statement -> . jump_statement
    (13) init_declarator_list -> . init_declarator
    (14) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (41) labeled_statement -> . identifier COLON statement
    (42) labeled_statement -> . CASE constant_expression COLON statement
    (43) labeled_statement -> . DEFAULT COLON statement
    (44) expression_statement -> . expression_opt SEMI
    (45) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (46) compound_statement -> . LBRACE statement_list RBRACE
    (47) compound_statement -> . LBRACE declaration_list RBRACE
    (48) compound_statement -> . LBRACE RBRACE
    (39) print_statement -> . PRINT LPAREN assignment_expression RPAREN
    (40) scan_statement -> . SCAN LPAREN identifier RPAREN
    (51) selection_statement -> . IF LPAREN expression RPAREN statement
    (52) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (53) selection_statement -> . IF LPAREN expression RPAREN statement else_if_statement ELSE statement
    (54) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (57) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (58) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (59) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (60) jump_statement -> . CONTINUE SEMI
    (61) jump_statement -> . BREAK SEMI
    (62) jump_statement -> . RETURN expression_opt SEMI
    (15) init_declarator -> . declarator
    (16) init_declarator -> . declarator ASSIGN_OP initializer
    (115) identifier -> . FLOAT_ID
    (116) identifier -> . INT_ID
    (117) identifier -> . CHAR_ID
    (118) identifier -> . STR_ID
    (63) expression_opt -> . empty
    (64) expression_opt -> . expression
    (17) declarator -> . identifier
    (18) declarator -> . LPAREN declarator RPAREN
    (19) declarator -> . declarator LBRACKET constant_expression_opt RBRACKET
    (123) empty -> .
    (65) expression -> . assignment_expression
    (66) expression -> . expression COMMA assignment_expression
    (67) assignment_expression -> . conditional_expression
    (68) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression COND_OP expression COLON conditional_expression
    (99) unary_expression -> . postfix_expression
    (100) unary_expression -> . INC unary_expression
    (101) unary_expression -> . DEC unary_expression
    (102) unary_expression -> . SUB_OP add_expression
    (103) unary_expression -> . NOT logical_or_expression
    (80) logical_or_expression -> . logical_and_expression
    (81) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (104) postfix_expression -> . primary_expression
    (105) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (106) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (107) postfix_expression -> . postfix_expression LPAREN RPAREN
    (108) postfix_expression -> . postfix_expression INC
    (109) postfix_expression -> . postfix_expression DEC
    (82) logical_and_expression -> . equality_expression
    (83) logical_and_expression -> . logical_and_expression AND equality_expression
    (110) primary_expression -> . identifier
    (111) primary_expression -> . constant
    (112) primary_expression -> . LPAREN expression RPAREN
    (84) equality_expression -> . relational_expression
    (85) equality_expression -> . equality_expression EQ relational_expression
    (86) equality_expression -> . equality_expression NEQ relational_expression
    (119) constant -> . FLOAT_LIT
    (120) constant -> . INT_LIT
    (121) constant -> . CHAR_LIT
    (122) constant -> . STR_LIT
    (87) relational_expression -> . add_expression
    (88) relational_expression -> . relational_expression LT add_expression
    (89) relational_expression -> . relational_expression GT add_expression
    (90) relational_expression -> . relational_expression LE add_expression
    (91) relational_expression -> . relational_expression GE add_expression
    (92) add_expression -> . mult_expression
    (93) add_expression -> . add_expression ADD_OP mult_expression
    (94) add_expression -> . add_expression SUB_OP mult_expression
    (95) mult_expression -> . unary_expression
    (96) mult_expression -> . mult_expression MULT_OP unary_expression
    (97) mult_expression -> . mult_expression DIV_OP unary_expression
    (98) mult_expression -> . mult_expression MOD_OP unary_expression

    RBRACE          shift and go to state 91
    CASE            shift and go to state 86
    DEFAULT         shift and go to state 80
    LBRACE          shift and go to state 43
    PRINT           shift and go to state 82
    SCAN            shift and go to state 79
    IF              shift and go to state 98
    SWITCH          shift and go to state 89
    WHILE           shift and go to state 83
    FOR             shift and go to state 92
    DO              shift and go to state 77
    CONTINUE        shift and go to state 103
    BREAK           shift and go to state 102
    RETURN          shift and go to state 78
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 25
    CHAR_ID         shift and go to state 7
    STR_ID          shift and go to state 13
    LPAREN          shift and go to state 95
    SEMI            reduce using rule 123 (empty -> .)
    INC             shift and go to state 33
    DEC             shift and go to state 3
    SUB_OP          shift and go to state 28
    NOT             shift and go to state 31
    FLOAT_LIT       shift and go to state 27
    INT_LIT         shift and go to state 29
    CHAR_LIT        shift and go to state 6
    STR_LIT         shift and go to state 4

    expression_statement           shift and go to state 76
    constant                       shift and go to state 1
    unary_expression               shift and go to state 2
    conditional_expression         shift and go to state 30
    print_statement                shift and go to state 84
    iteration_statement            shift and go to state 85
    compound_statement             shift and go to state 87
    selection_statement            shift and go to state 88
    postfix_expression             shift and go to state 9
    relational_expression          shift and go to state 11
    statement                      shift and go to state 90
    logical_or_expression          shift and go to state 15
    assignment_expression          shift and go to state 59
    scan_statement                 shift and go to state 93
    mult_expression                shift and go to state 18
    expression_opt                 shift and go to state 94
    primary_expression             shift and go to state 19
    declaration                    shift and go to state 96
    logical_and_expression         shift and go to state 21
    init_declarator_list           shift and go to state 81
    add_expression                 shift and go to state 22
    equality_expression            shift and go to state 23
    jump_statement                 shift and go to state 99
    labeled_statement              shift and go to state 100
    declaration_list               shift and go to state 101
    empty                          shift and go to state 104
    init_declarator                shift and go to state 105
    statement_list                 shift and go to state 106
    identifier                     shift and go to state 107
    expression                     shift and go to state 108
    declarator                     shift and go to state 97

state 44

    (25) fxn_prot -> fxn_declaration SEMI .

    INC             reduce using rule 25 (fxn_prot -> fxn_declaration SEMI .)
    DEC             reduce using rule 25 (fxn_prot -> fxn_declaration SEMI .)
    SUB_OP          reduce using rule 25 (fxn_prot -> fxn_declaration SEMI .)
    NOT             reduce using rule 25 (fxn_prot -> fxn_declaration SEMI .)
    LPAREN          reduce using rule 25 (fxn_prot -> fxn_declaration SEMI .)
    FLOAT_ID        reduce using rule 25 (fxn_prot -> fxn_declaration SEMI .)
    INT_ID          reduce using rule 25 (fxn_prot -> fxn_declaration SEMI .)
    CHAR_ID         reduce using rule 25 (fxn_prot -> fxn_declaration SEMI .)
    STR_ID          reduce using rule 25 (fxn_prot -> fxn_declaration SEMI .)
    FLOAT_LIT       reduce using rule 25 (fxn_prot -> fxn_declaration SEMI .)
    INT_LIT         reduce using rule 25 (fxn_prot -> fxn_declaration SEMI .)
    CHAR_LIT        reduce using rule 25 (fxn_prot -> fxn_declaration SEMI .)
    STR_LIT         reduce using rule 25 (fxn_prot -> fxn_declaration SEMI .)
    MAIN            reduce using rule 25 (fxn_prot -> fxn_declaration SEMI .)
    $end            reduce using rule 25 (fxn_prot -> fxn_declaration SEMI .)


state 45

    (26) fxn_definition -> fxn_declaration compound_statement .

    FLOAT_ID        reduce using rule 26 (fxn_definition -> fxn_declaration compound_statement .)
    INT_ID          reduce using rule 26 (fxn_definition -> fxn_declaration compound_statement .)
    CHAR_ID         reduce using rule 26 (fxn_definition -> fxn_declaration compound_statement .)
    STR_ID          reduce using rule 26 (fxn_definition -> fxn_declaration compound_statement .)
    $end            reduce using rule 26 (fxn_definition -> fxn_declaration compound_statement .)
    INC             reduce using rule 26 (fxn_definition -> fxn_declaration compound_statement .)
    DEC             reduce using rule 26 (fxn_definition -> fxn_declaration compound_statement .)
    SUB_OP          reduce using rule 26 (fxn_definition -> fxn_declaration compound_statement .)
    NOT             reduce using rule 26 (fxn_definition -> fxn_declaration compound_statement .)
    LPAREN          reduce using rule 26 (fxn_definition -> fxn_declaration compound_statement .)
    FLOAT_LIT       reduce using rule 26 (fxn_definition -> fxn_declaration compound_statement .)
    INT_LIT         reduce using rule 26 (fxn_definition -> fxn_declaration compound_statement .)
    CHAR_LIT        reduce using rule 26 (fxn_definition -> fxn_declaration compound_statement .)
    STR_LIT         reduce using rule 26 (fxn_definition -> fxn_declaration compound_statement .)
    MAIN            reduce using rule 26 (fxn_definition -> fxn_declaration compound_statement .)


state 46

    (105) postfix_expression -> postfix_expression LBRACKET . expression RBRACKET
    (65) expression -> . assignment_expression
    (66) expression -> . expression COMMA assignment_expression
    (67) assignment_expression -> . conditional_expression
    (68) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression COND_OP expression COLON conditional_expression
    (99) unary_expression -> . postfix_expression
    (100) unary_expression -> . INC unary_expression
    (101) unary_expression -> . DEC unary_expression
    (102) unary_expression -> . SUB_OP add_expression
    (103) unary_expression -> . NOT logical_or_expression
    (80) logical_or_expression -> . logical_and_expression
    (81) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (104) postfix_expression -> . primary_expression
    (105) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (106) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (107) postfix_expression -> . postfix_expression LPAREN RPAREN
    (108) postfix_expression -> . postfix_expression INC
    (109) postfix_expression -> . postfix_expression DEC
    (82) logical_and_expression -> . equality_expression
    (83) logical_and_expression -> . logical_and_expression AND equality_expression
    (110) primary_expression -> . identifier
    (111) primary_expression -> . constant
    (112) primary_expression -> . LPAREN expression RPAREN
    (84) equality_expression -> . relational_expression
    (85) equality_expression -> . equality_expression EQ relational_expression
    (86) equality_expression -> . equality_expression NEQ relational_expression
    (115) identifier -> . FLOAT_ID
    (116) identifier -> . INT_ID
    (117) identifier -> . CHAR_ID
    (118) identifier -> . STR_ID
    (119) constant -> . FLOAT_LIT
    (120) constant -> . INT_LIT
    (121) constant -> . CHAR_LIT
    (122) constant -> . STR_LIT
    (87) relational_expression -> . add_expression
    (88) relational_expression -> . relational_expression LT add_expression
    (89) relational_expression -> . relational_expression GT add_expression
    (90) relational_expression -> . relational_expression LE add_expression
    (91) relational_expression -> . relational_expression GE add_expression
    (92) add_expression -> . mult_expression
    (93) add_expression -> . add_expression ADD_OP mult_expression
    (94) add_expression -> . add_expression SUB_OP mult_expression
    (95) mult_expression -> . unary_expression
    (96) mult_expression -> . mult_expression MULT_OP unary_expression
    (97) mult_expression -> . mult_expression DIV_OP unary_expression
    (98) mult_expression -> . mult_expression MOD_OP unary_expression

    INC             shift and go to state 33
    DEC             shift and go to state 3
    SUB_OP          shift and go to state 28
    NOT             shift and go to state 31
    LPAREN          shift and go to state 20
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 25
    CHAR_ID         shift and go to state 7
    STR_ID          shift and go to state 13
    FLOAT_LIT       shift and go to state 27
    INT_LIT         shift and go to state 29
    CHAR_LIT        shift and go to state 6
    STR_LIT         shift and go to state 4

    constant                       shift and go to state 1
    assignment_expression          shift and go to state 59
    unary_expression               shift and go to state 2
    relational_expression          shift and go to state 11
    add_expression                 shift and go to state 22
    postfix_expression             shift and go to state 9
    conditional_expression         shift and go to state 30
    mult_expression                shift and go to state 18
    logical_and_expression         shift and go to state 21
    identifier                     shift and go to state 42
    expression                     shift and go to state 109
    logical_or_expression          shift and go to state 15
    equality_expression            shift and go to state 23
    primary_expression             shift and go to state 19

state 47

    (106) postfix_expression -> postfix_expression LPAREN . argument_expression_list RPAREN
    (107) postfix_expression -> postfix_expression LPAREN . RPAREN
    (113) argument_expression_list -> . assignment_expression
    (114) argument_expression_list -> . argument_expression_list COMMA assignment_expression
    (67) assignment_expression -> . conditional_expression
    (68) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression COND_OP expression COLON conditional_expression
    (99) unary_expression -> . postfix_expression
    (100) unary_expression -> . INC unary_expression
    (101) unary_expression -> . DEC unary_expression
    (102) unary_expression -> . SUB_OP add_expression
    (103) unary_expression -> . NOT logical_or_expression
    (80) logical_or_expression -> . logical_and_expression
    (81) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (104) postfix_expression -> . primary_expression
    (105) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (106) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (107) postfix_expression -> . postfix_expression LPAREN RPAREN
    (108) postfix_expression -> . postfix_expression INC
    (109) postfix_expression -> . postfix_expression DEC
    (82) logical_and_expression -> . equality_expression
    (83) logical_and_expression -> . logical_and_expression AND equality_expression
    (110) primary_expression -> . identifier
    (111) primary_expression -> . constant
    (112) primary_expression -> . LPAREN expression RPAREN
    (84) equality_expression -> . relational_expression
    (85) equality_expression -> . equality_expression EQ relational_expression
    (86) equality_expression -> . equality_expression NEQ relational_expression
    (115) identifier -> . FLOAT_ID
    (116) identifier -> . INT_ID
    (117) identifier -> . CHAR_ID
    (118) identifier -> . STR_ID
    (119) constant -> . FLOAT_LIT
    (120) constant -> . INT_LIT
    (121) constant -> . CHAR_LIT
    (122) constant -> . STR_LIT
    (87) relational_expression -> . add_expression
    (88) relational_expression -> . relational_expression LT add_expression
    (89) relational_expression -> . relational_expression GT add_expression
    (90) relational_expression -> . relational_expression LE add_expression
    (91) relational_expression -> . relational_expression GE add_expression
    (92) add_expression -> . mult_expression
    (93) add_expression -> . add_expression ADD_OP mult_expression
    (94) add_expression -> . add_expression SUB_OP mult_expression
    (95) mult_expression -> . unary_expression
    (96) mult_expression -> . mult_expression MULT_OP unary_expression
    (97) mult_expression -> . mult_expression DIV_OP unary_expression
    (98) mult_expression -> . mult_expression MOD_OP unary_expression

    RPAREN          shift and go to state 110
    INC             shift and go to state 33
    DEC             shift and go to state 3
    SUB_OP          shift and go to state 28
    NOT             shift and go to state 31
    LPAREN          shift and go to state 20
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 25
    CHAR_ID         shift and go to state 7
    STR_ID          shift and go to state 13
    FLOAT_LIT       shift and go to state 27
    INT_LIT         shift and go to state 29
    CHAR_LIT        shift and go to state 6
    STR_LIT         shift and go to state 4

    constant                       shift and go to state 1
    assignment_expression          shift and go to state 111
    unary_expression               shift and go to state 2
    relational_expression          shift and go to state 11
    add_expression                 shift and go to state 22
    argument_expression_list       shift and go to state 112
    postfix_expression             shift and go to state 9
    conditional_expression         shift and go to state 30
    mult_expression                shift and go to state 18
    logical_and_expression         shift and go to state 21
    identifier                     shift and go to state 42
    logical_or_expression          shift and go to state 15
    equality_expression            shift and go to state 23
    primary_expression             shift and go to state 19

state 48

    (109) postfix_expression -> postfix_expression DEC .

    LBRACKET        reduce using rule 109 (postfix_expression -> postfix_expression DEC .)
    LPAREN          reduce using rule 109 (postfix_expression -> postfix_expression DEC .)
    INC             reduce using rule 109 (postfix_expression -> postfix_expression DEC .)
    DEC             reduce using rule 109 (postfix_expression -> postfix_expression DEC .)
    ASSIGN_OP       reduce using rule 109 (postfix_expression -> postfix_expression DEC .)
    ADD_ASSIGN      reduce using rule 109 (postfix_expression -> postfix_expression DEC .)
    MIN_ASSIGN      reduce using rule 109 (postfix_expression -> postfix_expression DEC .)
    MUL_ASSIGN      reduce using rule 109 (postfix_expression -> postfix_expression DEC .)
    DIV_ASSIGN      reduce using rule 109 (postfix_expression -> postfix_expression DEC .)
    MOD_ASSIGN      reduce using rule 109 (postfix_expression -> postfix_expression DEC .)
    MULT_OP         reduce using rule 109 (postfix_expression -> postfix_expression DEC .)
    DIV_OP          reduce using rule 109 (postfix_expression -> postfix_expression DEC .)
    MOD_OP          reduce using rule 109 (postfix_expression -> postfix_expression DEC .)
    ADD_OP          reduce using rule 109 (postfix_expression -> postfix_expression DEC .)
    SUB_OP          reduce using rule 109 (postfix_expression -> postfix_expression DEC .)
    LT              reduce using rule 109 (postfix_expression -> postfix_expression DEC .)
    GT              reduce using rule 109 (postfix_expression -> postfix_expression DEC .)
    LE              reduce using rule 109 (postfix_expression -> postfix_expression DEC .)
    GE              reduce using rule 109 (postfix_expression -> postfix_expression DEC .)
    EQ              reduce using rule 109 (postfix_expression -> postfix_expression DEC .)
    NEQ             reduce using rule 109 (postfix_expression -> postfix_expression DEC .)
    OR              reduce using rule 109 (postfix_expression -> postfix_expression DEC .)
    AND             reduce using rule 109 (postfix_expression -> postfix_expression DEC .)
    COND_OP         reduce using rule 109 (postfix_expression -> postfix_expression DEC .)
    NOT             reduce using rule 109 (postfix_expression -> postfix_expression DEC .)
    FLOAT_ID        reduce using rule 109 (postfix_expression -> postfix_expression DEC .)
    INT_ID          reduce using rule 109 (postfix_expression -> postfix_expression DEC .)
    CHAR_ID         reduce using rule 109 (postfix_expression -> postfix_expression DEC .)
    STR_ID          reduce using rule 109 (postfix_expression -> postfix_expression DEC .)
    FLOAT_LIT       reduce using rule 109 (postfix_expression -> postfix_expression DEC .)
    INT_LIT         reduce using rule 109 (postfix_expression -> postfix_expression DEC .)
    CHAR_LIT        reduce using rule 109 (postfix_expression -> postfix_expression DEC .)
    STR_LIT         reduce using rule 109 (postfix_expression -> postfix_expression DEC .)
    MAIN            reduce using rule 109 (postfix_expression -> postfix_expression DEC .)
    RPAREN          reduce using rule 109 (postfix_expression -> postfix_expression DEC .)
    COMMA           reduce using rule 109 (postfix_expression -> postfix_expression DEC .)
    SEMI            reduce using rule 109 (postfix_expression -> postfix_expression DEC .)
    RBRACKET        reduce using rule 109 (postfix_expression -> postfix_expression DEC .)
    COLON           reduce using rule 109 (postfix_expression -> postfix_expression DEC .)
    RBRACE          reduce using rule 109 (postfix_expression -> postfix_expression DEC .)


state 49

    (108) postfix_expression -> postfix_expression INC .

    LBRACKET        reduce using rule 108 (postfix_expression -> postfix_expression INC .)
    LPAREN          reduce using rule 108 (postfix_expression -> postfix_expression INC .)
    INC             reduce using rule 108 (postfix_expression -> postfix_expression INC .)
    DEC             reduce using rule 108 (postfix_expression -> postfix_expression INC .)
    ASSIGN_OP       reduce using rule 108 (postfix_expression -> postfix_expression INC .)
    ADD_ASSIGN      reduce using rule 108 (postfix_expression -> postfix_expression INC .)
    MIN_ASSIGN      reduce using rule 108 (postfix_expression -> postfix_expression INC .)
    MUL_ASSIGN      reduce using rule 108 (postfix_expression -> postfix_expression INC .)
    DIV_ASSIGN      reduce using rule 108 (postfix_expression -> postfix_expression INC .)
    MOD_ASSIGN      reduce using rule 108 (postfix_expression -> postfix_expression INC .)
    MULT_OP         reduce using rule 108 (postfix_expression -> postfix_expression INC .)
    DIV_OP          reduce using rule 108 (postfix_expression -> postfix_expression INC .)
    MOD_OP          reduce using rule 108 (postfix_expression -> postfix_expression INC .)
    ADD_OP          reduce using rule 108 (postfix_expression -> postfix_expression INC .)
    SUB_OP          reduce using rule 108 (postfix_expression -> postfix_expression INC .)
    LT              reduce using rule 108 (postfix_expression -> postfix_expression INC .)
    GT              reduce using rule 108 (postfix_expression -> postfix_expression INC .)
    LE              reduce using rule 108 (postfix_expression -> postfix_expression INC .)
    GE              reduce using rule 108 (postfix_expression -> postfix_expression INC .)
    EQ              reduce using rule 108 (postfix_expression -> postfix_expression INC .)
    NEQ             reduce using rule 108 (postfix_expression -> postfix_expression INC .)
    OR              reduce using rule 108 (postfix_expression -> postfix_expression INC .)
    AND             reduce using rule 108 (postfix_expression -> postfix_expression INC .)
    COND_OP         reduce using rule 108 (postfix_expression -> postfix_expression INC .)
    NOT             reduce using rule 108 (postfix_expression -> postfix_expression INC .)
    FLOAT_ID        reduce using rule 108 (postfix_expression -> postfix_expression INC .)
    INT_ID          reduce using rule 108 (postfix_expression -> postfix_expression INC .)
    CHAR_ID         reduce using rule 108 (postfix_expression -> postfix_expression INC .)
    STR_ID          reduce using rule 108 (postfix_expression -> postfix_expression INC .)
    FLOAT_LIT       reduce using rule 108 (postfix_expression -> postfix_expression INC .)
    INT_LIT         reduce using rule 108 (postfix_expression -> postfix_expression INC .)
    CHAR_LIT        reduce using rule 108 (postfix_expression -> postfix_expression INC .)
    STR_LIT         reduce using rule 108 (postfix_expression -> postfix_expression INC .)
    MAIN            reduce using rule 108 (postfix_expression -> postfix_expression INC .)
    RPAREN          reduce using rule 108 (postfix_expression -> postfix_expression INC .)
    COMMA           reduce using rule 108 (postfix_expression -> postfix_expression INC .)
    SEMI            reduce using rule 108 (postfix_expression -> postfix_expression INC .)
    RBRACKET        reduce using rule 108 (postfix_expression -> postfix_expression INC .)
    COLON           reduce using rule 108 (postfix_expression -> postfix_expression INC .)
    RBRACE          reduce using rule 108 (postfix_expression -> postfix_expression INC .)


state 50

    (89) relational_expression -> relational_expression GT . add_expression
    (92) add_expression -> . mult_expression
    (93) add_expression -> . add_expression ADD_OP mult_expression
    (94) add_expression -> . add_expression SUB_OP mult_expression
    (95) mult_expression -> . unary_expression
    (96) mult_expression -> . mult_expression MULT_OP unary_expression
    (97) mult_expression -> . mult_expression DIV_OP unary_expression
    (98) mult_expression -> . mult_expression MOD_OP unary_expression
    (99) unary_expression -> . postfix_expression
    (100) unary_expression -> . INC unary_expression
    (101) unary_expression -> . DEC unary_expression
    (102) unary_expression -> . SUB_OP add_expression
    (103) unary_expression -> . NOT logical_or_expression
    (104) postfix_expression -> . primary_expression
    (105) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (106) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (107) postfix_expression -> . postfix_expression LPAREN RPAREN
    (108) postfix_expression -> . postfix_expression INC
    (109) postfix_expression -> . postfix_expression DEC
    (110) primary_expression -> . identifier
    (111) primary_expression -> . constant
    (112) primary_expression -> . LPAREN expression RPAREN
    (115) identifier -> . FLOAT_ID
    (116) identifier -> . INT_ID
    (117) identifier -> . CHAR_ID
    (118) identifier -> . STR_ID
    (119) constant -> . FLOAT_LIT
    (120) constant -> . INT_LIT
    (121) constant -> . CHAR_LIT
    (122) constant -> . STR_LIT

    INC             shift and go to state 33
    DEC             shift and go to state 3
    SUB_OP          shift and go to state 28
    NOT             shift and go to state 31
    LPAREN          shift and go to state 20
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 25
    CHAR_ID         shift and go to state 7
    STR_ID          shift and go to state 13
    FLOAT_LIT       shift and go to state 27
    INT_LIT         shift and go to state 29
    CHAR_LIT        shift and go to state 6
    STR_LIT         shift and go to state 4

    constant                       shift and go to state 1
    unary_expression               shift and go to state 70
    postfix_expression             shift and go to state 9
    mult_expression                shift and go to state 18
    identifier                     shift and go to state 42
    add_expression                 shift and go to state 113
    primary_expression             shift and go to state 19

state 51

    (88) relational_expression -> relational_expression LT . add_expression
    (92) add_expression -> . mult_expression
    (93) add_expression -> . add_expression ADD_OP mult_expression
    (94) add_expression -> . add_expression SUB_OP mult_expression
    (95) mult_expression -> . unary_expression
    (96) mult_expression -> . mult_expression MULT_OP unary_expression
    (97) mult_expression -> . mult_expression DIV_OP unary_expression
    (98) mult_expression -> . mult_expression MOD_OP unary_expression
    (99) unary_expression -> . postfix_expression
    (100) unary_expression -> . INC unary_expression
    (101) unary_expression -> . DEC unary_expression
    (102) unary_expression -> . SUB_OP add_expression
    (103) unary_expression -> . NOT logical_or_expression
    (104) postfix_expression -> . primary_expression
    (105) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (106) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (107) postfix_expression -> . postfix_expression LPAREN RPAREN
    (108) postfix_expression -> . postfix_expression INC
    (109) postfix_expression -> . postfix_expression DEC
    (110) primary_expression -> . identifier
    (111) primary_expression -> . constant
    (112) primary_expression -> . LPAREN expression RPAREN
    (115) identifier -> . FLOAT_ID
    (116) identifier -> . INT_ID
    (117) identifier -> . CHAR_ID
    (118) identifier -> . STR_ID
    (119) constant -> . FLOAT_LIT
    (120) constant -> . INT_LIT
    (121) constant -> . CHAR_LIT
    (122) constant -> . STR_LIT

    INC             shift and go to state 33
    DEC             shift and go to state 3
    SUB_OP          shift and go to state 28
    NOT             shift and go to state 31
    LPAREN          shift and go to state 20
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 25
    CHAR_ID         shift and go to state 7
    STR_ID          shift and go to state 13
    FLOAT_LIT       shift and go to state 27
    INT_LIT         shift and go to state 29
    CHAR_LIT        shift and go to state 6
    STR_LIT         shift and go to state 4

    constant                       shift and go to state 1
    unary_expression               shift and go to state 70
    postfix_expression             shift and go to state 9
    mult_expression                shift and go to state 18
    identifier                     shift and go to state 42
    add_expression                 shift and go to state 114
    primary_expression             shift and go to state 19

state 52

    (91) relational_expression -> relational_expression GE . add_expression
    (92) add_expression -> . mult_expression
    (93) add_expression -> . add_expression ADD_OP mult_expression
    (94) add_expression -> . add_expression SUB_OP mult_expression
    (95) mult_expression -> . unary_expression
    (96) mult_expression -> . mult_expression MULT_OP unary_expression
    (97) mult_expression -> . mult_expression DIV_OP unary_expression
    (98) mult_expression -> . mult_expression MOD_OP unary_expression
    (99) unary_expression -> . postfix_expression
    (100) unary_expression -> . INC unary_expression
    (101) unary_expression -> . DEC unary_expression
    (102) unary_expression -> . SUB_OP add_expression
    (103) unary_expression -> . NOT logical_or_expression
    (104) postfix_expression -> . primary_expression
    (105) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (106) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (107) postfix_expression -> . postfix_expression LPAREN RPAREN
    (108) postfix_expression -> . postfix_expression INC
    (109) postfix_expression -> . postfix_expression DEC
    (110) primary_expression -> . identifier
    (111) primary_expression -> . constant
    (112) primary_expression -> . LPAREN expression RPAREN
    (115) identifier -> . FLOAT_ID
    (116) identifier -> . INT_ID
    (117) identifier -> . CHAR_ID
    (118) identifier -> . STR_ID
    (119) constant -> . FLOAT_LIT
    (120) constant -> . INT_LIT
    (121) constant -> . CHAR_LIT
    (122) constant -> . STR_LIT

    INC             shift and go to state 33
    DEC             shift and go to state 3
    SUB_OP          shift and go to state 28
    NOT             shift and go to state 31
    LPAREN          shift and go to state 20
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 25
    CHAR_ID         shift and go to state 7
    STR_ID          shift and go to state 13
    FLOAT_LIT       shift and go to state 27
    INT_LIT         shift and go to state 29
    CHAR_LIT        shift and go to state 6
    STR_LIT         shift and go to state 4

    constant                       shift and go to state 1
    unary_expression               shift and go to state 70
    postfix_expression             shift and go to state 9
    mult_expression                shift and go to state 18
    identifier                     shift and go to state 42
    add_expression                 shift and go to state 115
    primary_expression             shift and go to state 19

state 53

    (90) relational_expression -> relational_expression LE . add_expression
    (92) add_expression -> . mult_expression
    (93) add_expression -> . add_expression ADD_OP mult_expression
    (94) add_expression -> . add_expression SUB_OP mult_expression
    (95) mult_expression -> . unary_expression
    (96) mult_expression -> . mult_expression MULT_OP unary_expression
    (97) mult_expression -> . mult_expression DIV_OP unary_expression
    (98) mult_expression -> . mult_expression MOD_OP unary_expression
    (99) unary_expression -> . postfix_expression
    (100) unary_expression -> . INC unary_expression
    (101) unary_expression -> . DEC unary_expression
    (102) unary_expression -> . SUB_OP add_expression
    (103) unary_expression -> . NOT logical_or_expression
    (104) postfix_expression -> . primary_expression
    (105) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (106) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (107) postfix_expression -> . postfix_expression LPAREN RPAREN
    (108) postfix_expression -> . postfix_expression INC
    (109) postfix_expression -> . postfix_expression DEC
    (110) primary_expression -> . identifier
    (111) primary_expression -> . constant
    (112) primary_expression -> . LPAREN expression RPAREN
    (115) identifier -> . FLOAT_ID
    (116) identifier -> . INT_ID
    (117) identifier -> . CHAR_ID
    (118) identifier -> . STR_ID
    (119) constant -> . FLOAT_LIT
    (120) constant -> . INT_LIT
    (121) constant -> . CHAR_LIT
    (122) constant -> . STR_LIT

    INC             shift and go to state 33
    DEC             shift and go to state 3
    SUB_OP          shift and go to state 28
    NOT             shift and go to state 31
    LPAREN          shift and go to state 20
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 25
    CHAR_ID         shift and go to state 7
    STR_ID          shift and go to state 13
    FLOAT_LIT       shift and go to state 27
    INT_LIT         shift and go to state 29
    CHAR_LIT        shift and go to state 6
    STR_LIT         shift and go to state 4

    constant                       shift and go to state 1
    unary_expression               shift and go to state 70
    postfix_expression             shift and go to state 9
    mult_expression                shift and go to state 18
    identifier                     shift and go to state 42
    add_expression                 shift and go to state 116
    primary_expression             shift and go to state 19

state 54

    (76) conditional_expression -> logical_or_expression COND_OP . expression COLON conditional_expression
    (65) expression -> . assignment_expression
    (66) expression -> . expression COMMA assignment_expression
    (67) assignment_expression -> . conditional_expression
    (68) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression COND_OP expression COLON conditional_expression
    (99) unary_expression -> . postfix_expression
    (100) unary_expression -> . INC unary_expression
    (101) unary_expression -> . DEC unary_expression
    (102) unary_expression -> . SUB_OP add_expression
    (103) unary_expression -> . NOT logical_or_expression
    (80) logical_or_expression -> . logical_and_expression
    (81) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (104) postfix_expression -> . primary_expression
    (105) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (106) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (107) postfix_expression -> . postfix_expression LPAREN RPAREN
    (108) postfix_expression -> . postfix_expression INC
    (109) postfix_expression -> . postfix_expression DEC
    (82) logical_and_expression -> . equality_expression
    (83) logical_and_expression -> . logical_and_expression AND equality_expression
    (110) primary_expression -> . identifier
    (111) primary_expression -> . constant
    (112) primary_expression -> . LPAREN expression RPAREN
    (84) equality_expression -> . relational_expression
    (85) equality_expression -> . equality_expression EQ relational_expression
    (86) equality_expression -> . equality_expression NEQ relational_expression
    (115) identifier -> . FLOAT_ID
    (116) identifier -> . INT_ID
    (117) identifier -> . CHAR_ID
    (118) identifier -> . STR_ID
    (119) constant -> . FLOAT_LIT
    (120) constant -> . INT_LIT
    (121) constant -> . CHAR_LIT
    (122) constant -> . STR_LIT
    (87) relational_expression -> . add_expression
    (88) relational_expression -> . relational_expression LT add_expression
    (89) relational_expression -> . relational_expression GT add_expression
    (90) relational_expression -> . relational_expression LE add_expression
    (91) relational_expression -> . relational_expression GE add_expression
    (92) add_expression -> . mult_expression
    (93) add_expression -> . add_expression ADD_OP mult_expression
    (94) add_expression -> . add_expression SUB_OP mult_expression
    (95) mult_expression -> . unary_expression
    (96) mult_expression -> . mult_expression MULT_OP unary_expression
    (97) mult_expression -> . mult_expression DIV_OP unary_expression
    (98) mult_expression -> . mult_expression MOD_OP unary_expression

    INC             shift and go to state 33
    DEC             shift and go to state 3
    SUB_OP          shift and go to state 28
    NOT             shift and go to state 31
    LPAREN          shift and go to state 20
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 25
    CHAR_ID         shift and go to state 7
    STR_ID          shift and go to state 13
    FLOAT_LIT       shift and go to state 27
    INT_LIT         shift and go to state 29
    CHAR_LIT        shift and go to state 6
    STR_LIT         shift and go to state 4

    constant                       shift and go to state 1
    assignment_expression          shift and go to state 59
    unary_expression               shift and go to state 2
    relational_expression          shift and go to state 11
    add_expression                 shift and go to state 22
    postfix_expression             shift and go to state 9
    conditional_expression         shift and go to state 30
    mult_expression                shift and go to state 18
    logical_and_expression         shift and go to state 21
    identifier                     shift and go to state 42
    expression                     shift and go to state 117
    logical_or_expression          shift and go to state 15
    equality_expression            shift and go to state 23
    primary_expression             shift and go to state 19

state 55

    (2) pre_main -> assignment_expression pre_main .

    MAIN            reduce using rule 2 (pre_main -> assignment_expression pre_main .)


state 56

    (96) mult_expression -> mult_expression MULT_OP . unary_expression
    (99) unary_expression -> . postfix_expression
    (100) unary_expression -> . INC unary_expression
    (101) unary_expression -> . DEC unary_expression
    (102) unary_expression -> . SUB_OP add_expression
    (103) unary_expression -> . NOT logical_or_expression
    (104) postfix_expression -> . primary_expression
    (105) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (106) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (107) postfix_expression -> . postfix_expression LPAREN RPAREN
    (108) postfix_expression -> . postfix_expression INC
    (109) postfix_expression -> . postfix_expression DEC
    (110) primary_expression -> . identifier
    (111) primary_expression -> . constant
    (112) primary_expression -> . LPAREN expression RPAREN
    (115) identifier -> . FLOAT_ID
    (116) identifier -> . INT_ID
    (117) identifier -> . CHAR_ID
    (118) identifier -> . STR_ID
    (119) constant -> . FLOAT_LIT
    (120) constant -> . INT_LIT
    (121) constant -> . CHAR_LIT
    (122) constant -> . STR_LIT

    INC             shift and go to state 33
    DEC             shift and go to state 3
    SUB_OP          shift and go to state 28
    NOT             shift and go to state 31
    LPAREN          shift and go to state 20
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 25
    CHAR_ID         shift and go to state 7
    STR_ID          shift and go to state 13
    FLOAT_LIT       shift and go to state 27
    INT_LIT         shift and go to state 29
    CHAR_LIT        shift and go to state 6
    STR_LIT         shift and go to state 4

    constant                       shift and go to state 1
    unary_expression               shift and go to state 118
    postfix_expression             shift and go to state 9
    primary_expression             shift and go to state 19
    identifier                     shift and go to state 42

state 57

    (98) mult_expression -> mult_expression MOD_OP . unary_expression
    (99) unary_expression -> . postfix_expression
    (100) unary_expression -> . INC unary_expression
    (101) unary_expression -> . DEC unary_expression
    (102) unary_expression -> . SUB_OP add_expression
    (103) unary_expression -> . NOT logical_or_expression
    (104) postfix_expression -> . primary_expression
    (105) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (106) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (107) postfix_expression -> . postfix_expression LPAREN RPAREN
    (108) postfix_expression -> . postfix_expression INC
    (109) postfix_expression -> . postfix_expression DEC
    (110) primary_expression -> . identifier
    (111) primary_expression -> . constant
    (112) primary_expression -> . LPAREN expression RPAREN
    (115) identifier -> . FLOAT_ID
    (116) identifier -> . INT_ID
    (117) identifier -> . CHAR_ID
    (118) identifier -> . STR_ID
    (119) constant -> . FLOAT_LIT
    (120) constant -> . INT_LIT
    (121) constant -> . CHAR_LIT
    (122) constant -> . STR_LIT

    INC             shift and go to state 33
    DEC             shift and go to state 3
    SUB_OP          shift and go to state 28
    NOT             shift and go to state 31
    LPAREN          shift and go to state 20
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 25
    CHAR_ID         shift and go to state 7
    STR_ID          shift and go to state 13
    FLOAT_LIT       shift and go to state 27
    INT_LIT         shift and go to state 29
    CHAR_LIT        shift and go to state 6
    STR_LIT         shift and go to state 4

    constant                       shift and go to state 1
    unary_expression               shift and go to state 119
    postfix_expression             shift and go to state 9
    primary_expression             shift and go to state 19
    identifier                     shift and go to state 42

state 58

    (97) mult_expression -> mult_expression DIV_OP . unary_expression
    (99) unary_expression -> . postfix_expression
    (100) unary_expression -> . INC unary_expression
    (101) unary_expression -> . DEC unary_expression
    (102) unary_expression -> . SUB_OP add_expression
    (103) unary_expression -> . NOT logical_or_expression
    (104) postfix_expression -> . primary_expression
    (105) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (106) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (107) postfix_expression -> . postfix_expression LPAREN RPAREN
    (108) postfix_expression -> . postfix_expression INC
    (109) postfix_expression -> . postfix_expression DEC
    (110) primary_expression -> . identifier
    (111) primary_expression -> . constant
    (112) primary_expression -> . LPAREN expression RPAREN
    (115) identifier -> . FLOAT_ID
    (116) identifier -> . INT_ID
    (117) identifier -> . CHAR_ID
    (118) identifier -> . STR_ID
    (119) constant -> . FLOAT_LIT
    (120) constant -> . INT_LIT
    (121) constant -> . CHAR_LIT
    (122) constant -> . STR_LIT

    INC             shift and go to state 33
    DEC             shift and go to state 3
    SUB_OP          shift and go to state 28
    NOT             shift and go to state 31
    LPAREN          shift and go to state 20
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 25
    CHAR_ID         shift and go to state 7
    STR_ID          shift and go to state 13
    FLOAT_LIT       shift and go to state 27
    INT_LIT         shift and go to state 29
    CHAR_LIT        shift and go to state 6
    STR_LIT         shift and go to state 4

    constant                       shift and go to state 1
    unary_expression               shift and go to state 120
    postfix_expression             shift and go to state 9
    primary_expression             shift and go to state 19
    identifier                     shift and go to state 42

state 59

    (65) expression -> assignment_expression .

    COMMA           reduce using rule 65 (expression -> assignment_expression .)
    SEMI            reduce using rule 65 (expression -> assignment_expression .)
    RPAREN          reduce using rule 65 (expression -> assignment_expression .)
    RBRACKET        reduce using rule 65 (expression -> assignment_expression .)
    COLON           reduce using rule 65 (expression -> assignment_expression .)


state 60

    (112) primary_expression -> LPAREN expression . RPAREN
    (66) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 121
    COMMA           shift and go to state 122


state 61

    (83) logical_and_expression -> logical_and_expression AND . equality_expression
    (84) equality_expression -> . relational_expression
    (85) equality_expression -> . equality_expression EQ relational_expression
    (86) equality_expression -> . equality_expression NEQ relational_expression
    (87) relational_expression -> . add_expression
    (88) relational_expression -> . relational_expression LT add_expression
    (89) relational_expression -> . relational_expression GT add_expression
    (90) relational_expression -> . relational_expression LE add_expression
    (91) relational_expression -> . relational_expression GE add_expression
    (92) add_expression -> . mult_expression
    (93) add_expression -> . add_expression ADD_OP mult_expression
    (94) add_expression -> . add_expression SUB_OP mult_expression
    (95) mult_expression -> . unary_expression
    (96) mult_expression -> . mult_expression MULT_OP unary_expression
    (97) mult_expression -> . mult_expression DIV_OP unary_expression
    (98) mult_expression -> . mult_expression MOD_OP unary_expression
    (99) unary_expression -> . postfix_expression
    (100) unary_expression -> . INC unary_expression
    (101) unary_expression -> . DEC unary_expression
    (102) unary_expression -> . SUB_OP add_expression
    (103) unary_expression -> . NOT logical_or_expression
    (104) postfix_expression -> . primary_expression
    (105) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (106) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (107) postfix_expression -> . postfix_expression LPAREN RPAREN
    (108) postfix_expression -> . postfix_expression INC
    (109) postfix_expression -> . postfix_expression DEC
    (110) primary_expression -> . identifier
    (111) primary_expression -> . constant
    (112) primary_expression -> . LPAREN expression RPAREN
    (115) identifier -> . FLOAT_ID
    (116) identifier -> . INT_ID
    (117) identifier -> . CHAR_ID
    (118) identifier -> . STR_ID
    (119) constant -> . FLOAT_LIT
    (120) constant -> . INT_LIT
    (121) constant -> . CHAR_LIT
    (122) constant -> . STR_LIT

    INC             shift and go to state 33
    DEC             shift and go to state 3
    SUB_OP          shift and go to state 28
    NOT             shift and go to state 31
    LPAREN          shift and go to state 20
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 25
    CHAR_ID         shift and go to state 7
    STR_ID          shift and go to state 13
    FLOAT_LIT       shift and go to state 27
    INT_LIT         shift and go to state 29
    CHAR_LIT        shift and go to state 6
    STR_LIT         shift and go to state 4

    constant                       shift and go to state 1
    unary_expression               shift and go to state 70
    postfix_expression             shift and go to state 9
    relational_expression          shift and go to state 11
    mult_expression                shift and go to state 18
    identifier                     shift and go to state 42
    add_expression                 shift and go to state 22
    equality_expression            shift and go to state 123
    primary_expression             shift and go to state 19

state 62

    (81) logical_or_expression -> logical_and_expression OR . logical_or_expression
    (80) logical_or_expression -> . logical_and_expression
    (81) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (82) logical_and_expression -> . equality_expression
    (83) logical_and_expression -> . logical_and_expression AND equality_expression
    (84) equality_expression -> . relational_expression
    (85) equality_expression -> . equality_expression EQ relational_expression
    (86) equality_expression -> . equality_expression NEQ relational_expression
    (87) relational_expression -> . add_expression
    (88) relational_expression -> . relational_expression LT add_expression
    (89) relational_expression -> . relational_expression GT add_expression
    (90) relational_expression -> . relational_expression LE add_expression
    (91) relational_expression -> . relational_expression GE add_expression
    (92) add_expression -> . mult_expression
    (93) add_expression -> . add_expression ADD_OP mult_expression
    (94) add_expression -> . add_expression SUB_OP mult_expression
    (95) mult_expression -> . unary_expression
    (96) mult_expression -> . mult_expression MULT_OP unary_expression
    (97) mult_expression -> . mult_expression DIV_OP unary_expression
    (98) mult_expression -> . mult_expression MOD_OP unary_expression
    (99) unary_expression -> . postfix_expression
    (100) unary_expression -> . INC unary_expression
    (101) unary_expression -> . DEC unary_expression
    (102) unary_expression -> . SUB_OP add_expression
    (103) unary_expression -> . NOT logical_or_expression
    (104) postfix_expression -> . primary_expression
    (105) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (106) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (107) postfix_expression -> . postfix_expression LPAREN RPAREN
    (108) postfix_expression -> . postfix_expression INC
    (109) postfix_expression -> . postfix_expression DEC
    (110) primary_expression -> . identifier
    (111) primary_expression -> . constant
    (112) primary_expression -> . LPAREN expression RPAREN
    (115) identifier -> . FLOAT_ID
    (116) identifier -> . INT_ID
    (117) identifier -> . CHAR_ID
    (118) identifier -> . STR_ID
    (119) constant -> . FLOAT_LIT
    (120) constant -> . INT_LIT
    (121) constant -> . CHAR_LIT
    (122) constant -> . STR_LIT

    INC             shift and go to state 33
    DEC             shift and go to state 3
    SUB_OP          shift and go to state 28
    NOT             shift and go to state 31
    LPAREN          shift and go to state 20
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 25
    CHAR_ID         shift and go to state 7
    STR_ID          shift and go to state 13
    FLOAT_LIT       shift and go to state 27
    INT_LIT         shift and go to state 29
    CHAR_LIT        shift and go to state 6
    STR_LIT         shift and go to state 4

    constant                       shift and go to state 1
    unary_expression               shift and go to state 70
    postfix_expression             shift and go to state 9
    relational_expression          shift and go to state 11
    mult_expression                shift and go to state 18
    logical_and_expression         shift and go to state 21
    identifier                     shift and go to state 42
    add_expression                 shift and go to state 22
    logical_or_expression          shift and go to state 124
    equality_expression            shift and go to state 23
    primary_expression             shift and go to state 19

state 63

    (94) add_expression -> add_expression SUB_OP . mult_expression
    (95) mult_expression -> . unary_expression
    (96) mult_expression -> . mult_expression MULT_OP unary_expression
    (97) mult_expression -> . mult_expression DIV_OP unary_expression
    (98) mult_expression -> . mult_expression MOD_OP unary_expression
    (99) unary_expression -> . postfix_expression
    (100) unary_expression -> . INC unary_expression
    (101) unary_expression -> . DEC unary_expression
    (102) unary_expression -> . SUB_OP add_expression
    (103) unary_expression -> . NOT logical_or_expression
    (104) postfix_expression -> . primary_expression
    (105) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (106) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (107) postfix_expression -> . postfix_expression LPAREN RPAREN
    (108) postfix_expression -> . postfix_expression INC
    (109) postfix_expression -> . postfix_expression DEC
    (110) primary_expression -> . identifier
    (111) primary_expression -> . constant
    (112) primary_expression -> . LPAREN expression RPAREN
    (115) identifier -> . FLOAT_ID
    (116) identifier -> . INT_ID
    (117) identifier -> . CHAR_ID
    (118) identifier -> . STR_ID
    (119) constant -> . FLOAT_LIT
    (120) constant -> . INT_LIT
    (121) constant -> . CHAR_LIT
    (122) constant -> . STR_LIT

    INC             shift and go to state 33
    DEC             shift and go to state 3
    SUB_OP          shift and go to state 28
    NOT             shift and go to state 31
    LPAREN          shift and go to state 20
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 25
    CHAR_ID         shift and go to state 7
    STR_ID          shift and go to state 13
    FLOAT_LIT       shift and go to state 27
    INT_LIT         shift and go to state 29
    CHAR_LIT        shift and go to state 6
    STR_LIT         shift and go to state 4

    constant                       shift and go to state 1
    unary_expression               shift and go to state 70
    postfix_expression             shift and go to state 9
    primary_expression             shift and go to state 19
    mult_expression                shift and go to state 125
    identifier                     shift and go to state 42

state 64

    (93) add_expression -> add_expression ADD_OP . mult_expression
    (95) mult_expression -> . unary_expression
    (96) mult_expression -> . mult_expression MULT_OP unary_expression
    (97) mult_expression -> . mult_expression DIV_OP unary_expression
    (98) mult_expression -> . mult_expression MOD_OP unary_expression
    (99) unary_expression -> . postfix_expression
    (100) unary_expression -> . INC unary_expression
    (101) unary_expression -> . DEC unary_expression
    (102) unary_expression -> . SUB_OP add_expression
    (103) unary_expression -> . NOT logical_or_expression
    (104) postfix_expression -> . primary_expression
    (105) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (106) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (107) postfix_expression -> . postfix_expression LPAREN RPAREN
    (108) postfix_expression -> . postfix_expression INC
    (109) postfix_expression -> . postfix_expression DEC
    (110) primary_expression -> . identifier
    (111) primary_expression -> . constant
    (112) primary_expression -> . LPAREN expression RPAREN
    (115) identifier -> . FLOAT_ID
    (116) identifier -> . INT_ID
    (117) identifier -> . CHAR_ID
    (118) identifier -> . STR_ID
    (119) constant -> . FLOAT_LIT
    (120) constant -> . INT_LIT
    (121) constant -> . CHAR_LIT
    (122) constant -> . STR_LIT

    INC             shift and go to state 33
    DEC             shift and go to state 3
    SUB_OP          shift and go to state 28
    NOT             shift and go to state 31
    LPAREN          shift and go to state 20
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 25
    CHAR_ID         shift and go to state 7
    STR_ID          shift and go to state 13
    FLOAT_LIT       shift and go to state 27
    INT_LIT         shift and go to state 29
    CHAR_LIT        shift and go to state 6
    STR_LIT         shift and go to state 4

    constant                       shift and go to state 1
    unary_expression               shift and go to state 70
    postfix_expression             shift and go to state 9
    primary_expression             shift and go to state 19
    mult_expression                shift and go to state 126
    identifier                     shift and go to state 42

state 65

    (85) equality_expression -> equality_expression EQ . relational_expression
    (87) relational_expression -> . add_expression
    (88) relational_expression -> . relational_expression LT add_expression
    (89) relational_expression -> . relational_expression GT add_expression
    (90) relational_expression -> . relational_expression LE add_expression
    (91) relational_expression -> . relational_expression GE add_expression
    (92) add_expression -> . mult_expression
    (93) add_expression -> . add_expression ADD_OP mult_expression
    (94) add_expression -> . add_expression SUB_OP mult_expression
    (95) mult_expression -> . unary_expression
    (96) mult_expression -> . mult_expression MULT_OP unary_expression
    (97) mult_expression -> . mult_expression DIV_OP unary_expression
    (98) mult_expression -> . mult_expression MOD_OP unary_expression
    (99) unary_expression -> . postfix_expression
    (100) unary_expression -> . INC unary_expression
    (101) unary_expression -> . DEC unary_expression
    (102) unary_expression -> . SUB_OP add_expression
    (103) unary_expression -> . NOT logical_or_expression
    (104) postfix_expression -> . primary_expression
    (105) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (106) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (107) postfix_expression -> . postfix_expression LPAREN RPAREN
    (108) postfix_expression -> . postfix_expression INC
    (109) postfix_expression -> . postfix_expression DEC
    (110) primary_expression -> . identifier
    (111) primary_expression -> . constant
    (112) primary_expression -> . LPAREN expression RPAREN
    (115) identifier -> . FLOAT_ID
    (116) identifier -> . INT_ID
    (117) identifier -> . CHAR_ID
    (118) identifier -> . STR_ID
    (119) constant -> . FLOAT_LIT
    (120) constant -> . INT_LIT
    (121) constant -> . CHAR_LIT
    (122) constant -> . STR_LIT

    INC             shift and go to state 33
    DEC             shift and go to state 3
    SUB_OP          shift and go to state 28
    NOT             shift and go to state 31
    LPAREN          shift and go to state 20
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 25
    CHAR_ID         shift and go to state 7
    STR_ID          shift and go to state 13
    FLOAT_LIT       shift and go to state 27
    INT_LIT         shift and go to state 29
    CHAR_LIT        shift and go to state 6
    STR_LIT         shift and go to state 4

    constant                       shift and go to state 1
    unary_expression               shift and go to state 70
    postfix_expression             shift and go to state 9
    relational_expression          shift and go to state 127
    mult_expression                shift and go to state 18
    identifier                     shift and go to state 42
    add_expression                 shift and go to state 22
    primary_expression             shift and go to state 19

state 66

    (86) equality_expression -> equality_expression NEQ . relational_expression
    (87) relational_expression -> . add_expression
    (88) relational_expression -> . relational_expression LT add_expression
    (89) relational_expression -> . relational_expression GT add_expression
    (90) relational_expression -> . relational_expression LE add_expression
    (91) relational_expression -> . relational_expression GE add_expression
    (92) add_expression -> . mult_expression
    (93) add_expression -> . add_expression ADD_OP mult_expression
    (94) add_expression -> . add_expression SUB_OP mult_expression
    (95) mult_expression -> . unary_expression
    (96) mult_expression -> . mult_expression MULT_OP unary_expression
    (97) mult_expression -> . mult_expression DIV_OP unary_expression
    (98) mult_expression -> . mult_expression MOD_OP unary_expression
    (99) unary_expression -> . postfix_expression
    (100) unary_expression -> . INC unary_expression
    (101) unary_expression -> . DEC unary_expression
    (102) unary_expression -> . SUB_OP add_expression
    (103) unary_expression -> . NOT logical_or_expression
    (104) postfix_expression -> . primary_expression
    (105) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (106) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (107) postfix_expression -> . postfix_expression LPAREN RPAREN
    (108) postfix_expression -> . postfix_expression INC
    (109) postfix_expression -> . postfix_expression DEC
    (110) primary_expression -> . identifier
    (111) primary_expression -> . constant
    (112) primary_expression -> . LPAREN expression RPAREN
    (115) identifier -> . FLOAT_ID
    (116) identifier -> . INT_ID
    (117) identifier -> . CHAR_ID
    (118) identifier -> . STR_ID
    (119) constant -> . FLOAT_LIT
    (120) constant -> . INT_LIT
    (121) constant -> . CHAR_LIT
    (122) constant -> . STR_LIT

    INC             shift and go to state 33
    DEC             shift and go to state 3
    SUB_OP          shift and go to state 28
    NOT             shift and go to state 31
    LPAREN          shift and go to state 20
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 25
    CHAR_ID         shift and go to state 7
    STR_ID          shift and go to state 13
    FLOAT_LIT       shift and go to state 27
    INT_LIT         shift and go to state 29
    CHAR_LIT        shift and go to state 6
    STR_LIT         shift and go to state 4

    constant                       shift and go to state 1
    unary_expression               shift and go to state 70
    postfix_expression             shift and go to state 9
    relational_expression          shift and go to state 128
    mult_expression                shift and go to state 18
    identifier                     shift and go to state 42
    add_expression                 shift and go to state 22
    primary_expression             shift and go to state 19

state 67

    (5) main -> MAIN . LPAREN empty RPAREN compound_statement

    LPAREN          shift and go to state 129


state 68

    (1) start -> pre_main main . post_main
    (6) post_main -> . fxn_var_statement post_main
    (7) post_main -> . empty
    (8) fxn_var_statement -> . fxn_prot
    (9) fxn_var_statement -> . fxn_definition
    (123) empty -> .
    (25) fxn_prot -> . fxn_declaration SEMI
    (26) fxn_definition -> . fxn_declaration compound_statement
    (27) fxn_declaration -> . identifier LPAREN fxn_prot_args RPAREN
    (28) fxn_declaration -> . identifier LPAREN empty RPAREN
    (115) identifier -> . FLOAT_ID
    (116) identifier -> . INT_ID
    (117) identifier -> . CHAR_ID
    (118) identifier -> . STR_ID

    $end            reduce using rule 123 (empty -> .)
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 25
    CHAR_ID         shift and go to state 7
    STR_ID          shift and go to state 13

    identifier                     shift and go to state 130
    fxn_declaration                shift and go to state 8
    fxn_var_statement              shift and go to state 131
    post_main                      shift and go to state 132
    fxn_definition                 shift and go to state 12
    fxn_prot                       shift and go to state 14
    empty                          shift and go to state 133

state 69

    (3) pre_main -> fxn_var_statement pre_main .

    MAIN            reduce using rule 3 (pre_main -> fxn_var_statement pre_main .)


state 70

    (95) mult_expression -> unary_expression .

    ASSIGN_OP       reduce using rule 95 (mult_expression -> unary_expression .)
    ADD_ASSIGN      reduce using rule 95 (mult_expression -> unary_expression .)
    MIN_ASSIGN      reduce using rule 95 (mult_expression -> unary_expression .)
    MUL_ASSIGN      reduce using rule 95 (mult_expression -> unary_expression .)
    DIV_ASSIGN      reduce using rule 95 (mult_expression -> unary_expression .)
    MOD_ASSIGN      reduce using rule 95 (mult_expression -> unary_expression .)
    MULT_OP         reduce using rule 95 (mult_expression -> unary_expression .)
    DIV_OP          reduce using rule 95 (mult_expression -> unary_expression .)
    MOD_OP          reduce using rule 95 (mult_expression -> unary_expression .)
    ADD_OP          reduce using rule 95 (mult_expression -> unary_expression .)
    SUB_OP          reduce using rule 95 (mult_expression -> unary_expression .)
    LT              reduce using rule 95 (mult_expression -> unary_expression .)
    GT              reduce using rule 95 (mult_expression -> unary_expression .)
    LE              reduce using rule 95 (mult_expression -> unary_expression .)
    GE              reduce using rule 95 (mult_expression -> unary_expression .)
    EQ              reduce using rule 95 (mult_expression -> unary_expression .)
    NEQ             reduce using rule 95 (mult_expression -> unary_expression .)
    OR              reduce using rule 95 (mult_expression -> unary_expression .)
    AND             reduce using rule 95 (mult_expression -> unary_expression .)
    COND_OP         reduce using rule 95 (mult_expression -> unary_expression .)
    INC             reduce using rule 95 (mult_expression -> unary_expression .)
    DEC             reduce using rule 95 (mult_expression -> unary_expression .)
    NOT             reduce using rule 95 (mult_expression -> unary_expression .)
    LPAREN          reduce using rule 95 (mult_expression -> unary_expression .)
    FLOAT_ID        reduce using rule 95 (mult_expression -> unary_expression .)
    INT_ID          reduce using rule 95 (mult_expression -> unary_expression .)
    CHAR_ID         reduce using rule 95 (mult_expression -> unary_expression .)
    STR_ID          reduce using rule 95 (mult_expression -> unary_expression .)
    FLOAT_LIT       reduce using rule 95 (mult_expression -> unary_expression .)
    INT_LIT         reduce using rule 95 (mult_expression -> unary_expression .)
    CHAR_LIT        reduce using rule 95 (mult_expression -> unary_expression .)
    STR_LIT         reduce using rule 95 (mult_expression -> unary_expression .)
    MAIN            reduce using rule 95 (mult_expression -> unary_expression .)
    RPAREN          reduce using rule 95 (mult_expression -> unary_expression .)
    COMMA           reduce using rule 95 (mult_expression -> unary_expression .)
    SEMI            reduce using rule 95 (mult_expression -> unary_expression .)
    RBRACKET        reduce using rule 95 (mult_expression -> unary_expression .)
    COLON           reduce using rule 95 (mult_expression -> unary_expression .)
    RBRACE          reduce using rule 95 (mult_expression -> unary_expression .)


state 71

    (102) unary_expression -> SUB_OP add_expression .
    (93) add_expression -> add_expression . ADD_OP mult_expression
    (94) add_expression -> add_expression . SUB_OP mult_expression

  ! shift/reduce conflict for ADD_OP resolved as shift
  ! shift/reduce conflict for SUB_OP resolved as shift
    ASSIGN_OP       reduce using rule 102 (unary_expression -> SUB_OP add_expression .)
    ADD_ASSIGN      reduce using rule 102 (unary_expression -> SUB_OP add_expression .)
    MIN_ASSIGN      reduce using rule 102 (unary_expression -> SUB_OP add_expression .)
    MUL_ASSIGN      reduce using rule 102 (unary_expression -> SUB_OP add_expression .)
    DIV_ASSIGN      reduce using rule 102 (unary_expression -> SUB_OP add_expression .)
    MOD_ASSIGN      reduce using rule 102 (unary_expression -> SUB_OP add_expression .)
    MULT_OP         reduce using rule 102 (unary_expression -> SUB_OP add_expression .)
    DIV_OP          reduce using rule 102 (unary_expression -> SUB_OP add_expression .)
    MOD_OP          reduce using rule 102 (unary_expression -> SUB_OP add_expression .)
    LT              reduce using rule 102 (unary_expression -> SUB_OP add_expression .)
    GT              reduce using rule 102 (unary_expression -> SUB_OP add_expression .)
    LE              reduce using rule 102 (unary_expression -> SUB_OP add_expression .)
    GE              reduce using rule 102 (unary_expression -> SUB_OP add_expression .)
    EQ              reduce using rule 102 (unary_expression -> SUB_OP add_expression .)
    NEQ             reduce using rule 102 (unary_expression -> SUB_OP add_expression .)
    OR              reduce using rule 102 (unary_expression -> SUB_OP add_expression .)
    AND             reduce using rule 102 (unary_expression -> SUB_OP add_expression .)
    COND_OP         reduce using rule 102 (unary_expression -> SUB_OP add_expression .)
    INC             reduce using rule 102 (unary_expression -> SUB_OP add_expression .)
    DEC             reduce using rule 102 (unary_expression -> SUB_OP add_expression .)
    NOT             reduce using rule 102 (unary_expression -> SUB_OP add_expression .)
    LPAREN          reduce using rule 102 (unary_expression -> SUB_OP add_expression .)
    FLOAT_ID        reduce using rule 102 (unary_expression -> SUB_OP add_expression .)
    INT_ID          reduce using rule 102 (unary_expression -> SUB_OP add_expression .)
    CHAR_ID         reduce using rule 102 (unary_expression -> SUB_OP add_expression .)
    STR_ID          reduce using rule 102 (unary_expression -> SUB_OP add_expression .)
    FLOAT_LIT       reduce using rule 102 (unary_expression -> SUB_OP add_expression .)
    INT_LIT         reduce using rule 102 (unary_expression -> SUB_OP add_expression .)
    CHAR_LIT        reduce using rule 102 (unary_expression -> SUB_OP add_expression .)
    STR_LIT         reduce using rule 102 (unary_expression -> SUB_OP add_expression .)
    MAIN            reduce using rule 102 (unary_expression -> SUB_OP add_expression .)
    RPAREN          reduce using rule 102 (unary_expression -> SUB_OP add_expression .)
    COMMA           reduce using rule 102 (unary_expression -> SUB_OP add_expression .)
    SEMI            reduce using rule 102 (unary_expression -> SUB_OP add_expression .)
    RBRACKET        reduce using rule 102 (unary_expression -> SUB_OP add_expression .)
    COLON           reduce using rule 102 (unary_expression -> SUB_OP add_expression .)
    RBRACE          reduce using rule 102 (unary_expression -> SUB_OP add_expression .)
    ADD_OP          shift and go to state 64
    SUB_OP          shift and go to state 63

  ! ADD_OP          [ reduce using rule 102 (unary_expression -> SUB_OP add_expression .) ]
  ! SUB_OP          [ reduce using rule 102 (unary_expression -> SUB_OP add_expression .) ]


state 72

    (103) unary_expression -> NOT logical_or_expression .

    ASSIGN_OP       reduce using rule 103 (unary_expression -> NOT logical_or_expression .)
    ADD_ASSIGN      reduce using rule 103 (unary_expression -> NOT logical_or_expression .)
    MIN_ASSIGN      reduce using rule 103 (unary_expression -> NOT logical_or_expression .)
    MUL_ASSIGN      reduce using rule 103 (unary_expression -> NOT logical_or_expression .)
    DIV_ASSIGN      reduce using rule 103 (unary_expression -> NOT logical_or_expression .)
    MOD_ASSIGN      reduce using rule 103 (unary_expression -> NOT logical_or_expression .)
    MULT_OP         reduce using rule 103 (unary_expression -> NOT logical_or_expression .)
    DIV_OP          reduce using rule 103 (unary_expression -> NOT logical_or_expression .)
    MOD_OP          reduce using rule 103 (unary_expression -> NOT logical_or_expression .)
    ADD_OP          reduce using rule 103 (unary_expression -> NOT logical_or_expression .)
    SUB_OP          reduce using rule 103 (unary_expression -> NOT logical_or_expression .)
    LT              reduce using rule 103 (unary_expression -> NOT logical_or_expression .)
    GT              reduce using rule 103 (unary_expression -> NOT logical_or_expression .)
    LE              reduce using rule 103 (unary_expression -> NOT logical_or_expression .)
    GE              reduce using rule 103 (unary_expression -> NOT logical_or_expression .)
    EQ              reduce using rule 103 (unary_expression -> NOT logical_or_expression .)
    NEQ             reduce using rule 103 (unary_expression -> NOT logical_or_expression .)
    OR              reduce using rule 103 (unary_expression -> NOT logical_or_expression .)
    AND             reduce using rule 103 (unary_expression -> NOT logical_or_expression .)
    COND_OP         reduce using rule 103 (unary_expression -> NOT logical_or_expression .)
    INC             reduce using rule 103 (unary_expression -> NOT logical_or_expression .)
    DEC             reduce using rule 103 (unary_expression -> NOT logical_or_expression .)
    NOT             reduce using rule 103 (unary_expression -> NOT logical_or_expression .)
    LPAREN          reduce using rule 103 (unary_expression -> NOT logical_or_expression .)
    FLOAT_ID        reduce using rule 103 (unary_expression -> NOT logical_or_expression .)
    INT_ID          reduce using rule 103 (unary_expression -> NOT logical_or_expression .)
    CHAR_ID         reduce using rule 103 (unary_expression -> NOT logical_or_expression .)
    STR_ID          reduce using rule 103 (unary_expression -> NOT logical_or_expression .)
    FLOAT_LIT       reduce using rule 103 (unary_expression -> NOT logical_or_expression .)
    INT_LIT         reduce using rule 103 (unary_expression -> NOT logical_or_expression .)
    CHAR_LIT        reduce using rule 103 (unary_expression -> NOT logical_or_expression .)
    STR_LIT         reduce using rule 103 (unary_expression -> NOT logical_or_expression .)
    MAIN            reduce using rule 103 (unary_expression -> NOT logical_or_expression .)
    RPAREN          reduce using rule 103 (unary_expression -> NOT logical_or_expression .)
    COMMA           reduce using rule 103 (unary_expression -> NOT logical_or_expression .)
    SEMI            reduce using rule 103 (unary_expression -> NOT logical_or_expression .)
    RBRACKET        reduce using rule 103 (unary_expression -> NOT logical_or_expression .)
    COLON           reduce using rule 103 (unary_expression -> NOT logical_or_expression .)
    RBRACE          reduce using rule 103 (unary_expression -> NOT logical_or_expression .)


state 73

    (27) fxn_declaration -> identifier LPAREN . fxn_prot_args RPAREN
    (28) fxn_declaration -> identifier LPAREN . empty RPAREN
    (29) fxn_prot_args -> . identifier COMMA fxn_prot_args
    (30) fxn_prot_args -> . identifier
    (123) empty -> .
    (115) identifier -> . FLOAT_ID
    (116) identifier -> . INT_ID
    (117) identifier -> . CHAR_ID
    (118) identifier -> . STR_ID

    RPAREN          reduce using rule 123 (empty -> .)
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 25
    CHAR_ID         shift and go to state 7
    STR_ID          shift and go to state 13

    identifier                     shift and go to state 135
    fxn_prot_args                  shift and go to state 134
    empty                          shift and go to state 136

state 74

    (100) unary_expression -> INC unary_expression .

    ASSIGN_OP       reduce using rule 100 (unary_expression -> INC unary_expression .)
    ADD_ASSIGN      reduce using rule 100 (unary_expression -> INC unary_expression .)
    MIN_ASSIGN      reduce using rule 100 (unary_expression -> INC unary_expression .)
    MUL_ASSIGN      reduce using rule 100 (unary_expression -> INC unary_expression .)
    DIV_ASSIGN      reduce using rule 100 (unary_expression -> INC unary_expression .)
    MOD_ASSIGN      reduce using rule 100 (unary_expression -> INC unary_expression .)
    MULT_OP         reduce using rule 100 (unary_expression -> INC unary_expression .)
    DIV_OP          reduce using rule 100 (unary_expression -> INC unary_expression .)
    MOD_OP          reduce using rule 100 (unary_expression -> INC unary_expression .)
    ADD_OP          reduce using rule 100 (unary_expression -> INC unary_expression .)
    SUB_OP          reduce using rule 100 (unary_expression -> INC unary_expression .)
    LT              reduce using rule 100 (unary_expression -> INC unary_expression .)
    GT              reduce using rule 100 (unary_expression -> INC unary_expression .)
    LE              reduce using rule 100 (unary_expression -> INC unary_expression .)
    GE              reduce using rule 100 (unary_expression -> INC unary_expression .)
    EQ              reduce using rule 100 (unary_expression -> INC unary_expression .)
    NEQ             reduce using rule 100 (unary_expression -> INC unary_expression .)
    OR              reduce using rule 100 (unary_expression -> INC unary_expression .)
    AND             reduce using rule 100 (unary_expression -> INC unary_expression .)
    COND_OP         reduce using rule 100 (unary_expression -> INC unary_expression .)
    INC             reduce using rule 100 (unary_expression -> INC unary_expression .)
    DEC             reduce using rule 100 (unary_expression -> INC unary_expression .)
    NOT             reduce using rule 100 (unary_expression -> INC unary_expression .)
    LPAREN          reduce using rule 100 (unary_expression -> INC unary_expression .)
    FLOAT_ID        reduce using rule 100 (unary_expression -> INC unary_expression .)
    INT_ID          reduce using rule 100 (unary_expression -> INC unary_expression .)
    CHAR_ID         reduce using rule 100 (unary_expression -> INC unary_expression .)
    STR_ID          reduce using rule 100 (unary_expression -> INC unary_expression .)
    FLOAT_LIT       reduce using rule 100 (unary_expression -> INC unary_expression .)
    INT_LIT         reduce using rule 100 (unary_expression -> INC unary_expression .)
    CHAR_LIT        reduce using rule 100 (unary_expression -> INC unary_expression .)
    STR_LIT         reduce using rule 100 (unary_expression -> INC unary_expression .)
    MAIN            reduce using rule 100 (unary_expression -> INC unary_expression .)
    RPAREN          reduce using rule 100 (unary_expression -> INC unary_expression .)
    COMMA           reduce using rule 100 (unary_expression -> INC unary_expression .)
    SEMI            reduce using rule 100 (unary_expression -> INC unary_expression .)
    RBRACKET        reduce using rule 100 (unary_expression -> INC unary_expression .)
    COLON           reduce using rule 100 (unary_expression -> INC unary_expression .)
    RBRACE          reduce using rule 100 (unary_expression -> INC unary_expression .)


state 75

    (68) assignment_expression -> unary_expression assignment_operator assignment_expression .

    RPAREN          reduce using rule 68 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    COMMA           reduce using rule 68 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    INC             reduce using rule 68 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    DEC             reduce using rule 68 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    SUB_OP          reduce using rule 68 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    NOT             reduce using rule 68 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    LPAREN          reduce using rule 68 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    FLOAT_ID        reduce using rule 68 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    INT_ID          reduce using rule 68 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    CHAR_ID         reduce using rule 68 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    STR_ID          reduce using rule 68 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    FLOAT_LIT       reduce using rule 68 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    INT_LIT         reduce using rule 68 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    CHAR_LIT        reduce using rule 68 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    STR_LIT         reduce using rule 68 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    MAIN            reduce using rule 68 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    SEMI            reduce using rule 68 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RBRACKET        reduce using rule 68 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    COLON           reduce using rule 68 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RBRACE          reduce using rule 68 (assignment_expression -> unary_expression assignment_operator assignment_expression .)


state 76

    (32) statement -> expression_statement .

    RBRACE          reduce using rule 32 (statement -> expression_statement .)
    CASE            reduce using rule 32 (statement -> expression_statement .)
    DEFAULT         reduce using rule 32 (statement -> expression_statement .)
    LBRACE          reduce using rule 32 (statement -> expression_statement .)
    PRINT           reduce using rule 32 (statement -> expression_statement .)
    SCAN            reduce using rule 32 (statement -> expression_statement .)
    IF              reduce using rule 32 (statement -> expression_statement .)
    SWITCH          reduce using rule 32 (statement -> expression_statement .)
    WHILE           reduce using rule 32 (statement -> expression_statement .)
    FOR             reduce using rule 32 (statement -> expression_statement .)
    DO              reduce using rule 32 (statement -> expression_statement .)
    CONTINUE        reduce using rule 32 (statement -> expression_statement .)
    BREAK           reduce using rule 32 (statement -> expression_statement .)
    RETURN          reduce using rule 32 (statement -> expression_statement .)
    FLOAT_ID        reduce using rule 32 (statement -> expression_statement .)
    INT_ID          reduce using rule 32 (statement -> expression_statement .)
    CHAR_ID         reduce using rule 32 (statement -> expression_statement .)
    STR_ID          reduce using rule 32 (statement -> expression_statement .)
    INC             reduce using rule 32 (statement -> expression_statement .)
    DEC             reduce using rule 32 (statement -> expression_statement .)
    SUB_OP          reduce using rule 32 (statement -> expression_statement .)
    NOT             reduce using rule 32 (statement -> expression_statement .)
    LPAREN          reduce using rule 32 (statement -> expression_statement .)
    FLOAT_LIT       reduce using rule 32 (statement -> expression_statement .)
    INT_LIT         reduce using rule 32 (statement -> expression_statement .)
    CHAR_LIT        reduce using rule 32 (statement -> expression_statement .)
    STR_LIT         reduce using rule 32 (statement -> expression_statement .)
    SEMI            reduce using rule 32 (statement -> expression_statement .)
    ELSE_IF         reduce using rule 32 (statement -> expression_statement .)
    ELSE            reduce using rule 32 (statement -> expression_statement .)


state 77

    (59) iteration_statement -> DO . statement WHILE LPAREN expression RPAREN SEMI
    (31) statement -> . labeled_statement
    (32) statement -> . expression_statement
    (33) statement -> . compound_statement
    (34) statement -> . print_statement
    (35) statement -> . scan_statement
    (36) statement -> . selection_statement
    (37) statement -> . iteration_statement
    (38) statement -> . jump_statement
    (41) labeled_statement -> . identifier COLON statement
    (42) labeled_statement -> . CASE constant_expression COLON statement
    (43) labeled_statement -> . DEFAULT COLON statement
    (44) expression_statement -> . expression_opt SEMI
    (45) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (46) compound_statement -> . LBRACE statement_list RBRACE
    (47) compound_statement -> . LBRACE declaration_list RBRACE
    (48) compound_statement -> . LBRACE RBRACE
    (39) print_statement -> . PRINT LPAREN assignment_expression RPAREN
    (40) scan_statement -> . SCAN LPAREN identifier RPAREN
    (51) selection_statement -> . IF LPAREN expression RPAREN statement
    (52) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (53) selection_statement -> . IF LPAREN expression RPAREN statement else_if_statement ELSE statement
    (54) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (57) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (58) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (59) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (60) jump_statement -> . CONTINUE SEMI
    (61) jump_statement -> . BREAK SEMI
    (62) jump_statement -> . RETURN expression_opt SEMI
    (115) identifier -> . FLOAT_ID
    (116) identifier -> . INT_ID
    (117) identifier -> . CHAR_ID
    (118) identifier -> . STR_ID
    (63) expression_opt -> . empty
    (64) expression_opt -> . expression
    (123) empty -> .
    (65) expression -> . assignment_expression
    (66) expression -> . expression COMMA assignment_expression
    (67) assignment_expression -> . conditional_expression
    (68) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression COND_OP expression COLON conditional_expression
    (99) unary_expression -> . postfix_expression
    (100) unary_expression -> . INC unary_expression
    (101) unary_expression -> . DEC unary_expression
    (102) unary_expression -> . SUB_OP add_expression
    (103) unary_expression -> . NOT logical_or_expression
    (80) logical_or_expression -> . logical_and_expression
    (81) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (104) postfix_expression -> . primary_expression
    (105) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (106) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (107) postfix_expression -> . postfix_expression LPAREN RPAREN
    (108) postfix_expression -> . postfix_expression INC
    (109) postfix_expression -> . postfix_expression DEC
    (82) logical_and_expression -> . equality_expression
    (83) logical_and_expression -> . logical_and_expression AND equality_expression
    (110) primary_expression -> . identifier
    (111) primary_expression -> . constant
    (112) primary_expression -> . LPAREN expression RPAREN
    (84) equality_expression -> . relational_expression
    (85) equality_expression -> . equality_expression EQ relational_expression
    (86) equality_expression -> . equality_expression NEQ relational_expression
    (119) constant -> . FLOAT_LIT
    (120) constant -> . INT_LIT
    (121) constant -> . CHAR_LIT
    (122) constant -> . STR_LIT
    (87) relational_expression -> . add_expression
    (88) relational_expression -> . relational_expression LT add_expression
    (89) relational_expression -> . relational_expression GT add_expression
    (90) relational_expression -> . relational_expression LE add_expression
    (91) relational_expression -> . relational_expression GE add_expression
    (92) add_expression -> . mult_expression
    (93) add_expression -> . add_expression ADD_OP mult_expression
    (94) add_expression -> . add_expression SUB_OP mult_expression
    (95) mult_expression -> . unary_expression
    (96) mult_expression -> . mult_expression MULT_OP unary_expression
    (97) mult_expression -> . mult_expression DIV_OP unary_expression
    (98) mult_expression -> . mult_expression MOD_OP unary_expression

    CASE            shift and go to state 86
    DEFAULT         shift and go to state 80
    LBRACE          shift and go to state 43
    PRINT           shift and go to state 82
    SCAN            shift and go to state 79
    IF              shift and go to state 98
    SWITCH          shift and go to state 89
    WHILE           shift and go to state 83
    FOR             shift and go to state 92
    DO              shift and go to state 77
    CONTINUE        shift and go to state 103
    BREAK           shift and go to state 102
    RETURN          shift and go to state 78
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 25
    CHAR_ID         shift and go to state 7
    STR_ID          shift and go to state 13
    SEMI            reduce using rule 123 (empty -> .)
    INC             shift and go to state 33
    DEC             shift and go to state 3
    SUB_OP          shift and go to state 28
    NOT             shift and go to state 31
    LPAREN          shift and go to state 20
    FLOAT_LIT       shift and go to state 27
    INT_LIT         shift and go to state 29
    CHAR_LIT        shift and go to state 6
    STR_LIT         shift and go to state 4

    expression_statement           shift and go to state 76
    constant                       shift and go to state 1
    unary_expression               shift and go to state 2
    print_statement                shift and go to state 84
    iteration_statement            shift and go to state 85
    compound_statement             shift and go to state 87
    selection_statement            shift and go to state 88
    postfix_expression             shift and go to state 9
    relational_expression          shift and go to state 11
    statement                      shift and go to state 137
    logical_or_expression          shift and go to state 15
    empty                          shift and go to state 104
    assignment_expression          shift and go to state 59
    scan_statement                 shift and go to state 93
    mult_expression                shift and go to state 18
    expression_opt                 shift and go to state 94
    primary_expression             shift and go to state 19
    logical_and_expression         shift and go to state 21
    add_expression                 shift and go to state 22
    equality_expression            shift and go to state 23
    jump_statement                 shift and go to state 99
    labeled_statement              shift and go to state 100
    conditional_expression         shift and go to state 30
    identifier                     shift and go to state 138
    expression                     shift and go to state 108

state 78

    (62) jump_statement -> RETURN . expression_opt SEMI
    (63) expression_opt -> . empty
    (64) expression_opt -> . expression
    (123) empty -> .
    (65) expression -> . assignment_expression
    (66) expression -> . expression COMMA assignment_expression
    (67) assignment_expression -> . conditional_expression
    (68) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression COND_OP expression COLON conditional_expression
    (99) unary_expression -> . postfix_expression
    (100) unary_expression -> . INC unary_expression
    (101) unary_expression -> . DEC unary_expression
    (102) unary_expression -> . SUB_OP add_expression
    (103) unary_expression -> . NOT logical_or_expression
    (80) logical_or_expression -> . logical_and_expression
    (81) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (104) postfix_expression -> . primary_expression
    (105) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (106) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (107) postfix_expression -> . postfix_expression LPAREN RPAREN
    (108) postfix_expression -> . postfix_expression INC
    (109) postfix_expression -> . postfix_expression DEC
    (82) logical_and_expression -> . equality_expression
    (83) logical_and_expression -> . logical_and_expression AND equality_expression
    (110) primary_expression -> . identifier
    (111) primary_expression -> . constant
    (112) primary_expression -> . LPAREN expression RPAREN
    (84) equality_expression -> . relational_expression
    (85) equality_expression -> . equality_expression EQ relational_expression
    (86) equality_expression -> . equality_expression NEQ relational_expression
    (115) identifier -> . FLOAT_ID
    (116) identifier -> . INT_ID
    (117) identifier -> . CHAR_ID
    (118) identifier -> . STR_ID
    (119) constant -> . FLOAT_LIT
    (120) constant -> . INT_LIT
    (121) constant -> . CHAR_LIT
    (122) constant -> . STR_LIT
    (87) relational_expression -> . add_expression
    (88) relational_expression -> . relational_expression LT add_expression
    (89) relational_expression -> . relational_expression GT add_expression
    (90) relational_expression -> . relational_expression LE add_expression
    (91) relational_expression -> . relational_expression GE add_expression
    (92) add_expression -> . mult_expression
    (93) add_expression -> . add_expression ADD_OP mult_expression
    (94) add_expression -> . add_expression SUB_OP mult_expression
    (95) mult_expression -> . unary_expression
    (96) mult_expression -> . mult_expression MULT_OP unary_expression
    (97) mult_expression -> . mult_expression DIV_OP unary_expression
    (98) mult_expression -> . mult_expression MOD_OP unary_expression

    SEMI            reduce using rule 123 (empty -> .)
    INC             shift and go to state 33
    DEC             shift and go to state 3
    SUB_OP          shift and go to state 28
    NOT             shift and go to state 31
    LPAREN          shift and go to state 20
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 25
    CHAR_ID         shift and go to state 7
    STR_ID          shift and go to state 13
    FLOAT_LIT       shift and go to state 27
    INT_LIT         shift and go to state 29
    CHAR_LIT        shift and go to state 6
    STR_LIT         shift and go to state 4

    constant                       shift and go to state 1
    assignment_expression          shift and go to state 59
    unary_expression               shift and go to state 2
    relational_expression          shift and go to state 11
    add_expression                 shift and go to state 22
    postfix_expression             shift and go to state 9
    expression_opt                 shift and go to state 139
    equality_expression            shift and go to state 23
    conditional_expression         shift and go to state 30
    mult_expression                shift and go to state 18
    logical_and_expression         shift and go to state 21
    identifier                     shift and go to state 42
    expression                     shift and go to state 108
    logical_or_expression          shift and go to state 15
    empty                          shift and go to state 104
    primary_expression             shift and go to state 19

state 79

    (40) scan_statement -> SCAN . LPAREN identifier RPAREN

    LPAREN          shift and go to state 140


state 80

    (43) labeled_statement -> DEFAULT . COLON statement

    COLON           shift and go to state 141


state 81

    (10) declaration -> init_declarator_list . SEMI
    (14) init_declarator_list -> init_declarator_list . COMMA init_declarator

    SEMI            shift and go to state 143
    COMMA           shift and go to state 142


state 82

    (39) print_statement -> PRINT . LPAREN assignment_expression RPAREN

    LPAREN          shift and go to state 144


state 83

    (57) iteration_statement -> WHILE . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 145


state 84

    (34) statement -> print_statement .

    RBRACE          reduce using rule 34 (statement -> print_statement .)
    CASE            reduce using rule 34 (statement -> print_statement .)
    DEFAULT         reduce using rule 34 (statement -> print_statement .)
    LBRACE          reduce using rule 34 (statement -> print_statement .)
    PRINT           reduce using rule 34 (statement -> print_statement .)
    SCAN            reduce using rule 34 (statement -> print_statement .)
    IF              reduce using rule 34 (statement -> print_statement .)
    SWITCH          reduce using rule 34 (statement -> print_statement .)
    WHILE           reduce using rule 34 (statement -> print_statement .)
    FOR             reduce using rule 34 (statement -> print_statement .)
    DO              reduce using rule 34 (statement -> print_statement .)
    CONTINUE        reduce using rule 34 (statement -> print_statement .)
    BREAK           reduce using rule 34 (statement -> print_statement .)
    RETURN          reduce using rule 34 (statement -> print_statement .)
    FLOAT_ID        reduce using rule 34 (statement -> print_statement .)
    INT_ID          reduce using rule 34 (statement -> print_statement .)
    CHAR_ID         reduce using rule 34 (statement -> print_statement .)
    STR_ID          reduce using rule 34 (statement -> print_statement .)
    INC             reduce using rule 34 (statement -> print_statement .)
    DEC             reduce using rule 34 (statement -> print_statement .)
    SUB_OP          reduce using rule 34 (statement -> print_statement .)
    NOT             reduce using rule 34 (statement -> print_statement .)
    LPAREN          reduce using rule 34 (statement -> print_statement .)
    FLOAT_LIT       reduce using rule 34 (statement -> print_statement .)
    INT_LIT         reduce using rule 34 (statement -> print_statement .)
    CHAR_LIT        reduce using rule 34 (statement -> print_statement .)
    STR_LIT         reduce using rule 34 (statement -> print_statement .)
    SEMI            reduce using rule 34 (statement -> print_statement .)
    ELSE_IF         reduce using rule 34 (statement -> print_statement .)
    ELSE            reduce using rule 34 (statement -> print_statement .)


state 85

    (37) statement -> iteration_statement .

    RBRACE          reduce using rule 37 (statement -> iteration_statement .)
    CASE            reduce using rule 37 (statement -> iteration_statement .)
    DEFAULT         reduce using rule 37 (statement -> iteration_statement .)
    LBRACE          reduce using rule 37 (statement -> iteration_statement .)
    PRINT           reduce using rule 37 (statement -> iteration_statement .)
    SCAN            reduce using rule 37 (statement -> iteration_statement .)
    IF              reduce using rule 37 (statement -> iteration_statement .)
    SWITCH          reduce using rule 37 (statement -> iteration_statement .)
    WHILE           reduce using rule 37 (statement -> iteration_statement .)
    FOR             reduce using rule 37 (statement -> iteration_statement .)
    DO              reduce using rule 37 (statement -> iteration_statement .)
    CONTINUE        reduce using rule 37 (statement -> iteration_statement .)
    BREAK           reduce using rule 37 (statement -> iteration_statement .)
    RETURN          reduce using rule 37 (statement -> iteration_statement .)
    FLOAT_ID        reduce using rule 37 (statement -> iteration_statement .)
    INT_ID          reduce using rule 37 (statement -> iteration_statement .)
    CHAR_ID         reduce using rule 37 (statement -> iteration_statement .)
    STR_ID          reduce using rule 37 (statement -> iteration_statement .)
    INC             reduce using rule 37 (statement -> iteration_statement .)
    DEC             reduce using rule 37 (statement -> iteration_statement .)
    SUB_OP          reduce using rule 37 (statement -> iteration_statement .)
    NOT             reduce using rule 37 (statement -> iteration_statement .)
    LPAREN          reduce using rule 37 (statement -> iteration_statement .)
    FLOAT_LIT       reduce using rule 37 (statement -> iteration_statement .)
    INT_LIT         reduce using rule 37 (statement -> iteration_statement .)
    CHAR_LIT        reduce using rule 37 (statement -> iteration_statement .)
    STR_LIT         reduce using rule 37 (statement -> iteration_statement .)
    SEMI            reduce using rule 37 (statement -> iteration_statement .)
    ELSE_IF         reduce using rule 37 (statement -> iteration_statement .)
    ELSE            reduce using rule 37 (statement -> iteration_statement .)


state 86

    (42) labeled_statement -> CASE . constant_expression COLON statement
    (79) constant_expression -> . conditional_expression
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression COND_OP expression COLON conditional_expression
    (80) logical_or_expression -> . logical_and_expression
    (81) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (82) logical_and_expression -> . equality_expression
    (83) logical_and_expression -> . logical_and_expression AND equality_expression
    (84) equality_expression -> . relational_expression
    (85) equality_expression -> . equality_expression EQ relational_expression
    (86) equality_expression -> . equality_expression NEQ relational_expression
    (87) relational_expression -> . add_expression
    (88) relational_expression -> . relational_expression LT add_expression
    (89) relational_expression -> . relational_expression GT add_expression
    (90) relational_expression -> . relational_expression LE add_expression
    (91) relational_expression -> . relational_expression GE add_expression
    (92) add_expression -> . mult_expression
    (93) add_expression -> . add_expression ADD_OP mult_expression
    (94) add_expression -> . add_expression SUB_OP mult_expression
    (95) mult_expression -> . unary_expression
    (96) mult_expression -> . mult_expression MULT_OP unary_expression
    (97) mult_expression -> . mult_expression DIV_OP unary_expression
    (98) mult_expression -> . mult_expression MOD_OP unary_expression
    (99) unary_expression -> . postfix_expression
    (100) unary_expression -> . INC unary_expression
    (101) unary_expression -> . DEC unary_expression
    (102) unary_expression -> . SUB_OP add_expression
    (103) unary_expression -> . NOT logical_or_expression
    (104) postfix_expression -> . primary_expression
    (105) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (106) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (107) postfix_expression -> . postfix_expression LPAREN RPAREN
    (108) postfix_expression -> . postfix_expression INC
    (109) postfix_expression -> . postfix_expression DEC
    (110) primary_expression -> . identifier
    (111) primary_expression -> . constant
    (112) primary_expression -> . LPAREN expression RPAREN
    (115) identifier -> . FLOAT_ID
    (116) identifier -> . INT_ID
    (117) identifier -> . CHAR_ID
    (118) identifier -> . STR_ID
    (119) constant -> . FLOAT_LIT
    (120) constant -> . INT_LIT
    (121) constant -> . CHAR_LIT
    (122) constant -> . STR_LIT

    INC             shift and go to state 33
    DEC             shift and go to state 3
    SUB_OP          shift and go to state 28
    NOT             shift and go to state 31
    LPAREN          shift and go to state 20
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 25
    CHAR_ID         shift and go to state 7
    STR_ID          shift and go to state 13
    FLOAT_LIT       shift and go to state 27
    INT_LIT         shift and go to state 29
    CHAR_LIT        shift and go to state 6
    STR_LIT         shift and go to state 4

    identifier                     shift and go to state 42
    constant                       shift and go to state 1
    unary_expression               shift and go to state 70
    add_expression                 shift and go to state 22
    postfix_expression             shift and go to state 9
    equality_expression            shift and go to state 23
    conditional_expression         shift and go to state 147
    mult_expression                shift and go to state 18
    logical_and_expression         shift and go to state 21
    primary_expression             shift and go to state 19
    logical_or_expression          shift and go to state 15
    constant_expression            shift and go to state 146
    relational_expression          shift and go to state 11

state 87

    (33) statement -> compound_statement .

    RBRACE          reduce using rule 33 (statement -> compound_statement .)
    CASE            reduce using rule 33 (statement -> compound_statement .)
    DEFAULT         reduce using rule 33 (statement -> compound_statement .)
    LBRACE          reduce using rule 33 (statement -> compound_statement .)
    PRINT           reduce using rule 33 (statement -> compound_statement .)
    SCAN            reduce using rule 33 (statement -> compound_statement .)
    IF              reduce using rule 33 (statement -> compound_statement .)
    SWITCH          reduce using rule 33 (statement -> compound_statement .)
    WHILE           reduce using rule 33 (statement -> compound_statement .)
    FOR             reduce using rule 33 (statement -> compound_statement .)
    DO              reduce using rule 33 (statement -> compound_statement .)
    CONTINUE        reduce using rule 33 (statement -> compound_statement .)
    BREAK           reduce using rule 33 (statement -> compound_statement .)
    RETURN          reduce using rule 33 (statement -> compound_statement .)
    FLOAT_ID        reduce using rule 33 (statement -> compound_statement .)
    INT_ID          reduce using rule 33 (statement -> compound_statement .)
    CHAR_ID         reduce using rule 33 (statement -> compound_statement .)
    STR_ID          reduce using rule 33 (statement -> compound_statement .)
    INC             reduce using rule 33 (statement -> compound_statement .)
    DEC             reduce using rule 33 (statement -> compound_statement .)
    SUB_OP          reduce using rule 33 (statement -> compound_statement .)
    NOT             reduce using rule 33 (statement -> compound_statement .)
    LPAREN          reduce using rule 33 (statement -> compound_statement .)
    FLOAT_LIT       reduce using rule 33 (statement -> compound_statement .)
    INT_LIT         reduce using rule 33 (statement -> compound_statement .)
    CHAR_LIT        reduce using rule 33 (statement -> compound_statement .)
    STR_LIT         reduce using rule 33 (statement -> compound_statement .)
    SEMI            reduce using rule 33 (statement -> compound_statement .)
    ELSE_IF         reduce using rule 33 (statement -> compound_statement .)
    ELSE            reduce using rule 33 (statement -> compound_statement .)


state 88

    (36) statement -> selection_statement .

    RBRACE          reduce using rule 36 (statement -> selection_statement .)
    CASE            reduce using rule 36 (statement -> selection_statement .)
    DEFAULT         reduce using rule 36 (statement -> selection_statement .)
    LBRACE          reduce using rule 36 (statement -> selection_statement .)
    PRINT           reduce using rule 36 (statement -> selection_statement .)
    SCAN            reduce using rule 36 (statement -> selection_statement .)
    IF              reduce using rule 36 (statement -> selection_statement .)
    SWITCH          reduce using rule 36 (statement -> selection_statement .)
    WHILE           reduce using rule 36 (statement -> selection_statement .)
    FOR             reduce using rule 36 (statement -> selection_statement .)
    DO              reduce using rule 36 (statement -> selection_statement .)
    CONTINUE        reduce using rule 36 (statement -> selection_statement .)
    BREAK           reduce using rule 36 (statement -> selection_statement .)
    RETURN          reduce using rule 36 (statement -> selection_statement .)
    FLOAT_ID        reduce using rule 36 (statement -> selection_statement .)
    INT_ID          reduce using rule 36 (statement -> selection_statement .)
    CHAR_ID         reduce using rule 36 (statement -> selection_statement .)
    STR_ID          reduce using rule 36 (statement -> selection_statement .)
    INC             reduce using rule 36 (statement -> selection_statement .)
    DEC             reduce using rule 36 (statement -> selection_statement .)
    SUB_OP          reduce using rule 36 (statement -> selection_statement .)
    NOT             reduce using rule 36 (statement -> selection_statement .)
    LPAREN          reduce using rule 36 (statement -> selection_statement .)
    FLOAT_LIT       reduce using rule 36 (statement -> selection_statement .)
    INT_LIT         reduce using rule 36 (statement -> selection_statement .)
    CHAR_LIT        reduce using rule 36 (statement -> selection_statement .)
    STR_LIT         reduce using rule 36 (statement -> selection_statement .)
    SEMI            reduce using rule 36 (statement -> selection_statement .)
    ELSE_IF         reduce using rule 36 (statement -> selection_statement .)
    ELSE            reduce using rule 36 (statement -> selection_statement .)


state 89

    (54) selection_statement -> SWITCH . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 148


state 90

    (49) statement_list -> statement .

    RBRACE          reduce using rule 49 (statement_list -> statement .)
    CASE            reduce using rule 49 (statement_list -> statement .)
    DEFAULT         reduce using rule 49 (statement_list -> statement .)
    LBRACE          reduce using rule 49 (statement_list -> statement .)
    PRINT           reduce using rule 49 (statement_list -> statement .)
    SCAN            reduce using rule 49 (statement_list -> statement .)
    IF              reduce using rule 49 (statement_list -> statement .)
    SWITCH          reduce using rule 49 (statement_list -> statement .)
    WHILE           reduce using rule 49 (statement_list -> statement .)
    FOR             reduce using rule 49 (statement_list -> statement .)
    DO              reduce using rule 49 (statement_list -> statement .)
    CONTINUE        reduce using rule 49 (statement_list -> statement .)
    BREAK           reduce using rule 49 (statement_list -> statement .)
    RETURN          reduce using rule 49 (statement_list -> statement .)
    FLOAT_ID        reduce using rule 49 (statement_list -> statement .)
    INT_ID          reduce using rule 49 (statement_list -> statement .)
    CHAR_ID         reduce using rule 49 (statement_list -> statement .)
    STR_ID          reduce using rule 49 (statement_list -> statement .)
    INC             reduce using rule 49 (statement_list -> statement .)
    DEC             reduce using rule 49 (statement_list -> statement .)
    SUB_OP          reduce using rule 49 (statement_list -> statement .)
    NOT             reduce using rule 49 (statement_list -> statement .)
    LPAREN          reduce using rule 49 (statement_list -> statement .)
    FLOAT_LIT       reduce using rule 49 (statement_list -> statement .)
    INT_LIT         reduce using rule 49 (statement_list -> statement .)
    CHAR_LIT        reduce using rule 49 (statement_list -> statement .)
    STR_LIT         reduce using rule 49 (statement_list -> statement .)
    SEMI            reduce using rule 49 (statement_list -> statement .)


state 91

    (48) compound_statement -> LBRACE RBRACE .

    RBRACE          reduce using rule 48 (compound_statement -> LBRACE RBRACE .)
    CASE            reduce using rule 48 (compound_statement -> LBRACE RBRACE .)
    DEFAULT         reduce using rule 48 (compound_statement -> LBRACE RBRACE .)
    LBRACE          reduce using rule 48 (compound_statement -> LBRACE RBRACE .)
    PRINT           reduce using rule 48 (compound_statement -> LBRACE RBRACE .)
    SCAN            reduce using rule 48 (compound_statement -> LBRACE RBRACE .)
    IF              reduce using rule 48 (compound_statement -> LBRACE RBRACE .)
    SWITCH          reduce using rule 48 (compound_statement -> LBRACE RBRACE .)
    WHILE           reduce using rule 48 (compound_statement -> LBRACE RBRACE .)
    FOR             reduce using rule 48 (compound_statement -> LBRACE RBRACE .)
    DO              reduce using rule 48 (compound_statement -> LBRACE RBRACE .)
    CONTINUE        reduce using rule 48 (compound_statement -> LBRACE RBRACE .)
    BREAK           reduce using rule 48 (compound_statement -> LBRACE RBRACE .)
    RETURN          reduce using rule 48 (compound_statement -> LBRACE RBRACE .)
    FLOAT_ID        reduce using rule 48 (compound_statement -> LBRACE RBRACE .)
    INT_ID          reduce using rule 48 (compound_statement -> LBRACE RBRACE .)
    CHAR_ID         reduce using rule 48 (compound_statement -> LBRACE RBRACE .)
    STR_ID          reduce using rule 48 (compound_statement -> LBRACE RBRACE .)
    INC             reduce using rule 48 (compound_statement -> LBRACE RBRACE .)
    DEC             reduce using rule 48 (compound_statement -> LBRACE RBRACE .)
    SUB_OP          reduce using rule 48 (compound_statement -> LBRACE RBRACE .)
    NOT             reduce using rule 48 (compound_statement -> LBRACE RBRACE .)
    LPAREN          reduce using rule 48 (compound_statement -> LBRACE RBRACE .)
    FLOAT_LIT       reduce using rule 48 (compound_statement -> LBRACE RBRACE .)
    INT_LIT         reduce using rule 48 (compound_statement -> LBRACE RBRACE .)
    CHAR_LIT        reduce using rule 48 (compound_statement -> LBRACE RBRACE .)
    STR_LIT         reduce using rule 48 (compound_statement -> LBRACE RBRACE .)
    SEMI            reduce using rule 48 (compound_statement -> LBRACE RBRACE .)
    ELSE            reduce using rule 48 (compound_statement -> LBRACE RBRACE .)
    ELSE_IF         reduce using rule 48 (compound_statement -> LBRACE RBRACE .)
    $end            reduce using rule 48 (compound_statement -> LBRACE RBRACE .)
    MAIN            reduce using rule 48 (compound_statement -> LBRACE RBRACE .)


state 92

    (58) iteration_statement -> FOR . LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement

    LPAREN          shift and go to state 149


state 93

    (35) statement -> scan_statement .

    RBRACE          reduce using rule 35 (statement -> scan_statement .)
    CASE            reduce using rule 35 (statement -> scan_statement .)
    DEFAULT         reduce using rule 35 (statement -> scan_statement .)
    LBRACE          reduce using rule 35 (statement -> scan_statement .)
    PRINT           reduce using rule 35 (statement -> scan_statement .)
    SCAN            reduce using rule 35 (statement -> scan_statement .)
    IF              reduce using rule 35 (statement -> scan_statement .)
    SWITCH          reduce using rule 35 (statement -> scan_statement .)
    WHILE           reduce using rule 35 (statement -> scan_statement .)
    FOR             reduce using rule 35 (statement -> scan_statement .)
    DO              reduce using rule 35 (statement -> scan_statement .)
    CONTINUE        reduce using rule 35 (statement -> scan_statement .)
    BREAK           reduce using rule 35 (statement -> scan_statement .)
    RETURN          reduce using rule 35 (statement -> scan_statement .)
    FLOAT_ID        reduce using rule 35 (statement -> scan_statement .)
    INT_ID          reduce using rule 35 (statement -> scan_statement .)
    CHAR_ID         reduce using rule 35 (statement -> scan_statement .)
    STR_ID          reduce using rule 35 (statement -> scan_statement .)
    INC             reduce using rule 35 (statement -> scan_statement .)
    DEC             reduce using rule 35 (statement -> scan_statement .)
    SUB_OP          reduce using rule 35 (statement -> scan_statement .)
    NOT             reduce using rule 35 (statement -> scan_statement .)
    LPAREN          reduce using rule 35 (statement -> scan_statement .)
    FLOAT_LIT       reduce using rule 35 (statement -> scan_statement .)
    INT_LIT         reduce using rule 35 (statement -> scan_statement .)
    CHAR_LIT        reduce using rule 35 (statement -> scan_statement .)
    STR_LIT         reduce using rule 35 (statement -> scan_statement .)
    SEMI            reduce using rule 35 (statement -> scan_statement .)
    ELSE_IF         reduce using rule 35 (statement -> scan_statement .)
    ELSE            reduce using rule 35 (statement -> scan_statement .)


state 94

    (44) expression_statement -> expression_opt . SEMI

    SEMI            shift and go to state 150


state 95

    (18) declarator -> LPAREN . declarator RPAREN
    (112) primary_expression -> LPAREN . expression RPAREN
    (17) declarator -> . identifier
    (18) declarator -> . LPAREN declarator RPAREN
    (19) declarator -> . declarator LBRACKET constant_expression_opt RBRACKET
    (65) expression -> . assignment_expression
    (66) expression -> . expression COMMA assignment_expression
    (115) identifier -> . FLOAT_ID
    (116) identifier -> . INT_ID
    (117) identifier -> . CHAR_ID
    (118) identifier -> . STR_ID
    (67) assignment_expression -> . conditional_expression
    (68) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression COND_OP expression COLON conditional_expression
    (99) unary_expression -> . postfix_expression
    (100) unary_expression -> . INC unary_expression
    (101) unary_expression -> . DEC unary_expression
    (102) unary_expression -> . SUB_OP add_expression
    (103) unary_expression -> . NOT logical_or_expression
    (80) logical_or_expression -> . logical_and_expression
    (81) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (104) postfix_expression -> . primary_expression
    (105) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (106) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (107) postfix_expression -> . postfix_expression LPAREN RPAREN
    (108) postfix_expression -> . postfix_expression INC
    (109) postfix_expression -> . postfix_expression DEC
    (82) logical_and_expression -> . equality_expression
    (83) logical_and_expression -> . logical_and_expression AND equality_expression
    (110) primary_expression -> . identifier
    (111) primary_expression -> . constant
    (112) primary_expression -> . LPAREN expression RPAREN
    (84) equality_expression -> . relational_expression
    (85) equality_expression -> . equality_expression EQ relational_expression
    (86) equality_expression -> . equality_expression NEQ relational_expression
    (119) constant -> . FLOAT_LIT
    (120) constant -> . INT_LIT
    (121) constant -> . CHAR_LIT
    (122) constant -> . STR_LIT
    (87) relational_expression -> . add_expression
    (88) relational_expression -> . relational_expression LT add_expression
    (89) relational_expression -> . relational_expression GT add_expression
    (90) relational_expression -> . relational_expression LE add_expression
    (91) relational_expression -> . relational_expression GE add_expression
    (92) add_expression -> . mult_expression
    (93) add_expression -> . add_expression ADD_OP mult_expression
    (94) add_expression -> . add_expression SUB_OP mult_expression
    (95) mult_expression -> . unary_expression
    (96) mult_expression -> . mult_expression MULT_OP unary_expression
    (97) mult_expression -> . mult_expression DIV_OP unary_expression
    (98) mult_expression -> . mult_expression MOD_OP unary_expression

    LPAREN          shift and go to state 95
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 25
    CHAR_ID         shift and go to state 7
    STR_ID          shift and go to state 13
    INC             shift and go to state 33
    DEC             shift and go to state 3
    SUB_OP          shift and go to state 28
    NOT             shift and go to state 31
    FLOAT_LIT       shift and go to state 27
    INT_LIT         shift and go to state 29
    CHAR_LIT        shift and go to state 6
    STR_LIT         shift and go to state 4

    constant                       shift and go to state 1
    assignment_expression          shift and go to state 59
    unary_expression               shift and go to state 2
    relational_expression          shift and go to state 11
    add_expression                 shift and go to state 22
    declarator                     shift and go to state 151
    postfix_expression             shift and go to state 9
    conditional_expression         shift and go to state 30
    mult_expression                shift and go to state 18
    logical_and_expression         shift and go to state 21
    identifier                     shift and go to state 152
    expression                     shift and go to state 60
    logical_or_expression          shift and go to state 15
    equality_expression            shift and go to state 23
    primary_expression             shift and go to state 19

state 96

    (11) declaration_list -> declaration .

    RBRACE          reduce using rule 11 (declaration_list -> declaration .)
    CASE            reduce using rule 11 (declaration_list -> declaration .)
    DEFAULT         reduce using rule 11 (declaration_list -> declaration .)
    LBRACE          reduce using rule 11 (declaration_list -> declaration .)
    PRINT           reduce using rule 11 (declaration_list -> declaration .)
    SCAN            reduce using rule 11 (declaration_list -> declaration .)
    IF              reduce using rule 11 (declaration_list -> declaration .)
    SWITCH          reduce using rule 11 (declaration_list -> declaration .)
    WHILE           reduce using rule 11 (declaration_list -> declaration .)
    FOR             reduce using rule 11 (declaration_list -> declaration .)
    DO              reduce using rule 11 (declaration_list -> declaration .)
    CONTINUE        reduce using rule 11 (declaration_list -> declaration .)
    BREAK           reduce using rule 11 (declaration_list -> declaration .)
    RETURN          reduce using rule 11 (declaration_list -> declaration .)
    FLOAT_ID        reduce using rule 11 (declaration_list -> declaration .)
    INT_ID          reduce using rule 11 (declaration_list -> declaration .)
    CHAR_ID         reduce using rule 11 (declaration_list -> declaration .)
    STR_ID          reduce using rule 11 (declaration_list -> declaration .)
    LPAREN          reduce using rule 11 (declaration_list -> declaration .)
    INC             reduce using rule 11 (declaration_list -> declaration .)
    DEC             reduce using rule 11 (declaration_list -> declaration .)
    SUB_OP          reduce using rule 11 (declaration_list -> declaration .)
    NOT             reduce using rule 11 (declaration_list -> declaration .)
    FLOAT_LIT       reduce using rule 11 (declaration_list -> declaration .)
    INT_LIT         reduce using rule 11 (declaration_list -> declaration .)
    CHAR_LIT        reduce using rule 11 (declaration_list -> declaration .)
    STR_LIT         reduce using rule 11 (declaration_list -> declaration .)
    SEMI            reduce using rule 11 (declaration_list -> declaration .)


state 97

    (15) init_declarator -> declarator .
    (16) init_declarator -> declarator . ASSIGN_OP initializer
    (19) declarator -> declarator . LBRACKET constant_expression_opt RBRACKET

    SEMI            reduce using rule 15 (init_declarator -> declarator .)
    COMMA           reduce using rule 15 (init_declarator -> declarator .)
    ASSIGN_OP       shift and go to state 154
    LBRACKET        shift and go to state 153


state 98

    (51) selection_statement -> IF . LPAREN expression RPAREN statement
    (52) selection_statement -> IF . LPAREN expression RPAREN statement ELSE statement
    (53) selection_statement -> IF . LPAREN expression RPAREN statement else_if_statement ELSE statement

    LPAREN          shift and go to state 155


state 99

    (38) statement -> jump_statement .

    RBRACE          reduce using rule 38 (statement -> jump_statement .)
    CASE            reduce using rule 38 (statement -> jump_statement .)
    DEFAULT         reduce using rule 38 (statement -> jump_statement .)
    LBRACE          reduce using rule 38 (statement -> jump_statement .)
    PRINT           reduce using rule 38 (statement -> jump_statement .)
    SCAN            reduce using rule 38 (statement -> jump_statement .)
    IF              reduce using rule 38 (statement -> jump_statement .)
    SWITCH          reduce using rule 38 (statement -> jump_statement .)
    WHILE           reduce using rule 38 (statement -> jump_statement .)
    FOR             reduce using rule 38 (statement -> jump_statement .)
    DO              reduce using rule 38 (statement -> jump_statement .)
    CONTINUE        reduce using rule 38 (statement -> jump_statement .)
    BREAK           reduce using rule 38 (statement -> jump_statement .)
    RETURN          reduce using rule 38 (statement -> jump_statement .)
    FLOAT_ID        reduce using rule 38 (statement -> jump_statement .)
    INT_ID          reduce using rule 38 (statement -> jump_statement .)
    CHAR_ID         reduce using rule 38 (statement -> jump_statement .)
    STR_ID          reduce using rule 38 (statement -> jump_statement .)
    INC             reduce using rule 38 (statement -> jump_statement .)
    DEC             reduce using rule 38 (statement -> jump_statement .)
    SUB_OP          reduce using rule 38 (statement -> jump_statement .)
    NOT             reduce using rule 38 (statement -> jump_statement .)
    LPAREN          reduce using rule 38 (statement -> jump_statement .)
    FLOAT_LIT       reduce using rule 38 (statement -> jump_statement .)
    INT_LIT         reduce using rule 38 (statement -> jump_statement .)
    CHAR_LIT        reduce using rule 38 (statement -> jump_statement .)
    STR_LIT         reduce using rule 38 (statement -> jump_statement .)
    SEMI            reduce using rule 38 (statement -> jump_statement .)
    ELSE_IF         reduce using rule 38 (statement -> jump_statement .)
    ELSE            reduce using rule 38 (statement -> jump_statement .)


state 100

    (31) statement -> labeled_statement .

    RBRACE          reduce using rule 31 (statement -> labeled_statement .)
    CASE            reduce using rule 31 (statement -> labeled_statement .)
    DEFAULT         reduce using rule 31 (statement -> labeled_statement .)
    LBRACE          reduce using rule 31 (statement -> labeled_statement .)
    PRINT           reduce using rule 31 (statement -> labeled_statement .)
    SCAN            reduce using rule 31 (statement -> labeled_statement .)
    IF              reduce using rule 31 (statement -> labeled_statement .)
    SWITCH          reduce using rule 31 (statement -> labeled_statement .)
    WHILE           reduce using rule 31 (statement -> labeled_statement .)
    FOR             reduce using rule 31 (statement -> labeled_statement .)
    DO              reduce using rule 31 (statement -> labeled_statement .)
    CONTINUE        reduce using rule 31 (statement -> labeled_statement .)
    BREAK           reduce using rule 31 (statement -> labeled_statement .)
    RETURN          reduce using rule 31 (statement -> labeled_statement .)
    FLOAT_ID        reduce using rule 31 (statement -> labeled_statement .)
    INT_ID          reduce using rule 31 (statement -> labeled_statement .)
    CHAR_ID         reduce using rule 31 (statement -> labeled_statement .)
    STR_ID          reduce using rule 31 (statement -> labeled_statement .)
    INC             reduce using rule 31 (statement -> labeled_statement .)
    DEC             reduce using rule 31 (statement -> labeled_statement .)
    SUB_OP          reduce using rule 31 (statement -> labeled_statement .)
    NOT             reduce using rule 31 (statement -> labeled_statement .)
    LPAREN          reduce using rule 31 (statement -> labeled_statement .)
    FLOAT_LIT       reduce using rule 31 (statement -> labeled_statement .)
    INT_LIT         reduce using rule 31 (statement -> labeled_statement .)
    CHAR_LIT        reduce using rule 31 (statement -> labeled_statement .)
    STR_LIT         reduce using rule 31 (statement -> labeled_statement .)
    SEMI            reduce using rule 31 (statement -> labeled_statement .)
    ELSE_IF         reduce using rule 31 (statement -> labeled_statement .)
    ELSE            reduce using rule 31 (statement -> labeled_statement .)


state 101

    (45) compound_statement -> LBRACE declaration_list . statement_list RBRACE
    (47) compound_statement -> LBRACE declaration_list . RBRACE
    (12) declaration_list -> declaration_list . declaration
    (49) statement_list -> . statement
    (50) statement_list -> . statement_list statement
    (10) declaration -> . init_declarator_list SEMI
    (31) statement -> . labeled_statement
    (32) statement -> . expression_statement
    (33) statement -> . compound_statement
    (34) statement -> . print_statement
    (35) statement -> . scan_statement
    (36) statement -> . selection_statement
    (37) statement -> . iteration_statement
    (38) statement -> . jump_statement
    (13) init_declarator_list -> . init_declarator
    (14) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (41) labeled_statement -> . identifier COLON statement
    (42) labeled_statement -> . CASE constant_expression COLON statement
    (43) labeled_statement -> . DEFAULT COLON statement
    (44) expression_statement -> . expression_opt SEMI
    (45) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (46) compound_statement -> . LBRACE statement_list RBRACE
    (47) compound_statement -> . LBRACE declaration_list RBRACE
    (48) compound_statement -> . LBRACE RBRACE
    (39) print_statement -> . PRINT LPAREN assignment_expression RPAREN
    (40) scan_statement -> . SCAN LPAREN identifier RPAREN
    (51) selection_statement -> . IF LPAREN expression RPAREN statement
    (52) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (53) selection_statement -> . IF LPAREN expression RPAREN statement else_if_statement ELSE statement
    (54) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (57) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (58) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (59) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (60) jump_statement -> . CONTINUE SEMI
    (61) jump_statement -> . BREAK SEMI
    (62) jump_statement -> . RETURN expression_opt SEMI
    (15) init_declarator -> . declarator
    (16) init_declarator -> . declarator ASSIGN_OP initializer
    (115) identifier -> . FLOAT_ID
    (116) identifier -> . INT_ID
    (117) identifier -> . CHAR_ID
    (118) identifier -> . STR_ID
    (63) expression_opt -> . empty
    (64) expression_opt -> . expression
    (17) declarator -> . identifier
    (18) declarator -> . LPAREN declarator RPAREN
    (19) declarator -> . declarator LBRACKET constant_expression_opt RBRACKET
    (123) empty -> .
    (65) expression -> . assignment_expression
    (66) expression -> . expression COMMA assignment_expression
    (67) assignment_expression -> . conditional_expression
    (68) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression COND_OP expression COLON conditional_expression
    (99) unary_expression -> . postfix_expression
    (100) unary_expression -> . INC unary_expression
    (101) unary_expression -> . DEC unary_expression
    (102) unary_expression -> . SUB_OP add_expression
    (103) unary_expression -> . NOT logical_or_expression
    (80) logical_or_expression -> . logical_and_expression
    (81) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (104) postfix_expression -> . primary_expression
    (105) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (106) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (107) postfix_expression -> . postfix_expression LPAREN RPAREN
    (108) postfix_expression -> . postfix_expression INC
    (109) postfix_expression -> . postfix_expression DEC
    (82) logical_and_expression -> . equality_expression
    (83) logical_and_expression -> . logical_and_expression AND equality_expression
    (110) primary_expression -> . identifier
    (111) primary_expression -> . constant
    (112) primary_expression -> . LPAREN expression RPAREN
    (84) equality_expression -> . relational_expression
    (85) equality_expression -> . equality_expression EQ relational_expression
    (86) equality_expression -> . equality_expression NEQ relational_expression
    (119) constant -> . FLOAT_LIT
    (120) constant -> . INT_LIT
    (121) constant -> . CHAR_LIT
    (122) constant -> . STR_LIT
    (87) relational_expression -> . add_expression
    (88) relational_expression -> . relational_expression LT add_expression
    (89) relational_expression -> . relational_expression GT add_expression
    (90) relational_expression -> . relational_expression LE add_expression
    (91) relational_expression -> . relational_expression GE add_expression
    (92) add_expression -> . mult_expression
    (93) add_expression -> . add_expression ADD_OP mult_expression
    (94) add_expression -> . add_expression SUB_OP mult_expression
    (95) mult_expression -> . unary_expression
    (96) mult_expression -> . mult_expression MULT_OP unary_expression
    (97) mult_expression -> . mult_expression DIV_OP unary_expression
    (98) mult_expression -> . mult_expression MOD_OP unary_expression

    RBRACE          shift and go to state 156
    CASE            shift and go to state 86
    DEFAULT         shift and go to state 80
    LBRACE          shift and go to state 43
    PRINT           shift and go to state 82
    SCAN            shift and go to state 79
    IF              shift and go to state 98
    SWITCH          shift and go to state 89
    WHILE           shift and go to state 83
    FOR             shift and go to state 92
    DO              shift and go to state 77
    CONTINUE        shift and go to state 103
    BREAK           shift and go to state 102
    RETURN          shift and go to state 78
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 25
    CHAR_ID         shift and go to state 7
    STR_ID          shift and go to state 13
    LPAREN          shift and go to state 95
    SEMI            reduce using rule 123 (empty -> .)
    INC             shift and go to state 33
    DEC             shift and go to state 3
    SUB_OP          shift and go to state 28
    NOT             shift and go to state 31
    FLOAT_LIT       shift and go to state 27
    INT_LIT         shift and go to state 29
    CHAR_LIT        shift and go to state 6
    STR_LIT         shift and go to state 4

    expression_statement           shift and go to state 76
    constant                       shift and go to state 1
    unary_expression               shift and go to state 2
    conditional_expression         shift and go to state 30
    print_statement                shift and go to state 84
    iteration_statement            shift and go to state 85
    compound_statement             shift and go to state 87
    selection_statement            shift and go to state 88
    postfix_expression             shift and go to state 9
    relational_expression          shift and go to state 11
    statement                      shift and go to state 90
    logical_or_expression          shift and go to state 15
    assignment_expression          shift and go to state 59
    scan_statement                 shift and go to state 93
    mult_expression                shift and go to state 18
    expression_opt                 shift and go to state 94
    primary_expression             shift and go to state 19
    declaration                    shift and go to state 157
    logical_and_expression         shift and go to state 21
    init_declarator_list           shift and go to state 81
    add_expression                 shift and go to state 22
    equality_expression            shift and go to state 23
    jump_statement                 shift and go to state 99
    labeled_statement              shift and go to state 100
    empty                          shift and go to state 104
    init_declarator                shift and go to state 105
    statement_list                 shift and go to state 158
    identifier                     shift and go to state 107
    expression                     shift and go to state 108
    declarator                     shift and go to state 97

state 102

    (61) jump_statement -> BREAK . SEMI

    SEMI            shift and go to state 159


state 103

    (60) jump_statement -> CONTINUE . SEMI

    SEMI            shift and go to state 160


state 104

    (63) expression_opt -> empty .

    SEMI            reduce using rule 63 (expression_opt -> empty .)
    RPAREN          reduce using rule 63 (expression_opt -> empty .)


state 105

    (13) init_declarator_list -> init_declarator .

    SEMI            reduce using rule 13 (init_declarator_list -> init_declarator .)
    COMMA           reduce using rule 13 (init_declarator_list -> init_declarator .)


state 106

    (46) compound_statement -> LBRACE statement_list . RBRACE
    (50) statement_list -> statement_list . statement
    (31) statement -> . labeled_statement
    (32) statement -> . expression_statement
    (33) statement -> . compound_statement
    (34) statement -> . print_statement
    (35) statement -> . scan_statement
    (36) statement -> . selection_statement
    (37) statement -> . iteration_statement
    (38) statement -> . jump_statement
    (41) labeled_statement -> . identifier COLON statement
    (42) labeled_statement -> . CASE constant_expression COLON statement
    (43) labeled_statement -> . DEFAULT COLON statement
    (44) expression_statement -> . expression_opt SEMI
    (45) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (46) compound_statement -> . LBRACE statement_list RBRACE
    (47) compound_statement -> . LBRACE declaration_list RBRACE
    (48) compound_statement -> . LBRACE RBRACE
    (39) print_statement -> . PRINT LPAREN assignment_expression RPAREN
    (40) scan_statement -> . SCAN LPAREN identifier RPAREN
    (51) selection_statement -> . IF LPAREN expression RPAREN statement
    (52) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (53) selection_statement -> . IF LPAREN expression RPAREN statement else_if_statement ELSE statement
    (54) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (57) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (58) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (59) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (60) jump_statement -> . CONTINUE SEMI
    (61) jump_statement -> . BREAK SEMI
    (62) jump_statement -> . RETURN expression_opt SEMI
    (115) identifier -> . FLOAT_ID
    (116) identifier -> . INT_ID
    (117) identifier -> . CHAR_ID
    (118) identifier -> . STR_ID
    (63) expression_opt -> . empty
    (64) expression_opt -> . expression
    (123) empty -> .
    (65) expression -> . assignment_expression
    (66) expression -> . expression COMMA assignment_expression
    (67) assignment_expression -> . conditional_expression
    (68) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression COND_OP expression COLON conditional_expression
    (99) unary_expression -> . postfix_expression
    (100) unary_expression -> . INC unary_expression
    (101) unary_expression -> . DEC unary_expression
    (102) unary_expression -> . SUB_OP add_expression
    (103) unary_expression -> . NOT logical_or_expression
    (80) logical_or_expression -> . logical_and_expression
    (81) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (104) postfix_expression -> . primary_expression
    (105) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (106) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (107) postfix_expression -> . postfix_expression LPAREN RPAREN
    (108) postfix_expression -> . postfix_expression INC
    (109) postfix_expression -> . postfix_expression DEC
    (82) logical_and_expression -> . equality_expression
    (83) logical_and_expression -> . logical_and_expression AND equality_expression
    (110) primary_expression -> . identifier
    (111) primary_expression -> . constant
    (112) primary_expression -> . LPAREN expression RPAREN
    (84) equality_expression -> . relational_expression
    (85) equality_expression -> . equality_expression EQ relational_expression
    (86) equality_expression -> . equality_expression NEQ relational_expression
    (119) constant -> . FLOAT_LIT
    (120) constant -> . INT_LIT
    (121) constant -> . CHAR_LIT
    (122) constant -> . STR_LIT
    (87) relational_expression -> . add_expression
    (88) relational_expression -> . relational_expression LT add_expression
    (89) relational_expression -> . relational_expression GT add_expression
    (90) relational_expression -> . relational_expression LE add_expression
    (91) relational_expression -> . relational_expression GE add_expression
    (92) add_expression -> . mult_expression
    (93) add_expression -> . add_expression ADD_OP mult_expression
    (94) add_expression -> . add_expression SUB_OP mult_expression
    (95) mult_expression -> . unary_expression
    (96) mult_expression -> . mult_expression MULT_OP unary_expression
    (97) mult_expression -> . mult_expression DIV_OP unary_expression
    (98) mult_expression -> . mult_expression MOD_OP unary_expression

    RBRACE          shift and go to state 162
    CASE            shift and go to state 86
    DEFAULT         shift and go to state 80
    LBRACE          shift and go to state 43
    PRINT           shift and go to state 82
    SCAN            shift and go to state 79
    IF              shift and go to state 98
    SWITCH          shift and go to state 89
    WHILE           shift and go to state 83
    FOR             shift and go to state 92
    DO              shift and go to state 77
    CONTINUE        shift and go to state 103
    BREAK           shift and go to state 102
    RETURN          shift and go to state 78
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 25
    CHAR_ID         shift and go to state 7
    STR_ID          shift and go to state 13
    SEMI            reduce using rule 123 (empty -> .)
    INC             shift and go to state 33
    DEC             shift and go to state 3
    SUB_OP          shift and go to state 28
    NOT             shift and go to state 31
    LPAREN          shift and go to state 20
    FLOAT_LIT       shift and go to state 27
    INT_LIT         shift and go to state 29
    CHAR_LIT        shift and go to state 6
    STR_LIT         shift and go to state 4

    expression_statement           shift and go to state 76
    constant                       shift and go to state 1
    unary_expression               shift and go to state 2
    print_statement                shift and go to state 84
    iteration_statement            shift and go to state 85
    compound_statement             shift and go to state 87
    selection_statement            shift and go to state 88
    postfix_expression             shift and go to state 9
    relational_expression          shift and go to state 11
    statement                      shift and go to state 161
    logical_or_expression          shift and go to state 15
    empty                          shift and go to state 104
    assignment_expression          shift and go to state 59
    scan_statement                 shift and go to state 93
    mult_expression                shift and go to state 18
    expression_opt                 shift and go to state 94
    primary_expression             shift and go to state 19
    logical_and_expression         shift and go to state 21
    add_expression                 shift and go to state 22
    equality_expression            shift and go to state 23
    jump_statement                 shift and go to state 99
    labeled_statement              shift and go to state 100
    conditional_expression         shift and go to state 30
    identifier                     shift and go to state 138
    expression                     shift and go to state 108

state 107

    (41) labeled_statement -> identifier . COLON statement
    (17) declarator -> identifier .
    (110) primary_expression -> identifier .

  ! reduce/reduce conflict for LBRACKET resolved using rule 17 (declarator -> identifier .)
  ! reduce/reduce conflict for ASSIGN_OP resolved using rule 17 (declarator -> identifier .)
  ! reduce/reduce conflict for COMMA resolved using rule 17 (declarator -> identifier .)
  ! reduce/reduce conflict for SEMI resolved using rule 17 (declarator -> identifier .)
    COLON           shift and go to state 163
    ASSIGN_OP       reduce using rule 17 (declarator -> identifier .)
    LBRACKET        reduce using rule 17 (declarator -> identifier .)
    SEMI            reduce using rule 17 (declarator -> identifier .)
    COMMA           reduce using rule 17 (declarator -> identifier .)
    LPAREN          reduce using rule 110 (primary_expression -> identifier .)
    INC             reduce using rule 110 (primary_expression -> identifier .)
    DEC             reduce using rule 110 (primary_expression -> identifier .)
    ADD_ASSIGN      reduce using rule 110 (primary_expression -> identifier .)
    MIN_ASSIGN      reduce using rule 110 (primary_expression -> identifier .)
    MUL_ASSIGN      reduce using rule 110 (primary_expression -> identifier .)
    DIV_ASSIGN      reduce using rule 110 (primary_expression -> identifier .)
    MOD_ASSIGN      reduce using rule 110 (primary_expression -> identifier .)
    MULT_OP         reduce using rule 110 (primary_expression -> identifier .)
    DIV_OP          reduce using rule 110 (primary_expression -> identifier .)
    MOD_OP          reduce using rule 110 (primary_expression -> identifier .)
    ADD_OP          reduce using rule 110 (primary_expression -> identifier .)
    SUB_OP          reduce using rule 110 (primary_expression -> identifier .)
    LT              reduce using rule 110 (primary_expression -> identifier .)
    GT              reduce using rule 110 (primary_expression -> identifier .)
    LE              reduce using rule 110 (primary_expression -> identifier .)
    GE              reduce using rule 110 (primary_expression -> identifier .)
    EQ              reduce using rule 110 (primary_expression -> identifier .)
    NEQ             reduce using rule 110 (primary_expression -> identifier .)
    OR              reduce using rule 110 (primary_expression -> identifier .)
    AND             reduce using rule 110 (primary_expression -> identifier .)
    COND_OP         reduce using rule 110 (primary_expression -> identifier .)

  ! LBRACKET        [ reduce using rule 110 (primary_expression -> identifier .) ]
  ! ASSIGN_OP       [ reduce using rule 110 (primary_expression -> identifier .) ]
  ! COMMA           [ reduce using rule 110 (primary_expression -> identifier .) ]
  ! SEMI            [ reduce using rule 110 (primary_expression -> identifier .) ]


state 108

    (64) expression_opt -> expression .
    (66) expression -> expression . COMMA assignment_expression

    SEMI            reduce using rule 64 (expression_opt -> expression .)
    RPAREN          reduce using rule 64 (expression_opt -> expression .)
    COMMA           shift and go to state 122


state 109

    (105) postfix_expression -> postfix_expression LBRACKET expression . RBRACKET
    (66) expression -> expression . COMMA assignment_expression

    RBRACKET        shift and go to state 164
    COMMA           shift and go to state 122


state 110

    (107) postfix_expression -> postfix_expression LPAREN RPAREN .

    LBRACKET        reduce using rule 107 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LPAREN          reduce using rule 107 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    INC             reduce using rule 107 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DEC             reduce using rule 107 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ASSIGN_OP       reduce using rule 107 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ADD_ASSIGN      reduce using rule 107 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MIN_ASSIGN      reduce using rule 107 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MUL_ASSIGN      reduce using rule 107 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIV_ASSIGN      reduce using rule 107 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MOD_ASSIGN      reduce using rule 107 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MULT_OP         reduce using rule 107 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIV_OP          reduce using rule 107 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MOD_OP          reduce using rule 107 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ADD_OP          reduce using rule 107 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    SUB_OP          reduce using rule 107 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LT              reduce using rule 107 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GT              reduce using rule 107 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LE              reduce using rule 107 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GE              reduce using rule 107 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQ              reduce using rule 107 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    NEQ             reduce using rule 107 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    OR              reduce using rule 107 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    AND             reduce using rule 107 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    COND_OP         reduce using rule 107 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    NOT             reduce using rule 107 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    FLOAT_ID        reduce using rule 107 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    INT_ID          reduce using rule 107 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    CHAR_ID         reduce using rule 107 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    STR_ID          reduce using rule 107 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    FLOAT_LIT       reduce using rule 107 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    INT_LIT         reduce using rule 107 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    CHAR_LIT        reduce using rule 107 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    STR_LIT         reduce using rule 107 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MAIN            reduce using rule 107 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RPAREN          reduce using rule 107 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    COMMA           reduce using rule 107 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    SEMI            reduce using rule 107 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RBRACKET        reduce using rule 107 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    COLON           reduce using rule 107 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RBRACE          reduce using rule 107 (postfix_expression -> postfix_expression LPAREN RPAREN .)


state 111

    (113) argument_expression_list -> assignment_expression .

    RPAREN          reduce using rule 113 (argument_expression_list -> assignment_expression .)
    COMMA           reduce using rule 113 (argument_expression_list -> assignment_expression .)


state 112

    (106) postfix_expression -> postfix_expression LPAREN argument_expression_list . RPAREN
    (114) argument_expression_list -> argument_expression_list . COMMA assignment_expression

    RPAREN          shift and go to state 165
    COMMA           shift and go to state 166


state 113

    (89) relational_expression -> relational_expression GT add_expression .
    (93) add_expression -> add_expression . ADD_OP mult_expression
    (94) add_expression -> add_expression . SUB_OP mult_expression

  ! shift/reduce conflict for ADD_OP resolved as shift
  ! shift/reduce conflict for SUB_OP resolved as shift
    LT              reduce using rule 89 (relational_expression -> relational_expression GT add_expression .)
    GT              reduce using rule 89 (relational_expression -> relational_expression GT add_expression .)
    LE              reduce using rule 89 (relational_expression -> relational_expression GT add_expression .)
    GE              reduce using rule 89 (relational_expression -> relational_expression GT add_expression .)
    EQ              reduce using rule 89 (relational_expression -> relational_expression GT add_expression .)
    NEQ             reduce using rule 89 (relational_expression -> relational_expression GT add_expression .)
    OR              reduce using rule 89 (relational_expression -> relational_expression GT add_expression .)
    AND             reduce using rule 89 (relational_expression -> relational_expression GT add_expression .)
    COND_OP         reduce using rule 89 (relational_expression -> relational_expression GT add_expression .)
    RPAREN          reduce using rule 89 (relational_expression -> relational_expression GT add_expression .)
    COMMA           reduce using rule 89 (relational_expression -> relational_expression GT add_expression .)
    SEMI            reduce using rule 89 (relational_expression -> relational_expression GT add_expression .)
    INC             reduce using rule 89 (relational_expression -> relational_expression GT add_expression .)
    DEC             reduce using rule 89 (relational_expression -> relational_expression GT add_expression .)
    NOT             reduce using rule 89 (relational_expression -> relational_expression GT add_expression .)
    LPAREN          reduce using rule 89 (relational_expression -> relational_expression GT add_expression .)
    FLOAT_ID        reduce using rule 89 (relational_expression -> relational_expression GT add_expression .)
    INT_ID          reduce using rule 89 (relational_expression -> relational_expression GT add_expression .)
    CHAR_ID         reduce using rule 89 (relational_expression -> relational_expression GT add_expression .)
    STR_ID          reduce using rule 89 (relational_expression -> relational_expression GT add_expression .)
    FLOAT_LIT       reduce using rule 89 (relational_expression -> relational_expression GT add_expression .)
    INT_LIT         reduce using rule 89 (relational_expression -> relational_expression GT add_expression .)
    CHAR_LIT        reduce using rule 89 (relational_expression -> relational_expression GT add_expression .)
    STR_LIT         reduce using rule 89 (relational_expression -> relational_expression GT add_expression .)
    MAIN            reduce using rule 89 (relational_expression -> relational_expression GT add_expression .)
    COLON           reduce using rule 89 (relational_expression -> relational_expression GT add_expression .)
    ASSIGN_OP       reduce using rule 89 (relational_expression -> relational_expression GT add_expression .)
    ADD_ASSIGN      reduce using rule 89 (relational_expression -> relational_expression GT add_expression .)
    MIN_ASSIGN      reduce using rule 89 (relational_expression -> relational_expression GT add_expression .)
    MUL_ASSIGN      reduce using rule 89 (relational_expression -> relational_expression GT add_expression .)
    DIV_ASSIGN      reduce using rule 89 (relational_expression -> relational_expression GT add_expression .)
    MOD_ASSIGN      reduce using rule 89 (relational_expression -> relational_expression GT add_expression .)
    MULT_OP         reduce using rule 89 (relational_expression -> relational_expression GT add_expression .)
    DIV_OP          reduce using rule 89 (relational_expression -> relational_expression GT add_expression .)
    MOD_OP          reduce using rule 89 (relational_expression -> relational_expression GT add_expression .)
    RBRACKET        reduce using rule 89 (relational_expression -> relational_expression GT add_expression .)
    RBRACE          reduce using rule 89 (relational_expression -> relational_expression GT add_expression .)
    ADD_OP          shift and go to state 64
    SUB_OP          shift and go to state 63

  ! SUB_OP          [ reduce using rule 89 (relational_expression -> relational_expression GT add_expression .) ]
  ! ADD_OP          [ reduce using rule 89 (relational_expression -> relational_expression GT add_expression .) ]


state 114

    (88) relational_expression -> relational_expression LT add_expression .
    (93) add_expression -> add_expression . ADD_OP mult_expression
    (94) add_expression -> add_expression . SUB_OP mult_expression

  ! shift/reduce conflict for ADD_OP resolved as shift
  ! shift/reduce conflict for SUB_OP resolved as shift
    LT              reduce using rule 88 (relational_expression -> relational_expression LT add_expression .)
    GT              reduce using rule 88 (relational_expression -> relational_expression LT add_expression .)
    LE              reduce using rule 88 (relational_expression -> relational_expression LT add_expression .)
    GE              reduce using rule 88 (relational_expression -> relational_expression LT add_expression .)
    EQ              reduce using rule 88 (relational_expression -> relational_expression LT add_expression .)
    NEQ             reduce using rule 88 (relational_expression -> relational_expression LT add_expression .)
    OR              reduce using rule 88 (relational_expression -> relational_expression LT add_expression .)
    AND             reduce using rule 88 (relational_expression -> relational_expression LT add_expression .)
    COND_OP         reduce using rule 88 (relational_expression -> relational_expression LT add_expression .)
    RPAREN          reduce using rule 88 (relational_expression -> relational_expression LT add_expression .)
    COMMA           reduce using rule 88 (relational_expression -> relational_expression LT add_expression .)
    SEMI            reduce using rule 88 (relational_expression -> relational_expression LT add_expression .)
    INC             reduce using rule 88 (relational_expression -> relational_expression LT add_expression .)
    DEC             reduce using rule 88 (relational_expression -> relational_expression LT add_expression .)
    NOT             reduce using rule 88 (relational_expression -> relational_expression LT add_expression .)
    LPAREN          reduce using rule 88 (relational_expression -> relational_expression LT add_expression .)
    FLOAT_ID        reduce using rule 88 (relational_expression -> relational_expression LT add_expression .)
    INT_ID          reduce using rule 88 (relational_expression -> relational_expression LT add_expression .)
    CHAR_ID         reduce using rule 88 (relational_expression -> relational_expression LT add_expression .)
    STR_ID          reduce using rule 88 (relational_expression -> relational_expression LT add_expression .)
    FLOAT_LIT       reduce using rule 88 (relational_expression -> relational_expression LT add_expression .)
    INT_LIT         reduce using rule 88 (relational_expression -> relational_expression LT add_expression .)
    CHAR_LIT        reduce using rule 88 (relational_expression -> relational_expression LT add_expression .)
    STR_LIT         reduce using rule 88 (relational_expression -> relational_expression LT add_expression .)
    MAIN            reduce using rule 88 (relational_expression -> relational_expression LT add_expression .)
    COLON           reduce using rule 88 (relational_expression -> relational_expression LT add_expression .)
    ASSIGN_OP       reduce using rule 88 (relational_expression -> relational_expression LT add_expression .)
    ADD_ASSIGN      reduce using rule 88 (relational_expression -> relational_expression LT add_expression .)
    MIN_ASSIGN      reduce using rule 88 (relational_expression -> relational_expression LT add_expression .)
    MUL_ASSIGN      reduce using rule 88 (relational_expression -> relational_expression LT add_expression .)
    DIV_ASSIGN      reduce using rule 88 (relational_expression -> relational_expression LT add_expression .)
    MOD_ASSIGN      reduce using rule 88 (relational_expression -> relational_expression LT add_expression .)
    MULT_OP         reduce using rule 88 (relational_expression -> relational_expression LT add_expression .)
    DIV_OP          reduce using rule 88 (relational_expression -> relational_expression LT add_expression .)
    MOD_OP          reduce using rule 88 (relational_expression -> relational_expression LT add_expression .)
    RBRACKET        reduce using rule 88 (relational_expression -> relational_expression LT add_expression .)
    RBRACE          reduce using rule 88 (relational_expression -> relational_expression LT add_expression .)
    ADD_OP          shift and go to state 64
    SUB_OP          shift and go to state 63

  ! SUB_OP          [ reduce using rule 88 (relational_expression -> relational_expression LT add_expression .) ]
  ! ADD_OP          [ reduce using rule 88 (relational_expression -> relational_expression LT add_expression .) ]


state 115

    (91) relational_expression -> relational_expression GE add_expression .
    (93) add_expression -> add_expression . ADD_OP mult_expression
    (94) add_expression -> add_expression . SUB_OP mult_expression

  ! shift/reduce conflict for ADD_OP resolved as shift
  ! shift/reduce conflict for SUB_OP resolved as shift
    LT              reduce using rule 91 (relational_expression -> relational_expression GE add_expression .)
    GT              reduce using rule 91 (relational_expression -> relational_expression GE add_expression .)
    LE              reduce using rule 91 (relational_expression -> relational_expression GE add_expression .)
    GE              reduce using rule 91 (relational_expression -> relational_expression GE add_expression .)
    EQ              reduce using rule 91 (relational_expression -> relational_expression GE add_expression .)
    NEQ             reduce using rule 91 (relational_expression -> relational_expression GE add_expression .)
    OR              reduce using rule 91 (relational_expression -> relational_expression GE add_expression .)
    AND             reduce using rule 91 (relational_expression -> relational_expression GE add_expression .)
    COND_OP         reduce using rule 91 (relational_expression -> relational_expression GE add_expression .)
    RPAREN          reduce using rule 91 (relational_expression -> relational_expression GE add_expression .)
    COMMA           reduce using rule 91 (relational_expression -> relational_expression GE add_expression .)
    SEMI            reduce using rule 91 (relational_expression -> relational_expression GE add_expression .)
    INC             reduce using rule 91 (relational_expression -> relational_expression GE add_expression .)
    DEC             reduce using rule 91 (relational_expression -> relational_expression GE add_expression .)
    NOT             reduce using rule 91 (relational_expression -> relational_expression GE add_expression .)
    LPAREN          reduce using rule 91 (relational_expression -> relational_expression GE add_expression .)
    FLOAT_ID        reduce using rule 91 (relational_expression -> relational_expression GE add_expression .)
    INT_ID          reduce using rule 91 (relational_expression -> relational_expression GE add_expression .)
    CHAR_ID         reduce using rule 91 (relational_expression -> relational_expression GE add_expression .)
    STR_ID          reduce using rule 91 (relational_expression -> relational_expression GE add_expression .)
    FLOAT_LIT       reduce using rule 91 (relational_expression -> relational_expression GE add_expression .)
    INT_LIT         reduce using rule 91 (relational_expression -> relational_expression GE add_expression .)
    CHAR_LIT        reduce using rule 91 (relational_expression -> relational_expression GE add_expression .)
    STR_LIT         reduce using rule 91 (relational_expression -> relational_expression GE add_expression .)
    MAIN            reduce using rule 91 (relational_expression -> relational_expression GE add_expression .)
    COLON           reduce using rule 91 (relational_expression -> relational_expression GE add_expression .)
    ASSIGN_OP       reduce using rule 91 (relational_expression -> relational_expression GE add_expression .)
    ADD_ASSIGN      reduce using rule 91 (relational_expression -> relational_expression GE add_expression .)
    MIN_ASSIGN      reduce using rule 91 (relational_expression -> relational_expression GE add_expression .)
    MUL_ASSIGN      reduce using rule 91 (relational_expression -> relational_expression GE add_expression .)
    DIV_ASSIGN      reduce using rule 91 (relational_expression -> relational_expression GE add_expression .)
    MOD_ASSIGN      reduce using rule 91 (relational_expression -> relational_expression GE add_expression .)
    MULT_OP         reduce using rule 91 (relational_expression -> relational_expression GE add_expression .)
    DIV_OP          reduce using rule 91 (relational_expression -> relational_expression GE add_expression .)
    MOD_OP          reduce using rule 91 (relational_expression -> relational_expression GE add_expression .)
    RBRACKET        reduce using rule 91 (relational_expression -> relational_expression GE add_expression .)
    RBRACE          reduce using rule 91 (relational_expression -> relational_expression GE add_expression .)
    ADD_OP          shift and go to state 64
    SUB_OP          shift and go to state 63

  ! SUB_OP          [ reduce using rule 91 (relational_expression -> relational_expression GE add_expression .) ]
  ! ADD_OP          [ reduce using rule 91 (relational_expression -> relational_expression GE add_expression .) ]


state 116

    (90) relational_expression -> relational_expression LE add_expression .
    (93) add_expression -> add_expression . ADD_OP mult_expression
    (94) add_expression -> add_expression . SUB_OP mult_expression

  ! shift/reduce conflict for ADD_OP resolved as shift
  ! shift/reduce conflict for SUB_OP resolved as shift
    LT              reduce using rule 90 (relational_expression -> relational_expression LE add_expression .)
    GT              reduce using rule 90 (relational_expression -> relational_expression LE add_expression .)
    LE              reduce using rule 90 (relational_expression -> relational_expression LE add_expression .)
    GE              reduce using rule 90 (relational_expression -> relational_expression LE add_expression .)
    EQ              reduce using rule 90 (relational_expression -> relational_expression LE add_expression .)
    NEQ             reduce using rule 90 (relational_expression -> relational_expression LE add_expression .)
    OR              reduce using rule 90 (relational_expression -> relational_expression LE add_expression .)
    AND             reduce using rule 90 (relational_expression -> relational_expression LE add_expression .)
    COND_OP         reduce using rule 90 (relational_expression -> relational_expression LE add_expression .)
    RPAREN          reduce using rule 90 (relational_expression -> relational_expression LE add_expression .)
    COMMA           reduce using rule 90 (relational_expression -> relational_expression LE add_expression .)
    SEMI            reduce using rule 90 (relational_expression -> relational_expression LE add_expression .)
    INC             reduce using rule 90 (relational_expression -> relational_expression LE add_expression .)
    DEC             reduce using rule 90 (relational_expression -> relational_expression LE add_expression .)
    NOT             reduce using rule 90 (relational_expression -> relational_expression LE add_expression .)
    LPAREN          reduce using rule 90 (relational_expression -> relational_expression LE add_expression .)
    FLOAT_ID        reduce using rule 90 (relational_expression -> relational_expression LE add_expression .)
    INT_ID          reduce using rule 90 (relational_expression -> relational_expression LE add_expression .)
    CHAR_ID         reduce using rule 90 (relational_expression -> relational_expression LE add_expression .)
    STR_ID          reduce using rule 90 (relational_expression -> relational_expression LE add_expression .)
    FLOAT_LIT       reduce using rule 90 (relational_expression -> relational_expression LE add_expression .)
    INT_LIT         reduce using rule 90 (relational_expression -> relational_expression LE add_expression .)
    CHAR_LIT        reduce using rule 90 (relational_expression -> relational_expression LE add_expression .)
    STR_LIT         reduce using rule 90 (relational_expression -> relational_expression LE add_expression .)
    MAIN            reduce using rule 90 (relational_expression -> relational_expression LE add_expression .)
    COLON           reduce using rule 90 (relational_expression -> relational_expression LE add_expression .)
    ASSIGN_OP       reduce using rule 90 (relational_expression -> relational_expression LE add_expression .)
    ADD_ASSIGN      reduce using rule 90 (relational_expression -> relational_expression LE add_expression .)
    MIN_ASSIGN      reduce using rule 90 (relational_expression -> relational_expression LE add_expression .)
    MUL_ASSIGN      reduce using rule 90 (relational_expression -> relational_expression LE add_expression .)
    DIV_ASSIGN      reduce using rule 90 (relational_expression -> relational_expression LE add_expression .)
    MOD_ASSIGN      reduce using rule 90 (relational_expression -> relational_expression LE add_expression .)
    MULT_OP         reduce using rule 90 (relational_expression -> relational_expression LE add_expression .)
    DIV_OP          reduce using rule 90 (relational_expression -> relational_expression LE add_expression .)
    MOD_OP          reduce using rule 90 (relational_expression -> relational_expression LE add_expression .)
    RBRACKET        reduce using rule 90 (relational_expression -> relational_expression LE add_expression .)
    RBRACE          reduce using rule 90 (relational_expression -> relational_expression LE add_expression .)
    ADD_OP          shift and go to state 64
    SUB_OP          shift and go to state 63

  ! SUB_OP          [ reduce using rule 90 (relational_expression -> relational_expression LE add_expression .) ]
  ! ADD_OP          [ reduce using rule 90 (relational_expression -> relational_expression LE add_expression .) ]


state 117

    (76) conditional_expression -> logical_or_expression COND_OP expression . COLON conditional_expression
    (66) expression -> expression . COMMA assignment_expression

    COLON           shift and go to state 167
    COMMA           shift and go to state 122


state 118

    (96) mult_expression -> mult_expression MULT_OP unary_expression .

    MULT_OP         reduce using rule 96 (mult_expression -> mult_expression MULT_OP unary_expression .)
    DIV_OP          reduce using rule 96 (mult_expression -> mult_expression MULT_OP unary_expression .)
    MOD_OP          reduce using rule 96 (mult_expression -> mult_expression MULT_OP unary_expression .)
    ADD_OP          reduce using rule 96 (mult_expression -> mult_expression MULT_OP unary_expression .)
    SUB_OP          reduce using rule 96 (mult_expression -> mult_expression MULT_OP unary_expression .)
    LT              reduce using rule 96 (mult_expression -> mult_expression MULT_OP unary_expression .)
    GT              reduce using rule 96 (mult_expression -> mult_expression MULT_OP unary_expression .)
    LE              reduce using rule 96 (mult_expression -> mult_expression MULT_OP unary_expression .)
    GE              reduce using rule 96 (mult_expression -> mult_expression MULT_OP unary_expression .)
    EQ              reduce using rule 96 (mult_expression -> mult_expression MULT_OP unary_expression .)
    NEQ             reduce using rule 96 (mult_expression -> mult_expression MULT_OP unary_expression .)
    OR              reduce using rule 96 (mult_expression -> mult_expression MULT_OP unary_expression .)
    AND             reduce using rule 96 (mult_expression -> mult_expression MULT_OP unary_expression .)
    COND_OP         reduce using rule 96 (mult_expression -> mult_expression MULT_OP unary_expression .)
    COMMA           reduce using rule 96 (mult_expression -> mult_expression MULT_OP unary_expression .)
    SEMI            reduce using rule 96 (mult_expression -> mult_expression MULT_OP unary_expression .)
    INC             reduce using rule 96 (mult_expression -> mult_expression MULT_OP unary_expression .)
    DEC             reduce using rule 96 (mult_expression -> mult_expression MULT_OP unary_expression .)
    NOT             reduce using rule 96 (mult_expression -> mult_expression MULT_OP unary_expression .)
    LPAREN          reduce using rule 96 (mult_expression -> mult_expression MULT_OP unary_expression .)
    FLOAT_ID        reduce using rule 96 (mult_expression -> mult_expression MULT_OP unary_expression .)
    INT_ID          reduce using rule 96 (mult_expression -> mult_expression MULT_OP unary_expression .)
    CHAR_ID         reduce using rule 96 (mult_expression -> mult_expression MULT_OP unary_expression .)
    STR_ID          reduce using rule 96 (mult_expression -> mult_expression MULT_OP unary_expression .)
    FLOAT_LIT       reduce using rule 96 (mult_expression -> mult_expression MULT_OP unary_expression .)
    INT_LIT         reduce using rule 96 (mult_expression -> mult_expression MULT_OP unary_expression .)
    CHAR_LIT        reduce using rule 96 (mult_expression -> mult_expression MULT_OP unary_expression .)
    STR_LIT         reduce using rule 96 (mult_expression -> mult_expression MULT_OP unary_expression .)
    MAIN            reduce using rule 96 (mult_expression -> mult_expression MULT_OP unary_expression .)
    RPAREN          reduce using rule 96 (mult_expression -> mult_expression MULT_OP unary_expression .)
    RBRACKET        reduce using rule 96 (mult_expression -> mult_expression MULT_OP unary_expression .)
    COLON           reduce using rule 96 (mult_expression -> mult_expression MULT_OP unary_expression .)
    RBRACE          reduce using rule 96 (mult_expression -> mult_expression MULT_OP unary_expression .)
    ASSIGN_OP       reduce using rule 96 (mult_expression -> mult_expression MULT_OP unary_expression .)
    ADD_ASSIGN      reduce using rule 96 (mult_expression -> mult_expression MULT_OP unary_expression .)
    MIN_ASSIGN      reduce using rule 96 (mult_expression -> mult_expression MULT_OP unary_expression .)
    MUL_ASSIGN      reduce using rule 96 (mult_expression -> mult_expression MULT_OP unary_expression .)
    DIV_ASSIGN      reduce using rule 96 (mult_expression -> mult_expression MULT_OP unary_expression .)
    MOD_ASSIGN      reduce using rule 96 (mult_expression -> mult_expression MULT_OP unary_expression .)


state 119

    (98) mult_expression -> mult_expression MOD_OP unary_expression .

    MULT_OP         reduce using rule 98 (mult_expression -> mult_expression MOD_OP unary_expression .)
    DIV_OP          reduce using rule 98 (mult_expression -> mult_expression MOD_OP unary_expression .)
    MOD_OP          reduce using rule 98 (mult_expression -> mult_expression MOD_OP unary_expression .)
    ADD_OP          reduce using rule 98 (mult_expression -> mult_expression MOD_OP unary_expression .)
    SUB_OP          reduce using rule 98 (mult_expression -> mult_expression MOD_OP unary_expression .)
    LT              reduce using rule 98 (mult_expression -> mult_expression MOD_OP unary_expression .)
    GT              reduce using rule 98 (mult_expression -> mult_expression MOD_OP unary_expression .)
    LE              reduce using rule 98 (mult_expression -> mult_expression MOD_OP unary_expression .)
    GE              reduce using rule 98 (mult_expression -> mult_expression MOD_OP unary_expression .)
    EQ              reduce using rule 98 (mult_expression -> mult_expression MOD_OP unary_expression .)
    NEQ             reduce using rule 98 (mult_expression -> mult_expression MOD_OP unary_expression .)
    OR              reduce using rule 98 (mult_expression -> mult_expression MOD_OP unary_expression .)
    AND             reduce using rule 98 (mult_expression -> mult_expression MOD_OP unary_expression .)
    COND_OP         reduce using rule 98 (mult_expression -> mult_expression MOD_OP unary_expression .)
    COMMA           reduce using rule 98 (mult_expression -> mult_expression MOD_OP unary_expression .)
    SEMI            reduce using rule 98 (mult_expression -> mult_expression MOD_OP unary_expression .)
    INC             reduce using rule 98 (mult_expression -> mult_expression MOD_OP unary_expression .)
    DEC             reduce using rule 98 (mult_expression -> mult_expression MOD_OP unary_expression .)
    NOT             reduce using rule 98 (mult_expression -> mult_expression MOD_OP unary_expression .)
    LPAREN          reduce using rule 98 (mult_expression -> mult_expression MOD_OP unary_expression .)
    FLOAT_ID        reduce using rule 98 (mult_expression -> mult_expression MOD_OP unary_expression .)
    INT_ID          reduce using rule 98 (mult_expression -> mult_expression MOD_OP unary_expression .)
    CHAR_ID         reduce using rule 98 (mult_expression -> mult_expression MOD_OP unary_expression .)
    STR_ID          reduce using rule 98 (mult_expression -> mult_expression MOD_OP unary_expression .)
    FLOAT_LIT       reduce using rule 98 (mult_expression -> mult_expression MOD_OP unary_expression .)
    INT_LIT         reduce using rule 98 (mult_expression -> mult_expression MOD_OP unary_expression .)
    CHAR_LIT        reduce using rule 98 (mult_expression -> mult_expression MOD_OP unary_expression .)
    STR_LIT         reduce using rule 98 (mult_expression -> mult_expression MOD_OP unary_expression .)
    MAIN            reduce using rule 98 (mult_expression -> mult_expression MOD_OP unary_expression .)
    RPAREN          reduce using rule 98 (mult_expression -> mult_expression MOD_OP unary_expression .)
    RBRACKET        reduce using rule 98 (mult_expression -> mult_expression MOD_OP unary_expression .)
    COLON           reduce using rule 98 (mult_expression -> mult_expression MOD_OP unary_expression .)
    RBRACE          reduce using rule 98 (mult_expression -> mult_expression MOD_OP unary_expression .)
    ASSIGN_OP       reduce using rule 98 (mult_expression -> mult_expression MOD_OP unary_expression .)
    ADD_ASSIGN      reduce using rule 98 (mult_expression -> mult_expression MOD_OP unary_expression .)
    MIN_ASSIGN      reduce using rule 98 (mult_expression -> mult_expression MOD_OP unary_expression .)
    MUL_ASSIGN      reduce using rule 98 (mult_expression -> mult_expression MOD_OP unary_expression .)
    DIV_ASSIGN      reduce using rule 98 (mult_expression -> mult_expression MOD_OP unary_expression .)
    MOD_ASSIGN      reduce using rule 98 (mult_expression -> mult_expression MOD_OP unary_expression .)


state 120

    (97) mult_expression -> mult_expression DIV_OP unary_expression .

    MULT_OP         reduce using rule 97 (mult_expression -> mult_expression DIV_OP unary_expression .)
    DIV_OP          reduce using rule 97 (mult_expression -> mult_expression DIV_OP unary_expression .)
    MOD_OP          reduce using rule 97 (mult_expression -> mult_expression DIV_OP unary_expression .)
    ADD_OP          reduce using rule 97 (mult_expression -> mult_expression DIV_OP unary_expression .)
    SUB_OP          reduce using rule 97 (mult_expression -> mult_expression DIV_OP unary_expression .)
    LT              reduce using rule 97 (mult_expression -> mult_expression DIV_OP unary_expression .)
    GT              reduce using rule 97 (mult_expression -> mult_expression DIV_OP unary_expression .)
    LE              reduce using rule 97 (mult_expression -> mult_expression DIV_OP unary_expression .)
    GE              reduce using rule 97 (mult_expression -> mult_expression DIV_OP unary_expression .)
    EQ              reduce using rule 97 (mult_expression -> mult_expression DIV_OP unary_expression .)
    NEQ             reduce using rule 97 (mult_expression -> mult_expression DIV_OP unary_expression .)
    OR              reduce using rule 97 (mult_expression -> mult_expression DIV_OP unary_expression .)
    AND             reduce using rule 97 (mult_expression -> mult_expression DIV_OP unary_expression .)
    COND_OP         reduce using rule 97 (mult_expression -> mult_expression DIV_OP unary_expression .)
    COMMA           reduce using rule 97 (mult_expression -> mult_expression DIV_OP unary_expression .)
    SEMI            reduce using rule 97 (mult_expression -> mult_expression DIV_OP unary_expression .)
    INC             reduce using rule 97 (mult_expression -> mult_expression DIV_OP unary_expression .)
    DEC             reduce using rule 97 (mult_expression -> mult_expression DIV_OP unary_expression .)
    NOT             reduce using rule 97 (mult_expression -> mult_expression DIV_OP unary_expression .)
    LPAREN          reduce using rule 97 (mult_expression -> mult_expression DIV_OP unary_expression .)
    FLOAT_ID        reduce using rule 97 (mult_expression -> mult_expression DIV_OP unary_expression .)
    INT_ID          reduce using rule 97 (mult_expression -> mult_expression DIV_OP unary_expression .)
    CHAR_ID         reduce using rule 97 (mult_expression -> mult_expression DIV_OP unary_expression .)
    STR_ID          reduce using rule 97 (mult_expression -> mult_expression DIV_OP unary_expression .)
    FLOAT_LIT       reduce using rule 97 (mult_expression -> mult_expression DIV_OP unary_expression .)
    INT_LIT         reduce using rule 97 (mult_expression -> mult_expression DIV_OP unary_expression .)
    CHAR_LIT        reduce using rule 97 (mult_expression -> mult_expression DIV_OP unary_expression .)
    STR_LIT         reduce using rule 97 (mult_expression -> mult_expression DIV_OP unary_expression .)
    MAIN            reduce using rule 97 (mult_expression -> mult_expression DIV_OP unary_expression .)
    RPAREN          reduce using rule 97 (mult_expression -> mult_expression DIV_OP unary_expression .)
    RBRACKET        reduce using rule 97 (mult_expression -> mult_expression DIV_OP unary_expression .)
    COLON           reduce using rule 97 (mult_expression -> mult_expression DIV_OP unary_expression .)
    RBRACE          reduce using rule 97 (mult_expression -> mult_expression DIV_OP unary_expression .)
    ASSIGN_OP       reduce using rule 97 (mult_expression -> mult_expression DIV_OP unary_expression .)
    ADD_ASSIGN      reduce using rule 97 (mult_expression -> mult_expression DIV_OP unary_expression .)
    MIN_ASSIGN      reduce using rule 97 (mult_expression -> mult_expression DIV_OP unary_expression .)
    MUL_ASSIGN      reduce using rule 97 (mult_expression -> mult_expression DIV_OP unary_expression .)
    DIV_ASSIGN      reduce using rule 97 (mult_expression -> mult_expression DIV_OP unary_expression .)
    MOD_ASSIGN      reduce using rule 97 (mult_expression -> mult_expression DIV_OP unary_expression .)


state 121

    (112) primary_expression -> LPAREN expression RPAREN .

    LBRACKET        reduce using rule 112 (primary_expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 112 (primary_expression -> LPAREN expression RPAREN .)
    INC             reduce using rule 112 (primary_expression -> LPAREN expression RPAREN .)
    DEC             reduce using rule 112 (primary_expression -> LPAREN expression RPAREN .)
    MULT_OP         reduce using rule 112 (primary_expression -> LPAREN expression RPAREN .)
    DIV_OP          reduce using rule 112 (primary_expression -> LPAREN expression RPAREN .)
    MOD_OP          reduce using rule 112 (primary_expression -> LPAREN expression RPAREN .)
    ADD_OP          reduce using rule 112 (primary_expression -> LPAREN expression RPAREN .)
    SUB_OP          reduce using rule 112 (primary_expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 112 (primary_expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 112 (primary_expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 112 (primary_expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 112 (primary_expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 112 (primary_expression -> LPAREN expression RPAREN .)
    NEQ             reduce using rule 112 (primary_expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 112 (primary_expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 112 (primary_expression -> LPAREN expression RPAREN .)
    COND_OP         reduce using rule 112 (primary_expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 112 (primary_expression -> LPAREN expression RPAREN .)
    ASSIGN_OP       reduce using rule 112 (primary_expression -> LPAREN expression RPAREN .)
    ADD_ASSIGN      reduce using rule 112 (primary_expression -> LPAREN expression RPAREN .)
    MIN_ASSIGN      reduce using rule 112 (primary_expression -> LPAREN expression RPAREN .)
    MUL_ASSIGN      reduce using rule 112 (primary_expression -> LPAREN expression RPAREN .)
    DIV_ASSIGN      reduce using rule 112 (primary_expression -> LPAREN expression RPAREN .)
    MOD_ASSIGN      reduce using rule 112 (primary_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 112 (primary_expression -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 112 (primary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 112 (primary_expression -> LPAREN expression RPAREN .)
    NOT             reduce using rule 112 (primary_expression -> LPAREN expression RPAREN .)
    FLOAT_ID        reduce using rule 112 (primary_expression -> LPAREN expression RPAREN .)
    INT_ID          reduce using rule 112 (primary_expression -> LPAREN expression RPAREN .)
    CHAR_ID         reduce using rule 112 (primary_expression -> LPAREN expression RPAREN .)
    STR_ID          reduce using rule 112 (primary_expression -> LPAREN expression RPAREN .)
    FLOAT_LIT       reduce using rule 112 (primary_expression -> LPAREN expression RPAREN .)
    INT_LIT         reduce using rule 112 (primary_expression -> LPAREN expression RPAREN .)
    CHAR_LIT        reduce using rule 112 (primary_expression -> LPAREN expression RPAREN .)
    STR_LIT         reduce using rule 112 (primary_expression -> LPAREN expression RPAREN .)
    MAIN            reduce using rule 112 (primary_expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 112 (primary_expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 112 (primary_expression -> LPAREN expression RPAREN .)


state 122

    (66) expression -> expression COMMA . assignment_expression
    (67) assignment_expression -> . conditional_expression
    (68) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression COND_OP expression COLON conditional_expression
    (99) unary_expression -> . postfix_expression
    (100) unary_expression -> . INC unary_expression
    (101) unary_expression -> . DEC unary_expression
    (102) unary_expression -> . SUB_OP add_expression
    (103) unary_expression -> . NOT logical_or_expression
    (80) logical_or_expression -> . logical_and_expression
    (81) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (104) postfix_expression -> . primary_expression
    (105) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (106) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (107) postfix_expression -> . postfix_expression LPAREN RPAREN
    (108) postfix_expression -> . postfix_expression INC
    (109) postfix_expression -> . postfix_expression DEC
    (82) logical_and_expression -> . equality_expression
    (83) logical_and_expression -> . logical_and_expression AND equality_expression
    (110) primary_expression -> . identifier
    (111) primary_expression -> . constant
    (112) primary_expression -> . LPAREN expression RPAREN
    (84) equality_expression -> . relational_expression
    (85) equality_expression -> . equality_expression EQ relational_expression
    (86) equality_expression -> . equality_expression NEQ relational_expression
    (115) identifier -> . FLOAT_ID
    (116) identifier -> . INT_ID
    (117) identifier -> . CHAR_ID
    (118) identifier -> . STR_ID
    (119) constant -> . FLOAT_LIT
    (120) constant -> . INT_LIT
    (121) constant -> . CHAR_LIT
    (122) constant -> . STR_LIT
    (87) relational_expression -> . add_expression
    (88) relational_expression -> . relational_expression LT add_expression
    (89) relational_expression -> . relational_expression GT add_expression
    (90) relational_expression -> . relational_expression LE add_expression
    (91) relational_expression -> . relational_expression GE add_expression
    (92) add_expression -> . mult_expression
    (93) add_expression -> . add_expression ADD_OP mult_expression
    (94) add_expression -> . add_expression SUB_OP mult_expression
    (95) mult_expression -> . unary_expression
    (96) mult_expression -> . mult_expression MULT_OP unary_expression
    (97) mult_expression -> . mult_expression DIV_OP unary_expression
    (98) mult_expression -> . mult_expression MOD_OP unary_expression

    INC             shift and go to state 33
    DEC             shift and go to state 3
    SUB_OP          shift and go to state 28
    NOT             shift and go to state 31
    LPAREN          shift and go to state 20
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 25
    CHAR_ID         shift and go to state 7
    STR_ID          shift and go to state 13
    FLOAT_LIT       shift and go to state 27
    INT_LIT         shift and go to state 29
    CHAR_LIT        shift and go to state 6
    STR_LIT         shift and go to state 4

    constant                       shift and go to state 1
    assignment_expression          shift and go to state 168
    unary_expression               shift and go to state 2
    relational_expression          shift and go to state 11
    add_expression                 shift and go to state 22
    postfix_expression             shift and go to state 9
    conditional_expression         shift and go to state 30
    mult_expression                shift and go to state 18
    logical_and_expression         shift and go to state 21
    identifier                     shift and go to state 42
    logical_or_expression          shift and go to state 15
    equality_expression            shift and go to state 23
    primary_expression             shift and go to state 19

state 123

    (83) logical_and_expression -> logical_and_expression AND equality_expression .
    (85) equality_expression -> equality_expression . EQ relational_expression
    (86) equality_expression -> equality_expression . NEQ relational_expression

  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
    OR              reduce using rule 83 (logical_and_expression -> logical_and_expression AND equality_expression .)
    AND             reduce using rule 83 (logical_and_expression -> logical_and_expression AND equality_expression .)
    COND_OP         reduce using rule 83 (logical_and_expression -> logical_and_expression AND equality_expression .)
    SEMI            reduce using rule 83 (logical_and_expression -> logical_and_expression AND equality_expression .)
    COMMA           reduce using rule 83 (logical_and_expression -> logical_and_expression AND equality_expression .)
    COLON           reduce using rule 83 (logical_and_expression -> logical_and_expression AND equality_expression .)
    RPAREN          reduce using rule 83 (logical_and_expression -> logical_and_expression AND equality_expression .)
    INC             reduce using rule 83 (logical_and_expression -> logical_and_expression AND equality_expression .)
    DEC             reduce using rule 83 (logical_and_expression -> logical_and_expression AND equality_expression .)
    SUB_OP          reduce using rule 83 (logical_and_expression -> logical_and_expression AND equality_expression .)
    NOT             reduce using rule 83 (logical_and_expression -> logical_and_expression AND equality_expression .)
    LPAREN          reduce using rule 83 (logical_and_expression -> logical_and_expression AND equality_expression .)
    FLOAT_ID        reduce using rule 83 (logical_and_expression -> logical_and_expression AND equality_expression .)
    INT_ID          reduce using rule 83 (logical_and_expression -> logical_and_expression AND equality_expression .)
    CHAR_ID         reduce using rule 83 (logical_and_expression -> logical_and_expression AND equality_expression .)
    STR_ID          reduce using rule 83 (logical_and_expression -> logical_and_expression AND equality_expression .)
    FLOAT_LIT       reduce using rule 83 (logical_and_expression -> logical_and_expression AND equality_expression .)
    INT_LIT         reduce using rule 83 (logical_and_expression -> logical_and_expression AND equality_expression .)
    CHAR_LIT        reduce using rule 83 (logical_and_expression -> logical_and_expression AND equality_expression .)
    STR_LIT         reduce using rule 83 (logical_and_expression -> logical_and_expression AND equality_expression .)
    MAIN            reduce using rule 83 (logical_and_expression -> logical_and_expression AND equality_expression .)
    ASSIGN_OP       reduce using rule 83 (logical_and_expression -> logical_and_expression AND equality_expression .)
    ADD_ASSIGN      reduce using rule 83 (logical_and_expression -> logical_and_expression AND equality_expression .)
    MIN_ASSIGN      reduce using rule 83 (logical_and_expression -> logical_and_expression AND equality_expression .)
    MUL_ASSIGN      reduce using rule 83 (logical_and_expression -> logical_and_expression AND equality_expression .)
    DIV_ASSIGN      reduce using rule 83 (logical_and_expression -> logical_and_expression AND equality_expression .)
    MOD_ASSIGN      reduce using rule 83 (logical_and_expression -> logical_and_expression AND equality_expression .)
    MULT_OP         reduce using rule 83 (logical_and_expression -> logical_and_expression AND equality_expression .)
    DIV_OP          reduce using rule 83 (logical_and_expression -> logical_and_expression AND equality_expression .)
    MOD_OP          reduce using rule 83 (logical_and_expression -> logical_and_expression AND equality_expression .)
    ADD_OP          reduce using rule 83 (logical_and_expression -> logical_and_expression AND equality_expression .)
    LT              reduce using rule 83 (logical_and_expression -> logical_and_expression AND equality_expression .)
    GT              reduce using rule 83 (logical_and_expression -> logical_and_expression AND equality_expression .)
    LE              reduce using rule 83 (logical_and_expression -> logical_and_expression AND equality_expression .)
    GE              reduce using rule 83 (logical_and_expression -> logical_and_expression AND equality_expression .)
    RBRACKET        reduce using rule 83 (logical_and_expression -> logical_and_expression AND equality_expression .)
    RBRACE          reduce using rule 83 (logical_and_expression -> logical_and_expression AND equality_expression .)
    EQ              shift and go to state 65
    NEQ             shift and go to state 66

  ! EQ              [ reduce using rule 83 (logical_and_expression -> logical_and_expression AND equality_expression .) ]
  ! NEQ             [ reduce using rule 83 (logical_and_expression -> logical_and_expression AND equality_expression .) ]


state 124

    (81) logical_or_expression -> logical_and_expression OR logical_or_expression .

    COND_OP         reduce using rule 81 (logical_or_expression -> logical_and_expression OR logical_or_expression .)
    COMMA           reduce using rule 81 (logical_or_expression -> logical_and_expression OR logical_or_expression .)
    SEMI            reduce using rule 81 (logical_or_expression -> logical_and_expression OR logical_or_expression .)
    RPAREN          reduce using rule 81 (logical_or_expression -> logical_and_expression OR logical_or_expression .)
    INC             reduce using rule 81 (logical_or_expression -> logical_and_expression OR logical_or_expression .)
    DEC             reduce using rule 81 (logical_or_expression -> logical_and_expression OR logical_or_expression .)
    SUB_OP          reduce using rule 81 (logical_or_expression -> logical_and_expression OR logical_or_expression .)
    NOT             reduce using rule 81 (logical_or_expression -> logical_and_expression OR logical_or_expression .)
    LPAREN          reduce using rule 81 (logical_or_expression -> logical_and_expression OR logical_or_expression .)
    FLOAT_ID        reduce using rule 81 (logical_or_expression -> logical_and_expression OR logical_or_expression .)
    INT_ID          reduce using rule 81 (logical_or_expression -> logical_and_expression OR logical_or_expression .)
    CHAR_ID         reduce using rule 81 (logical_or_expression -> logical_and_expression OR logical_or_expression .)
    STR_ID          reduce using rule 81 (logical_or_expression -> logical_and_expression OR logical_or_expression .)
    FLOAT_LIT       reduce using rule 81 (logical_or_expression -> logical_and_expression OR logical_or_expression .)
    INT_LIT         reduce using rule 81 (logical_or_expression -> logical_and_expression OR logical_or_expression .)
    CHAR_LIT        reduce using rule 81 (logical_or_expression -> logical_and_expression OR logical_or_expression .)
    STR_LIT         reduce using rule 81 (logical_or_expression -> logical_and_expression OR logical_or_expression .)
    MAIN            reduce using rule 81 (logical_or_expression -> logical_and_expression OR logical_or_expression .)
    RBRACKET        reduce using rule 81 (logical_or_expression -> logical_and_expression OR logical_or_expression .)
    COLON           reduce using rule 81 (logical_or_expression -> logical_and_expression OR logical_or_expression .)
    RBRACE          reduce using rule 81 (logical_or_expression -> logical_and_expression OR logical_or_expression .)
    ASSIGN_OP       reduce using rule 81 (logical_or_expression -> logical_and_expression OR logical_or_expression .)
    ADD_ASSIGN      reduce using rule 81 (logical_or_expression -> logical_and_expression OR logical_or_expression .)
    MIN_ASSIGN      reduce using rule 81 (logical_or_expression -> logical_and_expression OR logical_or_expression .)
    MUL_ASSIGN      reduce using rule 81 (logical_or_expression -> logical_and_expression OR logical_or_expression .)
    DIV_ASSIGN      reduce using rule 81 (logical_or_expression -> logical_and_expression OR logical_or_expression .)
    MOD_ASSIGN      reduce using rule 81 (logical_or_expression -> logical_and_expression OR logical_or_expression .)
    MULT_OP         reduce using rule 81 (logical_or_expression -> logical_and_expression OR logical_or_expression .)
    DIV_OP          reduce using rule 81 (logical_or_expression -> logical_and_expression OR logical_or_expression .)
    MOD_OP          reduce using rule 81 (logical_or_expression -> logical_and_expression OR logical_or_expression .)
    ADD_OP          reduce using rule 81 (logical_or_expression -> logical_and_expression OR logical_or_expression .)
    LT              reduce using rule 81 (logical_or_expression -> logical_and_expression OR logical_or_expression .)
    GT              reduce using rule 81 (logical_or_expression -> logical_and_expression OR logical_or_expression .)
    LE              reduce using rule 81 (logical_or_expression -> logical_and_expression OR logical_or_expression .)
    GE              reduce using rule 81 (logical_or_expression -> logical_and_expression OR logical_or_expression .)
    EQ              reduce using rule 81 (logical_or_expression -> logical_and_expression OR logical_or_expression .)
    NEQ             reduce using rule 81 (logical_or_expression -> logical_and_expression OR logical_or_expression .)
    OR              reduce using rule 81 (logical_or_expression -> logical_and_expression OR logical_or_expression .)
    AND             reduce using rule 81 (logical_or_expression -> logical_and_expression OR logical_or_expression .)


state 125

    (94) add_expression -> add_expression SUB_OP mult_expression .
    (96) mult_expression -> mult_expression . MULT_OP unary_expression
    (97) mult_expression -> mult_expression . DIV_OP unary_expression
    (98) mult_expression -> mult_expression . MOD_OP unary_expression

  ! shift/reduce conflict for MULT_OP resolved as shift
  ! shift/reduce conflict for DIV_OP resolved as shift
  ! shift/reduce conflict for MOD_OP resolved as shift
    ASSIGN_OP       reduce using rule 94 (add_expression -> add_expression SUB_OP mult_expression .)
    ADD_ASSIGN      reduce using rule 94 (add_expression -> add_expression SUB_OP mult_expression .)
    MIN_ASSIGN      reduce using rule 94 (add_expression -> add_expression SUB_OP mult_expression .)
    MUL_ASSIGN      reduce using rule 94 (add_expression -> add_expression SUB_OP mult_expression .)
    DIV_ASSIGN      reduce using rule 94 (add_expression -> add_expression SUB_OP mult_expression .)
    MOD_ASSIGN      reduce using rule 94 (add_expression -> add_expression SUB_OP mult_expression .)
    ADD_OP          reduce using rule 94 (add_expression -> add_expression SUB_OP mult_expression .)
    SUB_OP          reduce using rule 94 (add_expression -> add_expression SUB_OP mult_expression .)
    LT              reduce using rule 94 (add_expression -> add_expression SUB_OP mult_expression .)
    GT              reduce using rule 94 (add_expression -> add_expression SUB_OP mult_expression .)
    LE              reduce using rule 94 (add_expression -> add_expression SUB_OP mult_expression .)
    GE              reduce using rule 94 (add_expression -> add_expression SUB_OP mult_expression .)
    EQ              reduce using rule 94 (add_expression -> add_expression SUB_OP mult_expression .)
    NEQ             reduce using rule 94 (add_expression -> add_expression SUB_OP mult_expression .)
    OR              reduce using rule 94 (add_expression -> add_expression SUB_OP mult_expression .)
    AND             reduce using rule 94 (add_expression -> add_expression SUB_OP mult_expression .)
    COND_OP         reduce using rule 94 (add_expression -> add_expression SUB_OP mult_expression .)
    INC             reduce using rule 94 (add_expression -> add_expression SUB_OP mult_expression .)
    DEC             reduce using rule 94 (add_expression -> add_expression SUB_OP mult_expression .)
    NOT             reduce using rule 94 (add_expression -> add_expression SUB_OP mult_expression .)
    LPAREN          reduce using rule 94 (add_expression -> add_expression SUB_OP mult_expression .)
    FLOAT_ID        reduce using rule 94 (add_expression -> add_expression SUB_OP mult_expression .)
    INT_ID          reduce using rule 94 (add_expression -> add_expression SUB_OP mult_expression .)
    CHAR_ID         reduce using rule 94 (add_expression -> add_expression SUB_OP mult_expression .)
    STR_ID          reduce using rule 94 (add_expression -> add_expression SUB_OP mult_expression .)
    FLOAT_LIT       reduce using rule 94 (add_expression -> add_expression SUB_OP mult_expression .)
    INT_LIT         reduce using rule 94 (add_expression -> add_expression SUB_OP mult_expression .)
    CHAR_LIT        reduce using rule 94 (add_expression -> add_expression SUB_OP mult_expression .)
    STR_LIT         reduce using rule 94 (add_expression -> add_expression SUB_OP mult_expression .)
    MAIN            reduce using rule 94 (add_expression -> add_expression SUB_OP mult_expression .)
    RPAREN          reduce using rule 94 (add_expression -> add_expression SUB_OP mult_expression .)
    COMMA           reduce using rule 94 (add_expression -> add_expression SUB_OP mult_expression .)
    SEMI            reduce using rule 94 (add_expression -> add_expression SUB_OP mult_expression .)
    RBRACKET        reduce using rule 94 (add_expression -> add_expression SUB_OP mult_expression .)
    COLON           reduce using rule 94 (add_expression -> add_expression SUB_OP mult_expression .)
    RBRACE          reduce using rule 94 (add_expression -> add_expression SUB_OP mult_expression .)
    MULT_OP         shift and go to state 56
    DIV_OP          shift and go to state 58
    MOD_OP          shift and go to state 57

  ! MULT_OP         [ reduce using rule 94 (add_expression -> add_expression SUB_OP mult_expression .) ]
  ! DIV_OP          [ reduce using rule 94 (add_expression -> add_expression SUB_OP mult_expression .) ]
  ! MOD_OP          [ reduce using rule 94 (add_expression -> add_expression SUB_OP mult_expression .) ]


state 126

    (93) add_expression -> add_expression ADD_OP mult_expression .
    (96) mult_expression -> mult_expression . MULT_OP unary_expression
    (97) mult_expression -> mult_expression . DIV_OP unary_expression
    (98) mult_expression -> mult_expression . MOD_OP unary_expression

  ! shift/reduce conflict for MULT_OP resolved as shift
  ! shift/reduce conflict for DIV_OP resolved as shift
  ! shift/reduce conflict for MOD_OP resolved as shift
    ASSIGN_OP       reduce using rule 93 (add_expression -> add_expression ADD_OP mult_expression .)
    ADD_ASSIGN      reduce using rule 93 (add_expression -> add_expression ADD_OP mult_expression .)
    MIN_ASSIGN      reduce using rule 93 (add_expression -> add_expression ADD_OP mult_expression .)
    MUL_ASSIGN      reduce using rule 93 (add_expression -> add_expression ADD_OP mult_expression .)
    DIV_ASSIGN      reduce using rule 93 (add_expression -> add_expression ADD_OP mult_expression .)
    MOD_ASSIGN      reduce using rule 93 (add_expression -> add_expression ADD_OP mult_expression .)
    ADD_OP          reduce using rule 93 (add_expression -> add_expression ADD_OP mult_expression .)
    SUB_OP          reduce using rule 93 (add_expression -> add_expression ADD_OP mult_expression .)
    LT              reduce using rule 93 (add_expression -> add_expression ADD_OP mult_expression .)
    GT              reduce using rule 93 (add_expression -> add_expression ADD_OP mult_expression .)
    LE              reduce using rule 93 (add_expression -> add_expression ADD_OP mult_expression .)
    GE              reduce using rule 93 (add_expression -> add_expression ADD_OP mult_expression .)
    EQ              reduce using rule 93 (add_expression -> add_expression ADD_OP mult_expression .)
    NEQ             reduce using rule 93 (add_expression -> add_expression ADD_OP mult_expression .)
    OR              reduce using rule 93 (add_expression -> add_expression ADD_OP mult_expression .)
    AND             reduce using rule 93 (add_expression -> add_expression ADD_OP mult_expression .)
    COND_OP         reduce using rule 93 (add_expression -> add_expression ADD_OP mult_expression .)
    INC             reduce using rule 93 (add_expression -> add_expression ADD_OP mult_expression .)
    DEC             reduce using rule 93 (add_expression -> add_expression ADD_OP mult_expression .)
    NOT             reduce using rule 93 (add_expression -> add_expression ADD_OP mult_expression .)
    LPAREN          reduce using rule 93 (add_expression -> add_expression ADD_OP mult_expression .)
    FLOAT_ID        reduce using rule 93 (add_expression -> add_expression ADD_OP mult_expression .)
    INT_ID          reduce using rule 93 (add_expression -> add_expression ADD_OP mult_expression .)
    CHAR_ID         reduce using rule 93 (add_expression -> add_expression ADD_OP mult_expression .)
    STR_ID          reduce using rule 93 (add_expression -> add_expression ADD_OP mult_expression .)
    FLOAT_LIT       reduce using rule 93 (add_expression -> add_expression ADD_OP mult_expression .)
    INT_LIT         reduce using rule 93 (add_expression -> add_expression ADD_OP mult_expression .)
    CHAR_LIT        reduce using rule 93 (add_expression -> add_expression ADD_OP mult_expression .)
    STR_LIT         reduce using rule 93 (add_expression -> add_expression ADD_OP mult_expression .)
    MAIN            reduce using rule 93 (add_expression -> add_expression ADD_OP mult_expression .)
    RPAREN          reduce using rule 93 (add_expression -> add_expression ADD_OP mult_expression .)
    COMMA           reduce using rule 93 (add_expression -> add_expression ADD_OP mult_expression .)
    SEMI            reduce using rule 93 (add_expression -> add_expression ADD_OP mult_expression .)
    RBRACKET        reduce using rule 93 (add_expression -> add_expression ADD_OP mult_expression .)
    COLON           reduce using rule 93 (add_expression -> add_expression ADD_OP mult_expression .)
    RBRACE          reduce using rule 93 (add_expression -> add_expression ADD_OP mult_expression .)
    MULT_OP         shift and go to state 56
    DIV_OP          shift and go to state 58
    MOD_OP          shift and go to state 57

  ! MULT_OP         [ reduce using rule 93 (add_expression -> add_expression ADD_OP mult_expression .) ]
  ! DIV_OP          [ reduce using rule 93 (add_expression -> add_expression ADD_OP mult_expression .) ]
  ! MOD_OP          [ reduce using rule 93 (add_expression -> add_expression ADD_OP mult_expression .) ]


state 127

    (85) equality_expression -> equality_expression EQ relational_expression .
    (88) relational_expression -> relational_expression . LT add_expression
    (89) relational_expression -> relational_expression . GT add_expression
    (90) relational_expression -> relational_expression . LE add_expression
    (91) relational_expression -> relational_expression . GE add_expression

  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    EQ              reduce using rule 85 (equality_expression -> equality_expression EQ relational_expression .)
    NEQ             reduce using rule 85 (equality_expression -> equality_expression EQ relational_expression .)
    OR              reduce using rule 85 (equality_expression -> equality_expression EQ relational_expression .)
    AND             reduce using rule 85 (equality_expression -> equality_expression EQ relational_expression .)
    COND_OP         reduce using rule 85 (equality_expression -> equality_expression EQ relational_expression .)
    COMMA           reduce using rule 85 (equality_expression -> equality_expression EQ relational_expression .)
    SEMI            reduce using rule 85 (equality_expression -> equality_expression EQ relational_expression .)
    ASSIGN_OP       reduce using rule 85 (equality_expression -> equality_expression EQ relational_expression .)
    ADD_ASSIGN      reduce using rule 85 (equality_expression -> equality_expression EQ relational_expression .)
    MIN_ASSIGN      reduce using rule 85 (equality_expression -> equality_expression EQ relational_expression .)
    MUL_ASSIGN      reduce using rule 85 (equality_expression -> equality_expression EQ relational_expression .)
    DIV_ASSIGN      reduce using rule 85 (equality_expression -> equality_expression EQ relational_expression .)
    MOD_ASSIGN      reduce using rule 85 (equality_expression -> equality_expression EQ relational_expression .)
    MULT_OP         reduce using rule 85 (equality_expression -> equality_expression EQ relational_expression .)
    DIV_OP          reduce using rule 85 (equality_expression -> equality_expression EQ relational_expression .)
    MOD_OP          reduce using rule 85 (equality_expression -> equality_expression EQ relational_expression .)
    ADD_OP          reduce using rule 85 (equality_expression -> equality_expression EQ relational_expression .)
    SUB_OP          reduce using rule 85 (equality_expression -> equality_expression EQ relational_expression .)
    INC             reduce using rule 85 (equality_expression -> equality_expression EQ relational_expression .)
    DEC             reduce using rule 85 (equality_expression -> equality_expression EQ relational_expression .)
    NOT             reduce using rule 85 (equality_expression -> equality_expression EQ relational_expression .)
    LPAREN          reduce using rule 85 (equality_expression -> equality_expression EQ relational_expression .)
    FLOAT_ID        reduce using rule 85 (equality_expression -> equality_expression EQ relational_expression .)
    INT_ID          reduce using rule 85 (equality_expression -> equality_expression EQ relational_expression .)
    CHAR_ID         reduce using rule 85 (equality_expression -> equality_expression EQ relational_expression .)
    STR_ID          reduce using rule 85 (equality_expression -> equality_expression EQ relational_expression .)
    FLOAT_LIT       reduce using rule 85 (equality_expression -> equality_expression EQ relational_expression .)
    INT_LIT         reduce using rule 85 (equality_expression -> equality_expression EQ relational_expression .)
    CHAR_LIT        reduce using rule 85 (equality_expression -> equality_expression EQ relational_expression .)
    STR_LIT         reduce using rule 85 (equality_expression -> equality_expression EQ relational_expression .)
    MAIN            reduce using rule 85 (equality_expression -> equality_expression EQ relational_expression .)
    RPAREN          reduce using rule 85 (equality_expression -> equality_expression EQ relational_expression .)
    RBRACKET        reduce using rule 85 (equality_expression -> equality_expression EQ relational_expression .)
    COLON           reduce using rule 85 (equality_expression -> equality_expression EQ relational_expression .)
    RBRACE          reduce using rule 85 (equality_expression -> equality_expression EQ relational_expression .)
    LT              shift and go to state 51
    GT              shift and go to state 50
    LE              shift and go to state 53
    GE              shift and go to state 52

  ! LT              [ reduce using rule 85 (equality_expression -> equality_expression EQ relational_expression .) ]
  ! GT              [ reduce using rule 85 (equality_expression -> equality_expression EQ relational_expression .) ]
  ! LE              [ reduce using rule 85 (equality_expression -> equality_expression EQ relational_expression .) ]
  ! GE              [ reduce using rule 85 (equality_expression -> equality_expression EQ relational_expression .) ]


state 128

    (86) equality_expression -> equality_expression NEQ relational_expression .
    (88) relational_expression -> relational_expression . LT add_expression
    (89) relational_expression -> relational_expression . GT add_expression
    (90) relational_expression -> relational_expression . LE add_expression
    (91) relational_expression -> relational_expression . GE add_expression

  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    EQ              reduce using rule 86 (equality_expression -> equality_expression NEQ relational_expression .)
    NEQ             reduce using rule 86 (equality_expression -> equality_expression NEQ relational_expression .)
    OR              reduce using rule 86 (equality_expression -> equality_expression NEQ relational_expression .)
    AND             reduce using rule 86 (equality_expression -> equality_expression NEQ relational_expression .)
    COND_OP         reduce using rule 86 (equality_expression -> equality_expression NEQ relational_expression .)
    COMMA           reduce using rule 86 (equality_expression -> equality_expression NEQ relational_expression .)
    SEMI            reduce using rule 86 (equality_expression -> equality_expression NEQ relational_expression .)
    ASSIGN_OP       reduce using rule 86 (equality_expression -> equality_expression NEQ relational_expression .)
    ADD_ASSIGN      reduce using rule 86 (equality_expression -> equality_expression NEQ relational_expression .)
    MIN_ASSIGN      reduce using rule 86 (equality_expression -> equality_expression NEQ relational_expression .)
    MUL_ASSIGN      reduce using rule 86 (equality_expression -> equality_expression NEQ relational_expression .)
    DIV_ASSIGN      reduce using rule 86 (equality_expression -> equality_expression NEQ relational_expression .)
    MOD_ASSIGN      reduce using rule 86 (equality_expression -> equality_expression NEQ relational_expression .)
    MULT_OP         reduce using rule 86 (equality_expression -> equality_expression NEQ relational_expression .)
    DIV_OP          reduce using rule 86 (equality_expression -> equality_expression NEQ relational_expression .)
    MOD_OP          reduce using rule 86 (equality_expression -> equality_expression NEQ relational_expression .)
    ADD_OP          reduce using rule 86 (equality_expression -> equality_expression NEQ relational_expression .)
    SUB_OP          reduce using rule 86 (equality_expression -> equality_expression NEQ relational_expression .)
    INC             reduce using rule 86 (equality_expression -> equality_expression NEQ relational_expression .)
    DEC             reduce using rule 86 (equality_expression -> equality_expression NEQ relational_expression .)
    NOT             reduce using rule 86 (equality_expression -> equality_expression NEQ relational_expression .)
    LPAREN          reduce using rule 86 (equality_expression -> equality_expression NEQ relational_expression .)
    FLOAT_ID        reduce using rule 86 (equality_expression -> equality_expression NEQ relational_expression .)
    INT_ID          reduce using rule 86 (equality_expression -> equality_expression NEQ relational_expression .)
    CHAR_ID         reduce using rule 86 (equality_expression -> equality_expression NEQ relational_expression .)
    STR_ID          reduce using rule 86 (equality_expression -> equality_expression NEQ relational_expression .)
    FLOAT_LIT       reduce using rule 86 (equality_expression -> equality_expression NEQ relational_expression .)
    INT_LIT         reduce using rule 86 (equality_expression -> equality_expression NEQ relational_expression .)
    CHAR_LIT        reduce using rule 86 (equality_expression -> equality_expression NEQ relational_expression .)
    STR_LIT         reduce using rule 86 (equality_expression -> equality_expression NEQ relational_expression .)
    MAIN            reduce using rule 86 (equality_expression -> equality_expression NEQ relational_expression .)
    RPAREN          reduce using rule 86 (equality_expression -> equality_expression NEQ relational_expression .)
    RBRACKET        reduce using rule 86 (equality_expression -> equality_expression NEQ relational_expression .)
    COLON           reduce using rule 86 (equality_expression -> equality_expression NEQ relational_expression .)
    RBRACE          reduce using rule 86 (equality_expression -> equality_expression NEQ relational_expression .)
    LT              shift and go to state 51
    GT              shift and go to state 50
    LE              shift and go to state 53
    GE              shift and go to state 52

  ! LT              [ reduce using rule 86 (equality_expression -> equality_expression NEQ relational_expression .) ]
  ! GT              [ reduce using rule 86 (equality_expression -> equality_expression NEQ relational_expression .) ]
  ! LE              [ reduce using rule 86 (equality_expression -> equality_expression NEQ relational_expression .) ]
  ! GE              [ reduce using rule 86 (equality_expression -> equality_expression NEQ relational_expression .) ]


state 129

    (5) main -> MAIN LPAREN . empty RPAREN compound_statement
    (123) empty -> .

    RPAREN          reduce using rule 123 (empty -> .)

    empty                          shift and go to state 169

state 130

    (27) fxn_declaration -> identifier . LPAREN fxn_prot_args RPAREN
    (28) fxn_declaration -> identifier . LPAREN empty RPAREN

    LPAREN          shift and go to state 73


state 131

    (6) post_main -> fxn_var_statement . post_main
    (6) post_main -> . fxn_var_statement post_main
    (7) post_main -> . empty
    (8) fxn_var_statement -> . fxn_prot
    (9) fxn_var_statement -> . fxn_definition
    (123) empty -> .
    (25) fxn_prot -> . fxn_declaration SEMI
    (26) fxn_definition -> . fxn_declaration compound_statement
    (27) fxn_declaration -> . identifier LPAREN fxn_prot_args RPAREN
    (28) fxn_declaration -> . identifier LPAREN empty RPAREN
    (115) identifier -> . FLOAT_ID
    (116) identifier -> . INT_ID
    (117) identifier -> . CHAR_ID
    (118) identifier -> . STR_ID

    $end            reduce using rule 123 (empty -> .)
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 25
    CHAR_ID         shift and go to state 7
    STR_ID          shift and go to state 13

    fxn_declaration                shift and go to state 8
    fxn_var_statement              shift and go to state 131
    post_main                      shift and go to state 170
    fxn_definition                 shift and go to state 12
    identifier                     shift and go to state 130
    fxn_prot                       shift and go to state 14
    empty                          shift and go to state 133

state 132

    (1) start -> pre_main main post_main .

    $end            reduce using rule 1 (start -> pre_main main post_main .)


state 133

    (7) post_main -> empty .

    $end            reduce using rule 7 (post_main -> empty .)


state 134

    (27) fxn_declaration -> identifier LPAREN fxn_prot_args . RPAREN

    RPAREN          shift and go to state 171


state 135

    (29) fxn_prot_args -> identifier . COMMA fxn_prot_args
    (30) fxn_prot_args -> identifier .

    COMMA           shift and go to state 172
    RPAREN          reduce using rule 30 (fxn_prot_args -> identifier .)


state 136

    (28) fxn_declaration -> identifier LPAREN empty . RPAREN

    RPAREN          shift and go to state 173


state 137

    (59) iteration_statement -> DO statement . WHILE LPAREN expression RPAREN SEMI

    WHILE           shift and go to state 174


state 138

    (41) labeled_statement -> identifier . COLON statement
    (110) primary_expression -> identifier .

    COLON           shift and go to state 163
    LBRACKET        reduce using rule 110 (primary_expression -> identifier .)
    LPAREN          reduce using rule 110 (primary_expression -> identifier .)
    INC             reduce using rule 110 (primary_expression -> identifier .)
    DEC             reduce using rule 110 (primary_expression -> identifier .)
    ASSIGN_OP       reduce using rule 110 (primary_expression -> identifier .)
    ADD_ASSIGN      reduce using rule 110 (primary_expression -> identifier .)
    MIN_ASSIGN      reduce using rule 110 (primary_expression -> identifier .)
    MUL_ASSIGN      reduce using rule 110 (primary_expression -> identifier .)
    DIV_ASSIGN      reduce using rule 110 (primary_expression -> identifier .)
    MOD_ASSIGN      reduce using rule 110 (primary_expression -> identifier .)
    MULT_OP         reduce using rule 110 (primary_expression -> identifier .)
    DIV_OP          reduce using rule 110 (primary_expression -> identifier .)
    MOD_OP          reduce using rule 110 (primary_expression -> identifier .)
    ADD_OP          reduce using rule 110 (primary_expression -> identifier .)
    SUB_OP          reduce using rule 110 (primary_expression -> identifier .)
    LT              reduce using rule 110 (primary_expression -> identifier .)
    GT              reduce using rule 110 (primary_expression -> identifier .)
    LE              reduce using rule 110 (primary_expression -> identifier .)
    GE              reduce using rule 110 (primary_expression -> identifier .)
    EQ              reduce using rule 110 (primary_expression -> identifier .)
    NEQ             reduce using rule 110 (primary_expression -> identifier .)
    OR              reduce using rule 110 (primary_expression -> identifier .)
    AND             reduce using rule 110 (primary_expression -> identifier .)
    COND_OP         reduce using rule 110 (primary_expression -> identifier .)
    COMMA           reduce using rule 110 (primary_expression -> identifier .)
    SEMI            reduce using rule 110 (primary_expression -> identifier .)


state 139

    (62) jump_statement -> RETURN expression_opt . SEMI

    SEMI            shift and go to state 175


state 140

    (40) scan_statement -> SCAN LPAREN . identifier RPAREN
    (115) identifier -> . FLOAT_ID
    (116) identifier -> . INT_ID
    (117) identifier -> . CHAR_ID
    (118) identifier -> . STR_ID

    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 25
    CHAR_ID         shift and go to state 7
    STR_ID          shift and go to state 13

    identifier                     shift and go to state 176

state 141

    (43) labeled_statement -> DEFAULT COLON . statement
    (31) statement -> . labeled_statement
    (32) statement -> . expression_statement
    (33) statement -> . compound_statement
    (34) statement -> . print_statement
    (35) statement -> . scan_statement
    (36) statement -> . selection_statement
    (37) statement -> . iteration_statement
    (38) statement -> . jump_statement
    (41) labeled_statement -> . identifier COLON statement
    (42) labeled_statement -> . CASE constant_expression COLON statement
    (43) labeled_statement -> . DEFAULT COLON statement
    (44) expression_statement -> . expression_opt SEMI
    (45) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (46) compound_statement -> . LBRACE statement_list RBRACE
    (47) compound_statement -> . LBRACE declaration_list RBRACE
    (48) compound_statement -> . LBRACE RBRACE
    (39) print_statement -> . PRINT LPAREN assignment_expression RPAREN
    (40) scan_statement -> . SCAN LPAREN identifier RPAREN
    (51) selection_statement -> . IF LPAREN expression RPAREN statement
    (52) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (53) selection_statement -> . IF LPAREN expression RPAREN statement else_if_statement ELSE statement
    (54) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (57) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (58) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (59) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (60) jump_statement -> . CONTINUE SEMI
    (61) jump_statement -> . BREAK SEMI
    (62) jump_statement -> . RETURN expression_opt SEMI
    (115) identifier -> . FLOAT_ID
    (116) identifier -> . INT_ID
    (117) identifier -> . CHAR_ID
    (118) identifier -> . STR_ID
    (63) expression_opt -> . empty
    (64) expression_opt -> . expression
    (123) empty -> .
    (65) expression -> . assignment_expression
    (66) expression -> . expression COMMA assignment_expression
    (67) assignment_expression -> . conditional_expression
    (68) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression COND_OP expression COLON conditional_expression
    (99) unary_expression -> . postfix_expression
    (100) unary_expression -> . INC unary_expression
    (101) unary_expression -> . DEC unary_expression
    (102) unary_expression -> . SUB_OP add_expression
    (103) unary_expression -> . NOT logical_or_expression
    (80) logical_or_expression -> . logical_and_expression
    (81) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (104) postfix_expression -> . primary_expression
    (105) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (106) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (107) postfix_expression -> . postfix_expression LPAREN RPAREN
    (108) postfix_expression -> . postfix_expression INC
    (109) postfix_expression -> . postfix_expression DEC
    (82) logical_and_expression -> . equality_expression
    (83) logical_and_expression -> . logical_and_expression AND equality_expression
    (110) primary_expression -> . identifier
    (111) primary_expression -> . constant
    (112) primary_expression -> . LPAREN expression RPAREN
    (84) equality_expression -> . relational_expression
    (85) equality_expression -> . equality_expression EQ relational_expression
    (86) equality_expression -> . equality_expression NEQ relational_expression
    (119) constant -> . FLOAT_LIT
    (120) constant -> . INT_LIT
    (121) constant -> . CHAR_LIT
    (122) constant -> . STR_LIT
    (87) relational_expression -> . add_expression
    (88) relational_expression -> . relational_expression LT add_expression
    (89) relational_expression -> . relational_expression GT add_expression
    (90) relational_expression -> . relational_expression LE add_expression
    (91) relational_expression -> . relational_expression GE add_expression
    (92) add_expression -> . mult_expression
    (93) add_expression -> . add_expression ADD_OP mult_expression
    (94) add_expression -> . add_expression SUB_OP mult_expression
    (95) mult_expression -> . unary_expression
    (96) mult_expression -> . mult_expression MULT_OP unary_expression
    (97) mult_expression -> . mult_expression DIV_OP unary_expression
    (98) mult_expression -> . mult_expression MOD_OP unary_expression

    CASE            shift and go to state 86
    DEFAULT         shift and go to state 80
    LBRACE          shift and go to state 43
    PRINT           shift and go to state 82
    SCAN            shift and go to state 79
    IF              shift and go to state 98
    SWITCH          shift and go to state 89
    WHILE           shift and go to state 83
    FOR             shift and go to state 92
    DO              shift and go to state 77
    CONTINUE        shift and go to state 103
    BREAK           shift and go to state 102
    RETURN          shift and go to state 78
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 25
    CHAR_ID         shift and go to state 7
    STR_ID          shift and go to state 13
    SEMI            reduce using rule 123 (empty -> .)
    INC             shift and go to state 33
    DEC             shift and go to state 3
    SUB_OP          shift and go to state 28
    NOT             shift and go to state 31
    LPAREN          shift and go to state 20
    FLOAT_LIT       shift and go to state 27
    INT_LIT         shift and go to state 29
    CHAR_LIT        shift and go to state 6
    STR_LIT         shift and go to state 4

    expression_statement           shift and go to state 76
    constant                       shift and go to state 1
    unary_expression               shift and go to state 2
    print_statement                shift and go to state 84
    iteration_statement            shift and go to state 85
    compound_statement             shift and go to state 87
    selection_statement            shift and go to state 88
    postfix_expression             shift and go to state 9
    relational_expression          shift and go to state 11
    statement                      shift and go to state 177
    logical_or_expression          shift and go to state 15
    empty                          shift and go to state 104
    assignment_expression          shift and go to state 59
    scan_statement                 shift and go to state 93
    mult_expression                shift and go to state 18
    expression_opt                 shift and go to state 94
    primary_expression             shift and go to state 19
    logical_and_expression         shift and go to state 21
    add_expression                 shift and go to state 22
    equality_expression            shift and go to state 23
    jump_statement                 shift and go to state 99
    labeled_statement              shift and go to state 100
    conditional_expression         shift and go to state 30
    identifier                     shift and go to state 138
    expression                     shift and go to state 108

state 142

    (14) init_declarator_list -> init_declarator_list COMMA . init_declarator
    (15) init_declarator -> . declarator
    (16) init_declarator -> . declarator ASSIGN_OP initializer
    (17) declarator -> . identifier
    (18) declarator -> . LPAREN declarator RPAREN
    (19) declarator -> . declarator LBRACKET constant_expression_opt RBRACKET
    (115) identifier -> . FLOAT_ID
    (116) identifier -> . INT_ID
    (117) identifier -> . CHAR_ID
    (118) identifier -> . STR_ID

    LPAREN          shift and go to state 179
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 25
    CHAR_ID         shift and go to state 7
    STR_ID          shift and go to state 13

    init_declarator                shift and go to state 180
    declarator                     shift and go to state 97
    identifier                     shift and go to state 178

state 143

    (10) declaration -> init_declarator_list SEMI .

    RBRACE          reduce using rule 10 (declaration -> init_declarator_list SEMI .)
    CASE            reduce using rule 10 (declaration -> init_declarator_list SEMI .)
    DEFAULT         reduce using rule 10 (declaration -> init_declarator_list SEMI .)
    LBRACE          reduce using rule 10 (declaration -> init_declarator_list SEMI .)
    PRINT           reduce using rule 10 (declaration -> init_declarator_list SEMI .)
    SCAN            reduce using rule 10 (declaration -> init_declarator_list SEMI .)
    IF              reduce using rule 10 (declaration -> init_declarator_list SEMI .)
    SWITCH          reduce using rule 10 (declaration -> init_declarator_list SEMI .)
    WHILE           reduce using rule 10 (declaration -> init_declarator_list SEMI .)
    FOR             reduce using rule 10 (declaration -> init_declarator_list SEMI .)
    DO              reduce using rule 10 (declaration -> init_declarator_list SEMI .)
    CONTINUE        reduce using rule 10 (declaration -> init_declarator_list SEMI .)
    BREAK           reduce using rule 10 (declaration -> init_declarator_list SEMI .)
    RETURN          reduce using rule 10 (declaration -> init_declarator_list SEMI .)
    FLOAT_ID        reduce using rule 10 (declaration -> init_declarator_list SEMI .)
    INT_ID          reduce using rule 10 (declaration -> init_declarator_list SEMI .)
    CHAR_ID         reduce using rule 10 (declaration -> init_declarator_list SEMI .)
    STR_ID          reduce using rule 10 (declaration -> init_declarator_list SEMI .)
    LPAREN          reduce using rule 10 (declaration -> init_declarator_list SEMI .)
    INC             reduce using rule 10 (declaration -> init_declarator_list SEMI .)
    DEC             reduce using rule 10 (declaration -> init_declarator_list SEMI .)
    SUB_OP          reduce using rule 10 (declaration -> init_declarator_list SEMI .)
    NOT             reduce using rule 10 (declaration -> init_declarator_list SEMI .)
    FLOAT_LIT       reduce using rule 10 (declaration -> init_declarator_list SEMI .)
    INT_LIT         reduce using rule 10 (declaration -> init_declarator_list SEMI .)
    CHAR_LIT        reduce using rule 10 (declaration -> init_declarator_list SEMI .)
    STR_LIT         reduce using rule 10 (declaration -> init_declarator_list SEMI .)
    SEMI            reduce using rule 10 (declaration -> init_declarator_list SEMI .)


state 144

    (39) print_statement -> PRINT LPAREN . assignment_expression RPAREN
    (67) assignment_expression -> . conditional_expression
    (68) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression COND_OP expression COLON conditional_expression
    (99) unary_expression -> . postfix_expression
    (100) unary_expression -> . INC unary_expression
    (101) unary_expression -> . DEC unary_expression
    (102) unary_expression -> . SUB_OP add_expression
    (103) unary_expression -> . NOT logical_or_expression
    (80) logical_or_expression -> . logical_and_expression
    (81) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (104) postfix_expression -> . primary_expression
    (105) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (106) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (107) postfix_expression -> . postfix_expression LPAREN RPAREN
    (108) postfix_expression -> . postfix_expression INC
    (109) postfix_expression -> . postfix_expression DEC
    (82) logical_and_expression -> . equality_expression
    (83) logical_and_expression -> . logical_and_expression AND equality_expression
    (110) primary_expression -> . identifier
    (111) primary_expression -> . constant
    (112) primary_expression -> . LPAREN expression RPAREN
    (84) equality_expression -> . relational_expression
    (85) equality_expression -> . equality_expression EQ relational_expression
    (86) equality_expression -> . equality_expression NEQ relational_expression
    (115) identifier -> . FLOAT_ID
    (116) identifier -> . INT_ID
    (117) identifier -> . CHAR_ID
    (118) identifier -> . STR_ID
    (119) constant -> . FLOAT_LIT
    (120) constant -> . INT_LIT
    (121) constant -> . CHAR_LIT
    (122) constant -> . STR_LIT
    (87) relational_expression -> . add_expression
    (88) relational_expression -> . relational_expression LT add_expression
    (89) relational_expression -> . relational_expression GT add_expression
    (90) relational_expression -> . relational_expression LE add_expression
    (91) relational_expression -> . relational_expression GE add_expression
    (92) add_expression -> . mult_expression
    (93) add_expression -> . add_expression ADD_OP mult_expression
    (94) add_expression -> . add_expression SUB_OP mult_expression
    (95) mult_expression -> . unary_expression
    (96) mult_expression -> . mult_expression MULT_OP unary_expression
    (97) mult_expression -> . mult_expression DIV_OP unary_expression
    (98) mult_expression -> . mult_expression MOD_OP unary_expression

    INC             shift and go to state 33
    DEC             shift and go to state 3
    SUB_OP          shift and go to state 28
    NOT             shift and go to state 31
    LPAREN          shift and go to state 20
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 25
    CHAR_ID         shift and go to state 7
    STR_ID          shift and go to state 13
    FLOAT_LIT       shift and go to state 27
    INT_LIT         shift and go to state 29
    CHAR_LIT        shift and go to state 6
    STR_LIT         shift and go to state 4

    constant                       shift and go to state 1
    assignment_expression          shift and go to state 181
    unary_expression               shift and go to state 2
    relational_expression          shift and go to state 11
    add_expression                 shift and go to state 22
    postfix_expression             shift and go to state 9
    conditional_expression         shift and go to state 30
    mult_expression                shift and go to state 18
    logical_and_expression         shift and go to state 21
    identifier                     shift and go to state 42
    logical_or_expression          shift and go to state 15
    equality_expression            shift and go to state 23
    primary_expression             shift and go to state 19

state 145

    (57) iteration_statement -> WHILE LPAREN . expression RPAREN statement
    (65) expression -> . assignment_expression
    (66) expression -> . expression COMMA assignment_expression
    (67) assignment_expression -> . conditional_expression
    (68) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression COND_OP expression COLON conditional_expression
    (99) unary_expression -> . postfix_expression
    (100) unary_expression -> . INC unary_expression
    (101) unary_expression -> . DEC unary_expression
    (102) unary_expression -> . SUB_OP add_expression
    (103) unary_expression -> . NOT logical_or_expression
    (80) logical_or_expression -> . logical_and_expression
    (81) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (104) postfix_expression -> . primary_expression
    (105) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (106) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (107) postfix_expression -> . postfix_expression LPAREN RPAREN
    (108) postfix_expression -> . postfix_expression INC
    (109) postfix_expression -> . postfix_expression DEC
    (82) logical_and_expression -> . equality_expression
    (83) logical_and_expression -> . logical_and_expression AND equality_expression
    (110) primary_expression -> . identifier
    (111) primary_expression -> . constant
    (112) primary_expression -> . LPAREN expression RPAREN
    (84) equality_expression -> . relational_expression
    (85) equality_expression -> . equality_expression EQ relational_expression
    (86) equality_expression -> . equality_expression NEQ relational_expression
    (115) identifier -> . FLOAT_ID
    (116) identifier -> . INT_ID
    (117) identifier -> . CHAR_ID
    (118) identifier -> . STR_ID
    (119) constant -> . FLOAT_LIT
    (120) constant -> . INT_LIT
    (121) constant -> . CHAR_LIT
    (122) constant -> . STR_LIT
    (87) relational_expression -> . add_expression
    (88) relational_expression -> . relational_expression LT add_expression
    (89) relational_expression -> . relational_expression GT add_expression
    (90) relational_expression -> . relational_expression LE add_expression
    (91) relational_expression -> . relational_expression GE add_expression
    (92) add_expression -> . mult_expression
    (93) add_expression -> . add_expression ADD_OP mult_expression
    (94) add_expression -> . add_expression SUB_OP mult_expression
    (95) mult_expression -> . unary_expression
    (96) mult_expression -> . mult_expression MULT_OP unary_expression
    (97) mult_expression -> . mult_expression DIV_OP unary_expression
    (98) mult_expression -> . mult_expression MOD_OP unary_expression

    INC             shift and go to state 33
    DEC             shift and go to state 3
    SUB_OP          shift and go to state 28
    NOT             shift and go to state 31
    LPAREN          shift and go to state 20
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 25
    CHAR_ID         shift and go to state 7
    STR_ID          shift and go to state 13
    FLOAT_LIT       shift and go to state 27
    INT_LIT         shift and go to state 29
    CHAR_LIT        shift and go to state 6
    STR_LIT         shift and go to state 4

    constant                       shift and go to state 1
    assignment_expression          shift and go to state 59
    unary_expression               shift and go to state 2
    relational_expression          shift and go to state 11
    add_expression                 shift and go to state 22
    postfix_expression             shift and go to state 9
    conditional_expression         shift and go to state 30
    mult_expression                shift and go to state 18
    logical_and_expression         shift and go to state 21
    identifier                     shift and go to state 42
    expression                     shift and go to state 182
    logical_or_expression          shift and go to state 15
    equality_expression            shift and go to state 23
    primary_expression             shift and go to state 19

state 146

    (42) labeled_statement -> CASE constant_expression . COLON statement

    COLON           shift and go to state 183


state 147

    (79) constant_expression -> conditional_expression .

    RBRACKET        reduce using rule 79 (constant_expression -> conditional_expression .)
    COLON           reduce using rule 79 (constant_expression -> conditional_expression .)


state 148

    (54) selection_statement -> SWITCH LPAREN . expression RPAREN statement
    (65) expression -> . assignment_expression
    (66) expression -> . expression COMMA assignment_expression
    (67) assignment_expression -> . conditional_expression
    (68) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression COND_OP expression COLON conditional_expression
    (99) unary_expression -> . postfix_expression
    (100) unary_expression -> . INC unary_expression
    (101) unary_expression -> . DEC unary_expression
    (102) unary_expression -> . SUB_OP add_expression
    (103) unary_expression -> . NOT logical_or_expression
    (80) logical_or_expression -> . logical_and_expression
    (81) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (104) postfix_expression -> . primary_expression
    (105) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (106) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (107) postfix_expression -> . postfix_expression LPAREN RPAREN
    (108) postfix_expression -> . postfix_expression INC
    (109) postfix_expression -> . postfix_expression DEC
    (82) logical_and_expression -> . equality_expression
    (83) logical_and_expression -> . logical_and_expression AND equality_expression
    (110) primary_expression -> . identifier
    (111) primary_expression -> . constant
    (112) primary_expression -> . LPAREN expression RPAREN
    (84) equality_expression -> . relational_expression
    (85) equality_expression -> . equality_expression EQ relational_expression
    (86) equality_expression -> . equality_expression NEQ relational_expression
    (115) identifier -> . FLOAT_ID
    (116) identifier -> . INT_ID
    (117) identifier -> . CHAR_ID
    (118) identifier -> . STR_ID
    (119) constant -> . FLOAT_LIT
    (120) constant -> . INT_LIT
    (121) constant -> . CHAR_LIT
    (122) constant -> . STR_LIT
    (87) relational_expression -> . add_expression
    (88) relational_expression -> . relational_expression LT add_expression
    (89) relational_expression -> . relational_expression GT add_expression
    (90) relational_expression -> . relational_expression LE add_expression
    (91) relational_expression -> . relational_expression GE add_expression
    (92) add_expression -> . mult_expression
    (93) add_expression -> . add_expression ADD_OP mult_expression
    (94) add_expression -> . add_expression SUB_OP mult_expression
    (95) mult_expression -> . unary_expression
    (96) mult_expression -> . mult_expression MULT_OP unary_expression
    (97) mult_expression -> . mult_expression DIV_OP unary_expression
    (98) mult_expression -> . mult_expression MOD_OP unary_expression

    INC             shift and go to state 33
    DEC             shift and go to state 3
    SUB_OP          shift and go to state 28
    NOT             shift and go to state 31
    LPAREN          shift and go to state 20
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 25
    CHAR_ID         shift and go to state 7
    STR_ID          shift and go to state 13
    FLOAT_LIT       shift and go to state 27
    INT_LIT         shift and go to state 29
    CHAR_LIT        shift and go to state 6
    STR_LIT         shift and go to state 4

    constant                       shift and go to state 1
    assignment_expression          shift and go to state 59
    unary_expression               shift and go to state 2
    relational_expression          shift and go to state 11
    add_expression                 shift and go to state 22
    postfix_expression             shift and go to state 9
    conditional_expression         shift and go to state 30
    mult_expression                shift and go to state 18
    logical_and_expression         shift and go to state 21
    identifier                     shift and go to state 42
    expression                     shift and go to state 184
    logical_or_expression          shift and go to state 15
    equality_expression            shift and go to state 23
    primary_expression             shift and go to state 19

state 149

    (58) iteration_statement -> FOR LPAREN . expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (63) expression_opt -> . empty
    (64) expression_opt -> . expression
    (123) empty -> .
    (65) expression -> . assignment_expression
    (66) expression -> . expression COMMA assignment_expression
    (67) assignment_expression -> . conditional_expression
    (68) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression COND_OP expression COLON conditional_expression
    (99) unary_expression -> . postfix_expression
    (100) unary_expression -> . INC unary_expression
    (101) unary_expression -> . DEC unary_expression
    (102) unary_expression -> . SUB_OP add_expression
    (103) unary_expression -> . NOT logical_or_expression
    (80) logical_or_expression -> . logical_and_expression
    (81) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (104) postfix_expression -> . primary_expression
    (105) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (106) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (107) postfix_expression -> . postfix_expression LPAREN RPAREN
    (108) postfix_expression -> . postfix_expression INC
    (109) postfix_expression -> . postfix_expression DEC
    (82) logical_and_expression -> . equality_expression
    (83) logical_and_expression -> . logical_and_expression AND equality_expression
    (110) primary_expression -> . identifier
    (111) primary_expression -> . constant
    (112) primary_expression -> . LPAREN expression RPAREN
    (84) equality_expression -> . relational_expression
    (85) equality_expression -> . equality_expression EQ relational_expression
    (86) equality_expression -> . equality_expression NEQ relational_expression
    (115) identifier -> . FLOAT_ID
    (116) identifier -> . INT_ID
    (117) identifier -> . CHAR_ID
    (118) identifier -> . STR_ID
    (119) constant -> . FLOAT_LIT
    (120) constant -> . INT_LIT
    (121) constant -> . CHAR_LIT
    (122) constant -> . STR_LIT
    (87) relational_expression -> . add_expression
    (88) relational_expression -> . relational_expression LT add_expression
    (89) relational_expression -> . relational_expression GT add_expression
    (90) relational_expression -> . relational_expression LE add_expression
    (91) relational_expression -> . relational_expression GE add_expression
    (92) add_expression -> . mult_expression
    (93) add_expression -> . add_expression ADD_OP mult_expression
    (94) add_expression -> . add_expression SUB_OP mult_expression
    (95) mult_expression -> . unary_expression
    (96) mult_expression -> . mult_expression MULT_OP unary_expression
    (97) mult_expression -> . mult_expression DIV_OP unary_expression
    (98) mult_expression -> . mult_expression MOD_OP unary_expression

    SEMI            reduce using rule 123 (empty -> .)
    INC             shift and go to state 33
    DEC             shift and go to state 3
    SUB_OP          shift and go to state 28
    NOT             shift and go to state 31
    LPAREN          shift and go to state 20
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 25
    CHAR_ID         shift and go to state 7
    STR_ID          shift and go to state 13
    FLOAT_LIT       shift and go to state 27
    INT_LIT         shift and go to state 29
    CHAR_LIT        shift and go to state 6
    STR_LIT         shift and go to state 4

    constant                       shift and go to state 1
    assignment_expression          shift and go to state 59
    unary_expression               shift and go to state 2
    relational_expression          shift and go to state 11
    add_expression                 shift and go to state 22
    postfix_expression             shift and go to state 9
    expression_opt                 shift and go to state 185
    equality_expression            shift and go to state 23
    conditional_expression         shift and go to state 30
    mult_expression                shift and go to state 18
    logical_and_expression         shift and go to state 21
    identifier                     shift and go to state 42
    expression                     shift and go to state 108
    logical_or_expression          shift and go to state 15
    empty                          shift and go to state 104
    primary_expression             shift and go to state 19

state 150

    (44) expression_statement -> expression_opt SEMI .

    RBRACE          reduce using rule 44 (expression_statement -> expression_opt SEMI .)
    CASE            reduce using rule 44 (expression_statement -> expression_opt SEMI .)
    DEFAULT         reduce using rule 44 (expression_statement -> expression_opt SEMI .)
    LBRACE          reduce using rule 44 (expression_statement -> expression_opt SEMI .)
    PRINT           reduce using rule 44 (expression_statement -> expression_opt SEMI .)
    SCAN            reduce using rule 44 (expression_statement -> expression_opt SEMI .)
    IF              reduce using rule 44 (expression_statement -> expression_opt SEMI .)
    SWITCH          reduce using rule 44 (expression_statement -> expression_opt SEMI .)
    WHILE           reduce using rule 44 (expression_statement -> expression_opt SEMI .)
    FOR             reduce using rule 44 (expression_statement -> expression_opt SEMI .)
    DO              reduce using rule 44 (expression_statement -> expression_opt SEMI .)
    CONTINUE        reduce using rule 44 (expression_statement -> expression_opt SEMI .)
    BREAK           reduce using rule 44 (expression_statement -> expression_opt SEMI .)
    RETURN          reduce using rule 44 (expression_statement -> expression_opt SEMI .)
    FLOAT_ID        reduce using rule 44 (expression_statement -> expression_opt SEMI .)
    INT_ID          reduce using rule 44 (expression_statement -> expression_opt SEMI .)
    CHAR_ID         reduce using rule 44 (expression_statement -> expression_opt SEMI .)
    STR_ID          reduce using rule 44 (expression_statement -> expression_opt SEMI .)
    INC             reduce using rule 44 (expression_statement -> expression_opt SEMI .)
    DEC             reduce using rule 44 (expression_statement -> expression_opt SEMI .)
    SUB_OP          reduce using rule 44 (expression_statement -> expression_opt SEMI .)
    NOT             reduce using rule 44 (expression_statement -> expression_opt SEMI .)
    LPAREN          reduce using rule 44 (expression_statement -> expression_opt SEMI .)
    FLOAT_LIT       reduce using rule 44 (expression_statement -> expression_opt SEMI .)
    INT_LIT         reduce using rule 44 (expression_statement -> expression_opt SEMI .)
    CHAR_LIT        reduce using rule 44 (expression_statement -> expression_opt SEMI .)
    STR_LIT         reduce using rule 44 (expression_statement -> expression_opt SEMI .)
    SEMI            reduce using rule 44 (expression_statement -> expression_opt SEMI .)
    ELSE            reduce using rule 44 (expression_statement -> expression_opt SEMI .)
    ELSE_IF         reduce using rule 44 (expression_statement -> expression_opt SEMI .)


state 151

    (18) declarator -> LPAREN declarator . RPAREN
    (19) declarator -> declarator . LBRACKET constant_expression_opt RBRACKET

    RPAREN          shift and go to state 186
    LBRACKET        shift and go to state 153


state 152

    (17) declarator -> identifier .
    (110) primary_expression -> identifier .

  ! reduce/reduce conflict for LBRACKET resolved using rule 17 (declarator -> identifier .)
  ! reduce/reduce conflict for RPAREN resolved using rule 17 (declarator -> identifier .)
    RPAREN          reduce using rule 17 (declarator -> identifier .)
    LBRACKET        reduce using rule 17 (declarator -> identifier .)
    LPAREN          reduce using rule 110 (primary_expression -> identifier .)
    INC             reduce using rule 110 (primary_expression -> identifier .)
    DEC             reduce using rule 110 (primary_expression -> identifier .)
    ASSIGN_OP       reduce using rule 110 (primary_expression -> identifier .)
    ADD_ASSIGN      reduce using rule 110 (primary_expression -> identifier .)
    MIN_ASSIGN      reduce using rule 110 (primary_expression -> identifier .)
    MUL_ASSIGN      reduce using rule 110 (primary_expression -> identifier .)
    DIV_ASSIGN      reduce using rule 110 (primary_expression -> identifier .)
    MOD_ASSIGN      reduce using rule 110 (primary_expression -> identifier .)
    MULT_OP         reduce using rule 110 (primary_expression -> identifier .)
    DIV_OP          reduce using rule 110 (primary_expression -> identifier .)
    MOD_OP          reduce using rule 110 (primary_expression -> identifier .)
    ADD_OP          reduce using rule 110 (primary_expression -> identifier .)
    SUB_OP          reduce using rule 110 (primary_expression -> identifier .)
    LT              reduce using rule 110 (primary_expression -> identifier .)
    GT              reduce using rule 110 (primary_expression -> identifier .)
    LE              reduce using rule 110 (primary_expression -> identifier .)
    GE              reduce using rule 110 (primary_expression -> identifier .)
    EQ              reduce using rule 110 (primary_expression -> identifier .)
    NEQ             reduce using rule 110 (primary_expression -> identifier .)
    OR              reduce using rule 110 (primary_expression -> identifier .)
    AND             reduce using rule 110 (primary_expression -> identifier .)
    COND_OP         reduce using rule 110 (primary_expression -> identifier .)
    COMMA           reduce using rule 110 (primary_expression -> identifier .)

  ! LBRACKET        [ reduce using rule 110 (primary_expression -> identifier .) ]
  ! RPAREN          [ reduce using rule 110 (primary_expression -> identifier .) ]


state 153

    (19) declarator -> declarator LBRACKET . constant_expression_opt RBRACKET
    (77) constant_expression_opt -> . empty
    (78) constant_expression_opt -> . constant_expression
    (123) empty -> .
    (79) constant_expression -> . conditional_expression
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression COND_OP expression COLON conditional_expression
    (80) logical_or_expression -> . logical_and_expression
    (81) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (82) logical_and_expression -> . equality_expression
    (83) logical_and_expression -> . logical_and_expression AND equality_expression
    (84) equality_expression -> . relational_expression
    (85) equality_expression -> . equality_expression EQ relational_expression
    (86) equality_expression -> . equality_expression NEQ relational_expression
    (87) relational_expression -> . add_expression
    (88) relational_expression -> . relational_expression LT add_expression
    (89) relational_expression -> . relational_expression GT add_expression
    (90) relational_expression -> . relational_expression LE add_expression
    (91) relational_expression -> . relational_expression GE add_expression
    (92) add_expression -> . mult_expression
    (93) add_expression -> . add_expression ADD_OP mult_expression
    (94) add_expression -> . add_expression SUB_OP mult_expression
    (95) mult_expression -> . unary_expression
    (96) mult_expression -> . mult_expression MULT_OP unary_expression
    (97) mult_expression -> . mult_expression DIV_OP unary_expression
    (98) mult_expression -> . mult_expression MOD_OP unary_expression
    (99) unary_expression -> . postfix_expression
    (100) unary_expression -> . INC unary_expression
    (101) unary_expression -> . DEC unary_expression
    (102) unary_expression -> . SUB_OP add_expression
    (103) unary_expression -> . NOT logical_or_expression
    (104) postfix_expression -> . primary_expression
    (105) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (106) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (107) postfix_expression -> . postfix_expression LPAREN RPAREN
    (108) postfix_expression -> . postfix_expression INC
    (109) postfix_expression -> . postfix_expression DEC
    (110) primary_expression -> . identifier
    (111) primary_expression -> . constant
    (112) primary_expression -> . LPAREN expression RPAREN
    (115) identifier -> . FLOAT_ID
    (116) identifier -> . INT_ID
    (117) identifier -> . CHAR_ID
    (118) identifier -> . STR_ID
    (119) constant -> . FLOAT_LIT
    (120) constant -> . INT_LIT
    (121) constant -> . CHAR_LIT
    (122) constant -> . STR_LIT

    RBRACKET        reduce using rule 123 (empty -> .)
    INC             shift and go to state 33
    DEC             shift and go to state 3
    SUB_OP          shift and go to state 28
    NOT             shift and go to state 31
    LPAREN          shift and go to state 20
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 25
    CHAR_ID         shift and go to state 7
    STR_ID          shift and go to state 13
    FLOAT_LIT       shift and go to state 27
    INT_LIT         shift and go to state 29
    CHAR_LIT        shift and go to state 6
    STR_LIT         shift and go to state 4

    constant                       shift and go to state 1
    unary_expression               shift and go to state 70
    add_expression                 shift and go to state 22
    constant_expression_opt        shift and go to state 188
    postfix_expression             shift and go to state 9
    equality_expression            shift and go to state 23
    empty                          shift and go to state 187
    primary_expression             shift and go to state 19
    conditional_expression         shift and go to state 147
    mult_expression                shift and go to state 18
    logical_and_expression         shift and go to state 21
    identifier                     shift and go to state 42
    logical_or_expression          shift and go to state 15
    constant_expression            shift and go to state 189
    relational_expression          shift and go to state 11

state 154

    (16) init_declarator -> declarator ASSIGN_OP . initializer
    (20) initializer -> . assignment_expression
    (21) initializer -> . LBRACE initializer_list RBRACE
    (22) initializer -> . LBRACE initializer_list COMMA RBRACE
    (67) assignment_expression -> . conditional_expression
    (68) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression COND_OP expression COLON conditional_expression
    (99) unary_expression -> . postfix_expression
    (100) unary_expression -> . INC unary_expression
    (101) unary_expression -> . DEC unary_expression
    (102) unary_expression -> . SUB_OP add_expression
    (103) unary_expression -> . NOT logical_or_expression
    (80) logical_or_expression -> . logical_and_expression
    (81) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (104) postfix_expression -> . primary_expression
    (105) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (106) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (107) postfix_expression -> . postfix_expression LPAREN RPAREN
    (108) postfix_expression -> . postfix_expression INC
    (109) postfix_expression -> . postfix_expression DEC
    (82) logical_and_expression -> . equality_expression
    (83) logical_and_expression -> . logical_and_expression AND equality_expression
    (110) primary_expression -> . identifier
    (111) primary_expression -> . constant
    (112) primary_expression -> . LPAREN expression RPAREN
    (84) equality_expression -> . relational_expression
    (85) equality_expression -> . equality_expression EQ relational_expression
    (86) equality_expression -> . equality_expression NEQ relational_expression
    (115) identifier -> . FLOAT_ID
    (116) identifier -> . INT_ID
    (117) identifier -> . CHAR_ID
    (118) identifier -> . STR_ID
    (119) constant -> . FLOAT_LIT
    (120) constant -> . INT_LIT
    (121) constant -> . CHAR_LIT
    (122) constant -> . STR_LIT
    (87) relational_expression -> . add_expression
    (88) relational_expression -> . relational_expression LT add_expression
    (89) relational_expression -> . relational_expression GT add_expression
    (90) relational_expression -> . relational_expression LE add_expression
    (91) relational_expression -> . relational_expression GE add_expression
    (92) add_expression -> . mult_expression
    (93) add_expression -> . add_expression ADD_OP mult_expression
    (94) add_expression -> . add_expression SUB_OP mult_expression
    (95) mult_expression -> . unary_expression
    (96) mult_expression -> . mult_expression MULT_OP unary_expression
    (97) mult_expression -> . mult_expression DIV_OP unary_expression
    (98) mult_expression -> . mult_expression MOD_OP unary_expression

    LBRACE          shift and go to state 192
    INC             shift and go to state 33
    DEC             shift and go to state 3
    SUB_OP          shift and go to state 28
    NOT             shift and go to state 31
    LPAREN          shift and go to state 20
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 25
    CHAR_ID         shift and go to state 7
    STR_ID          shift and go to state 13
    FLOAT_LIT       shift and go to state 27
    INT_LIT         shift and go to state 29
    CHAR_LIT        shift and go to state 6
    STR_LIT         shift and go to state 4

    identifier                     shift and go to state 42
    constant                       shift and go to state 1
    assignment_expression          shift and go to state 191
    unary_expression               shift and go to state 2
    relational_expression          shift and go to state 11
    add_expression                 shift and go to state 22
    postfix_expression             shift and go to state 9
    initializer                    shift and go to state 190
    conditional_expression         shift and go to state 30
    mult_expression                shift and go to state 18
    logical_and_expression         shift and go to state 21
    logical_or_expression          shift and go to state 15
    equality_expression            shift and go to state 23
    primary_expression             shift and go to state 19

state 155

    (51) selection_statement -> IF LPAREN . expression RPAREN statement
    (52) selection_statement -> IF LPAREN . expression RPAREN statement ELSE statement
    (53) selection_statement -> IF LPAREN . expression RPAREN statement else_if_statement ELSE statement
    (65) expression -> . assignment_expression
    (66) expression -> . expression COMMA assignment_expression
    (67) assignment_expression -> . conditional_expression
    (68) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression COND_OP expression COLON conditional_expression
    (99) unary_expression -> . postfix_expression
    (100) unary_expression -> . INC unary_expression
    (101) unary_expression -> . DEC unary_expression
    (102) unary_expression -> . SUB_OP add_expression
    (103) unary_expression -> . NOT logical_or_expression
    (80) logical_or_expression -> . logical_and_expression
    (81) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (104) postfix_expression -> . primary_expression
    (105) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (106) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (107) postfix_expression -> . postfix_expression LPAREN RPAREN
    (108) postfix_expression -> . postfix_expression INC
    (109) postfix_expression -> . postfix_expression DEC
    (82) logical_and_expression -> . equality_expression
    (83) logical_and_expression -> . logical_and_expression AND equality_expression
    (110) primary_expression -> . identifier
    (111) primary_expression -> . constant
    (112) primary_expression -> . LPAREN expression RPAREN
    (84) equality_expression -> . relational_expression
    (85) equality_expression -> . equality_expression EQ relational_expression
    (86) equality_expression -> . equality_expression NEQ relational_expression
    (115) identifier -> . FLOAT_ID
    (116) identifier -> . INT_ID
    (117) identifier -> . CHAR_ID
    (118) identifier -> . STR_ID
    (119) constant -> . FLOAT_LIT
    (120) constant -> . INT_LIT
    (121) constant -> . CHAR_LIT
    (122) constant -> . STR_LIT
    (87) relational_expression -> . add_expression
    (88) relational_expression -> . relational_expression LT add_expression
    (89) relational_expression -> . relational_expression GT add_expression
    (90) relational_expression -> . relational_expression LE add_expression
    (91) relational_expression -> . relational_expression GE add_expression
    (92) add_expression -> . mult_expression
    (93) add_expression -> . add_expression ADD_OP mult_expression
    (94) add_expression -> . add_expression SUB_OP mult_expression
    (95) mult_expression -> . unary_expression
    (96) mult_expression -> . mult_expression MULT_OP unary_expression
    (97) mult_expression -> . mult_expression DIV_OP unary_expression
    (98) mult_expression -> . mult_expression MOD_OP unary_expression

    INC             shift and go to state 33
    DEC             shift and go to state 3
    SUB_OP          shift and go to state 28
    NOT             shift and go to state 31
    LPAREN          shift and go to state 20
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 25
    CHAR_ID         shift and go to state 7
    STR_ID          shift and go to state 13
    FLOAT_LIT       shift and go to state 27
    INT_LIT         shift and go to state 29
    CHAR_LIT        shift and go to state 6
    STR_LIT         shift and go to state 4

    assignment_expression          shift and go to state 59
    unary_expression               shift and go to state 2
    relational_expression          shift and go to state 11
    add_expression                 shift and go to state 22
    postfix_expression             shift and go to state 9
    conditional_expression         shift and go to state 30
    mult_expression                shift and go to state 18
    constant                       shift and go to state 1
    logical_and_expression         shift and go to state 21
    identifier                     shift and go to state 42
    expression                     shift and go to state 193
    logical_or_expression          shift and go to state 15
    equality_expression            shift and go to state 23
    primary_expression             shift and go to state 19

state 156

    (47) compound_statement -> LBRACE declaration_list RBRACE .

    RBRACE          reduce using rule 47 (compound_statement -> LBRACE declaration_list RBRACE .)
    CASE            reduce using rule 47 (compound_statement -> LBRACE declaration_list RBRACE .)
    DEFAULT         reduce using rule 47 (compound_statement -> LBRACE declaration_list RBRACE .)
    LBRACE          reduce using rule 47 (compound_statement -> LBRACE declaration_list RBRACE .)
    PRINT           reduce using rule 47 (compound_statement -> LBRACE declaration_list RBRACE .)
    SCAN            reduce using rule 47 (compound_statement -> LBRACE declaration_list RBRACE .)
    IF              reduce using rule 47 (compound_statement -> LBRACE declaration_list RBRACE .)
    SWITCH          reduce using rule 47 (compound_statement -> LBRACE declaration_list RBRACE .)
    WHILE           reduce using rule 47 (compound_statement -> LBRACE declaration_list RBRACE .)
    FOR             reduce using rule 47 (compound_statement -> LBRACE declaration_list RBRACE .)
    DO              reduce using rule 47 (compound_statement -> LBRACE declaration_list RBRACE .)
    CONTINUE        reduce using rule 47 (compound_statement -> LBRACE declaration_list RBRACE .)
    BREAK           reduce using rule 47 (compound_statement -> LBRACE declaration_list RBRACE .)
    RETURN          reduce using rule 47 (compound_statement -> LBRACE declaration_list RBRACE .)
    FLOAT_ID        reduce using rule 47 (compound_statement -> LBRACE declaration_list RBRACE .)
    INT_ID          reduce using rule 47 (compound_statement -> LBRACE declaration_list RBRACE .)
    CHAR_ID         reduce using rule 47 (compound_statement -> LBRACE declaration_list RBRACE .)
    STR_ID          reduce using rule 47 (compound_statement -> LBRACE declaration_list RBRACE .)
    INC             reduce using rule 47 (compound_statement -> LBRACE declaration_list RBRACE .)
    DEC             reduce using rule 47 (compound_statement -> LBRACE declaration_list RBRACE .)
    SUB_OP          reduce using rule 47 (compound_statement -> LBRACE declaration_list RBRACE .)
    NOT             reduce using rule 47 (compound_statement -> LBRACE declaration_list RBRACE .)
    LPAREN          reduce using rule 47 (compound_statement -> LBRACE declaration_list RBRACE .)
    FLOAT_LIT       reduce using rule 47 (compound_statement -> LBRACE declaration_list RBRACE .)
    INT_LIT         reduce using rule 47 (compound_statement -> LBRACE declaration_list RBRACE .)
    CHAR_LIT        reduce using rule 47 (compound_statement -> LBRACE declaration_list RBRACE .)
    STR_LIT         reduce using rule 47 (compound_statement -> LBRACE declaration_list RBRACE .)
    SEMI            reduce using rule 47 (compound_statement -> LBRACE declaration_list RBRACE .)
    ELSE            reduce using rule 47 (compound_statement -> LBRACE declaration_list RBRACE .)
    ELSE_IF         reduce using rule 47 (compound_statement -> LBRACE declaration_list RBRACE .)
    $end            reduce using rule 47 (compound_statement -> LBRACE declaration_list RBRACE .)
    MAIN            reduce using rule 47 (compound_statement -> LBRACE declaration_list RBRACE .)


state 157

    (12) declaration_list -> declaration_list declaration .

    RBRACE          reduce using rule 12 (declaration_list -> declaration_list declaration .)
    CASE            reduce using rule 12 (declaration_list -> declaration_list declaration .)
    DEFAULT         reduce using rule 12 (declaration_list -> declaration_list declaration .)
    LBRACE          reduce using rule 12 (declaration_list -> declaration_list declaration .)
    PRINT           reduce using rule 12 (declaration_list -> declaration_list declaration .)
    SCAN            reduce using rule 12 (declaration_list -> declaration_list declaration .)
    IF              reduce using rule 12 (declaration_list -> declaration_list declaration .)
    SWITCH          reduce using rule 12 (declaration_list -> declaration_list declaration .)
    WHILE           reduce using rule 12 (declaration_list -> declaration_list declaration .)
    FOR             reduce using rule 12 (declaration_list -> declaration_list declaration .)
    DO              reduce using rule 12 (declaration_list -> declaration_list declaration .)
    CONTINUE        reduce using rule 12 (declaration_list -> declaration_list declaration .)
    BREAK           reduce using rule 12 (declaration_list -> declaration_list declaration .)
    RETURN          reduce using rule 12 (declaration_list -> declaration_list declaration .)
    FLOAT_ID        reduce using rule 12 (declaration_list -> declaration_list declaration .)
    INT_ID          reduce using rule 12 (declaration_list -> declaration_list declaration .)
    CHAR_ID         reduce using rule 12 (declaration_list -> declaration_list declaration .)
    STR_ID          reduce using rule 12 (declaration_list -> declaration_list declaration .)
    LPAREN          reduce using rule 12 (declaration_list -> declaration_list declaration .)
    INC             reduce using rule 12 (declaration_list -> declaration_list declaration .)
    DEC             reduce using rule 12 (declaration_list -> declaration_list declaration .)
    SUB_OP          reduce using rule 12 (declaration_list -> declaration_list declaration .)
    NOT             reduce using rule 12 (declaration_list -> declaration_list declaration .)
    FLOAT_LIT       reduce using rule 12 (declaration_list -> declaration_list declaration .)
    INT_LIT         reduce using rule 12 (declaration_list -> declaration_list declaration .)
    CHAR_LIT        reduce using rule 12 (declaration_list -> declaration_list declaration .)
    STR_LIT         reduce using rule 12 (declaration_list -> declaration_list declaration .)
    SEMI            reduce using rule 12 (declaration_list -> declaration_list declaration .)


state 158

    (45) compound_statement -> LBRACE declaration_list statement_list . RBRACE
    (50) statement_list -> statement_list . statement
    (31) statement -> . labeled_statement
    (32) statement -> . expression_statement
    (33) statement -> . compound_statement
    (34) statement -> . print_statement
    (35) statement -> . scan_statement
    (36) statement -> . selection_statement
    (37) statement -> . iteration_statement
    (38) statement -> . jump_statement
    (41) labeled_statement -> . identifier COLON statement
    (42) labeled_statement -> . CASE constant_expression COLON statement
    (43) labeled_statement -> . DEFAULT COLON statement
    (44) expression_statement -> . expression_opt SEMI
    (45) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (46) compound_statement -> . LBRACE statement_list RBRACE
    (47) compound_statement -> . LBRACE declaration_list RBRACE
    (48) compound_statement -> . LBRACE RBRACE
    (39) print_statement -> . PRINT LPAREN assignment_expression RPAREN
    (40) scan_statement -> . SCAN LPAREN identifier RPAREN
    (51) selection_statement -> . IF LPAREN expression RPAREN statement
    (52) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (53) selection_statement -> . IF LPAREN expression RPAREN statement else_if_statement ELSE statement
    (54) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (57) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (58) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (59) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (60) jump_statement -> . CONTINUE SEMI
    (61) jump_statement -> . BREAK SEMI
    (62) jump_statement -> . RETURN expression_opt SEMI
    (115) identifier -> . FLOAT_ID
    (116) identifier -> . INT_ID
    (117) identifier -> . CHAR_ID
    (118) identifier -> . STR_ID
    (63) expression_opt -> . empty
    (64) expression_opt -> . expression
    (123) empty -> .
    (65) expression -> . assignment_expression
    (66) expression -> . expression COMMA assignment_expression
    (67) assignment_expression -> . conditional_expression
    (68) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression COND_OP expression COLON conditional_expression
    (99) unary_expression -> . postfix_expression
    (100) unary_expression -> . INC unary_expression
    (101) unary_expression -> . DEC unary_expression
    (102) unary_expression -> . SUB_OP add_expression
    (103) unary_expression -> . NOT logical_or_expression
    (80) logical_or_expression -> . logical_and_expression
    (81) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (104) postfix_expression -> . primary_expression
    (105) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (106) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (107) postfix_expression -> . postfix_expression LPAREN RPAREN
    (108) postfix_expression -> . postfix_expression INC
    (109) postfix_expression -> . postfix_expression DEC
    (82) logical_and_expression -> . equality_expression
    (83) logical_and_expression -> . logical_and_expression AND equality_expression
    (110) primary_expression -> . identifier
    (111) primary_expression -> . constant
    (112) primary_expression -> . LPAREN expression RPAREN
    (84) equality_expression -> . relational_expression
    (85) equality_expression -> . equality_expression EQ relational_expression
    (86) equality_expression -> . equality_expression NEQ relational_expression
    (119) constant -> . FLOAT_LIT
    (120) constant -> . INT_LIT
    (121) constant -> . CHAR_LIT
    (122) constant -> . STR_LIT
    (87) relational_expression -> . add_expression
    (88) relational_expression -> . relational_expression LT add_expression
    (89) relational_expression -> . relational_expression GT add_expression
    (90) relational_expression -> . relational_expression LE add_expression
    (91) relational_expression -> . relational_expression GE add_expression
    (92) add_expression -> . mult_expression
    (93) add_expression -> . add_expression ADD_OP mult_expression
    (94) add_expression -> . add_expression SUB_OP mult_expression
    (95) mult_expression -> . unary_expression
    (96) mult_expression -> . mult_expression MULT_OP unary_expression
    (97) mult_expression -> . mult_expression DIV_OP unary_expression
    (98) mult_expression -> . mult_expression MOD_OP unary_expression

    RBRACE          shift and go to state 194
    CASE            shift and go to state 86
    DEFAULT         shift and go to state 80
    LBRACE          shift and go to state 43
    PRINT           shift and go to state 82
    SCAN            shift and go to state 79
    IF              shift and go to state 98
    SWITCH          shift and go to state 89
    WHILE           shift and go to state 83
    FOR             shift and go to state 92
    DO              shift and go to state 77
    CONTINUE        shift and go to state 103
    BREAK           shift and go to state 102
    RETURN          shift and go to state 78
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 25
    CHAR_ID         shift and go to state 7
    STR_ID          shift and go to state 13
    SEMI            reduce using rule 123 (empty -> .)
    INC             shift and go to state 33
    DEC             shift and go to state 3
    SUB_OP          shift and go to state 28
    NOT             shift and go to state 31
    LPAREN          shift and go to state 20
    FLOAT_LIT       shift and go to state 27
    INT_LIT         shift and go to state 29
    CHAR_LIT        shift and go to state 6
    STR_LIT         shift and go to state 4

    expression_statement           shift and go to state 76
    constant                       shift and go to state 1
    unary_expression               shift and go to state 2
    print_statement                shift and go to state 84
    iteration_statement            shift and go to state 85
    compound_statement             shift and go to state 87
    selection_statement            shift and go to state 88
    postfix_expression             shift and go to state 9
    relational_expression          shift and go to state 11
    statement                      shift and go to state 161
    logical_or_expression          shift and go to state 15
    empty                          shift and go to state 104
    assignment_expression          shift and go to state 59
    scan_statement                 shift and go to state 93
    mult_expression                shift and go to state 18
    expression_opt                 shift and go to state 94
    primary_expression             shift and go to state 19
    logical_and_expression         shift and go to state 21
    add_expression                 shift and go to state 22
    equality_expression            shift and go to state 23
    jump_statement                 shift and go to state 99
    labeled_statement              shift and go to state 100
    conditional_expression         shift and go to state 30
    identifier                     shift and go to state 138
    expression                     shift and go to state 108

state 159

    (61) jump_statement -> BREAK SEMI .

    RBRACE          reduce using rule 61 (jump_statement -> BREAK SEMI .)
    CASE            reduce using rule 61 (jump_statement -> BREAK SEMI .)
    DEFAULT         reduce using rule 61 (jump_statement -> BREAK SEMI .)
    LBRACE          reduce using rule 61 (jump_statement -> BREAK SEMI .)
    PRINT           reduce using rule 61 (jump_statement -> BREAK SEMI .)
    SCAN            reduce using rule 61 (jump_statement -> BREAK SEMI .)
    IF              reduce using rule 61 (jump_statement -> BREAK SEMI .)
    SWITCH          reduce using rule 61 (jump_statement -> BREAK SEMI .)
    WHILE           reduce using rule 61 (jump_statement -> BREAK SEMI .)
    FOR             reduce using rule 61 (jump_statement -> BREAK SEMI .)
    DO              reduce using rule 61 (jump_statement -> BREAK SEMI .)
    CONTINUE        reduce using rule 61 (jump_statement -> BREAK SEMI .)
    BREAK           reduce using rule 61 (jump_statement -> BREAK SEMI .)
    RETURN          reduce using rule 61 (jump_statement -> BREAK SEMI .)
    FLOAT_ID        reduce using rule 61 (jump_statement -> BREAK SEMI .)
    INT_ID          reduce using rule 61 (jump_statement -> BREAK SEMI .)
    CHAR_ID         reduce using rule 61 (jump_statement -> BREAK SEMI .)
    STR_ID          reduce using rule 61 (jump_statement -> BREAK SEMI .)
    INC             reduce using rule 61 (jump_statement -> BREAK SEMI .)
    DEC             reduce using rule 61 (jump_statement -> BREAK SEMI .)
    SUB_OP          reduce using rule 61 (jump_statement -> BREAK SEMI .)
    NOT             reduce using rule 61 (jump_statement -> BREAK SEMI .)
    LPAREN          reduce using rule 61 (jump_statement -> BREAK SEMI .)
    FLOAT_LIT       reduce using rule 61 (jump_statement -> BREAK SEMI .)
    INT_LIT         reduce using rule 61 (jump_statement -> BREAK SEMI .)
    CHAR_LIT        reduce using rule 61 (jump_statement -> BREAK SEMI .)
    STR_LIT         reduce using rule 61 (jump_statement -> BREAK SEMI .)
    SEMI            reduce using rule 61 (jump_statement -> BREAK SEMI .)
    ELSE            reduce using rule 61 (jump_statement -> BREAK SEMI .)
    ELSE_IF         reduce using rule 61 (jump_statement -> BREAK SEMI .)


state 160

    (60) jump_statement -> CONTINUE SEMI .

    RBRACE          reduce using rule 60 (jump_statement -> CONTINUE SEMI .)
    CASE            reduce using rule 60 (jump_statement -> CONTINUE SEMI .)
    DEFAULT         reduce using rule 60 (jump_statement -> CONTINUE SEMI .)
    LBRACE          reduce using rule 60 (jump_statement -> CONTINUE SEMI .)
    PRINT           reduce using rule 60 (jump_statement -> CONTINUE SEMI .)
    SCAN            reduce using rule 60 (jump_statement -> CONTINUE SEMI .)
    IF              reduce using rule 60 (jump_statement -> CONTINUE SEMI .)
    SWITCH          reduce using rule 60 (jump_statement -> CONTINUE SEMI .)
    WHILE           reduce using rule 60 (jump_statement -> CONTINUE SEMI .)
    FOR             reduce using rule 60 (jump_statement -> CONTINUE SEMI .)
    DO              reduce using rule 60 (jump_statement -> CONTINUE SEMI .)
    CONTINUE        reduce using rule 60 (jump_statement -> CONTINUE SEMI .)
    BREAK           reduce using rule 60 (jump_statement -> CONTINUE SEMI .)
    RETURN          reduce using rule 60 (jump_statement -> CONTINUE SEMI .)
    FLOAT_ID        reduce using rule 60 (jump_statement -> CONTINUE SEMI .)
    INT_ID          reduce using rule 60 (jump_statement -> CONTINUE SEMI .)
    CHAR_ID         reduce using rule 60 (jump_statement -> CONTINUE SEMI .)
    STR_ID          reduce using rule 60 (jump_statement -> CONTINUE SEMI .)
    INC             reduce using rule 60 (jump_statement -> CONTINUE SEMI .)
    DEC             reduce using rule 60 (jump_statement -> CONTINUE SEMI .)
    SUB_OP          reduce using rule 60 (jump_statement -> CONTINUE SEMI .)
    NOT             reduce using rule 60 (jump_statement -> CONTINUE SEMI .)
    LPAREN          reduce using rule 60 (jump_statement -> CONTINUE SEMI .)
    FLOAT_LIT       reduce using rule 60 (jump_statement -> CONTINUE SEMI .)
    INT_LIT         reduce using rule 60 (jump_statement -> CONTINUE SEMI .)
    CHAR_LIT        reduce using rule 60 (jump_statement -> CONTINUE SEMI .)
    STR_LIT         reduce using rule 60 (jump_statement -> CONTINUE SEMI .)
    SEMI            reduce using rule 60 (jump_statement -> CONTINUE SEMI .)
    ELSE            reduce using rule 60 (jump_statement -> CONTINUE SEMI .)
    ELSE_IF         reduce using rule 60 (jump_statement -> CONTINUE SEMI .)


state 161

    (50) statement_list -> statement_list statement .

    RBRACE          reduce using rule 50 (statement_list -> statement_list statement .)
    CASE            reduce using rule 50 (statement_list -> statement_list statement .)
    DEFAULT         reduce using rule 50 (statement_list -> statement_list statement .)
    LBRACE          reduce using rule 50 (statement_list -> statement_list statement .)
    PRINT           reduce using rule 50 (statement_list -> statement_list statement .)
    SCAN            reduce using rule 50 (statement_list -> statement_list statement .)
    IF              reduce using rule 50 (statement_list -> statement_list statement .)
    SWITCH          reduce using rule 50 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 50 (statement_list -> statement_list statement .)
    FOR             reduce using rule 50 (statement_list -> statement_list statement .)
    DO              reduce using rule 50 (statement_list -> statement_list statement .)
    CONTINUE        reduce using rule 50 (statement_list -> statement_list statement .)
    BREAK           reduce using rule 50 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 50 (statement_list -> statement_list statement .)
    FLOAT_ID        reduce using rule 50 (statement_list -> statement_list statement .)
    INT_ID          reduce using rule 50 (statement_list -> statement_list statement .)
    CHAR_ID         reduce using rule 50 (statement_list -> statement_list statement .)
    STR_ID          reduce using rule 50 (statement_list -> statement_list statement .)
    INC             reduce using rule 50 (statement_list -> statement_list statement .)
    DEC             reduce using rule 50 (statement_list -> statement_list statement .)
    SUB_OP          reduce using rule 50 (statement_list -> statement_list statement .)
    NOT             reduce using rule 50 (statement_list -> statement_list statement .)
    LPAREN          reduce using rule 50 (statement_list -> statement_list statement .)
    FLOAT_LIT       reduce using rule 50 (statement_list -> statement_list statement .)
    INT_LIT         reduce using rule 50 (statement_list -> statement_list statement .)
    CHAR_LIT        reduce using rule 50 (statement_list -> statement_list statement .)
    STR_LIT         reduce using rule 50 (statement_list -> statement_list statement .)
    SEMI            reduce using rule 50 (statement_list -> statement_list statement .)


state 162

    (46) compound_statement -> LBRACE statement_list RBRACE .

    RBRACE          reduce using rule 46 (compound_statement -> LBRACE statement_list RBRACE .)
    CASE            reduce using rule 46 (compound_statement -> LBRACE statement_list RBRACE .)
    DEFAULT         reduce using rule 46 (compound_statement -> LBRACE statement_list RBRACE .)
    LBRACE          reduce using rule 46 (compound_statement -> LBRACE statement_list RBRACE .)
    PRINT           reduce using rule 46 (compound_statement -> LBRACE statement_list RBRACE .)
    SCAN            reduce using rule 46 (compound_statement -> LBRACE statement_list RBRACE .)
    IF              reduce using rule 46 (compound_statement -> LBRACE statement_list RBRACE .)
    SWITCH          reduce using rule 46 (compound_statement -> LBRACE statement_list RBRACE .)
    WHILE           reduce using rule 46 (compound_statement -> LBRACE statement_list RBRACE .)
    FOR             reduce using rule 46 (compound_statement -> LBRACE statement_list RBRACE .)
    DO              reduce using rule 46 (compound_statement -> LBRACE statement_list RBRACE .)
    CONTINUE        reduce using rule 46 (compound_statement -> LBRACE statement_list RBRACE .)
    BREAK           reduce using rule 46 (compound_statement -> LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 46 (compound_statement -> LBRACE statement_list RBRACE .)
    FLOAT_ID        reduce using rule 46 (compound_statement -> LBRACE statement_list RBRACE .)
    INT_ID          reduce using rule 46 (compound_statement -> LBRACE statement_list RBRACE .)
    CHAR_ID         reduce using rule 46 (compound_statement -> LBRACE statement_list RBRACE .)
    STR_ID          reduce using rule 46 (compound_statement -> LBRACE statement_list RBRACE .)
    INC             reduce using rule 46 (compound_statement -> LBRACE statement_list RBRACE .)
    DEC             reduce using rule 46 (compound_statement -> LBRACE statement_list RBRACE .)
    SUB_OP          reduce using rule 46 (compound_statement -> LBRACE statement_list RBRACE .)
    NOT             reduce using rule 46 (compound_statement -> LBRACE statement_list RBRACE .)
    LPAREN          reduce using rule 46 (compound_statement -> LBRACE statement_list RBRACE .)
    FLOAT_LIT       reduce using rule 46 (compound_statement -> LBRACE statement_list RBRACE .)
    INT_LIT         reduce using rule 46 (compound_statement -> LBRACE statement_list RBRACE .)
    CHAR_LIT        reduce using rule 46 (compound_statement -> LBRACE statement_list RBRACE .)
    STR_LIT         reduce using rule 46 (compound_statement -> LBRACE statement_list RBRACE .)
    SEMI            reduce using rule 46 (compound_statement -> LBRACE statement_list RBRACE .)
    ELSE            reduce using rule 46 (compound_statement -> LBRACE statement_list RBRACE .)
    ELSE_IF         reduce using rule 46 (compound_statement -> LBRACE statement_list RBRACE .)
    $end            reduce using rule 46 (compound_statement -> LBRACE statement_list RBRACE .)
    MAIN            reduce using rule 46 (compound_statement -> LBRACE statement_list RBRACE .)


state 163

    (41) labeled_statement -> identifier COLON . statement
    (31) statement -> . labeled_statement
    (32) statement -> . expression_statement
    (33) statement -> . compound_statement
    (34) statement -> . print_statement
    (35) statement -> . scan_statement
    (36) statement -> . selection_statement
    (37) statement -> . iteration_statement
    (38) statement -> . jump_statement
    (41) labeled_statement -> . identifier COLON statement
    (42) labeled_statement -> . CASE constant_expression COLON statement
    (43) labeled_statement -> . DEFAULT COLON statement
    (44) expression_statement -> . expression_opt SEMI
    (45) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (46) compound_statement -> . LBRACE statement_list RBRACE
    (47) compound_statement -> . LBRACE declaration_list RBRACE
    (48) compound_statement -> . LBRACE RBRACE
    (39) print_statement -> . PRINT LPAREN assignment_expression RPAREN
    (40) scan_statement -> . SCAN LPAREN identifier RPAREN
    (51) selection_statement -> . IF LPAREN expression RPAREN statement
    (52) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (53) selection_statement -> . IF LPAREN expression RPAREN statement else_if_statement ELSE statement
    (54) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (57) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (58) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (59) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (60) jump_statement -> . CONTINUE SEMI
    (61) jump_statement -> . BREAK SEMI
    (62) jump_statement -> . RETURN expression_opt SEMI
    (115) identifier -> . FLOAT_ID
    (116) identifier -> . INT_ID
    (117) identifier -> . CHAR_ID
    (118) identifier -> . STR_ID
    (63) expression_opt -> . empty
    (64) expression_opt -> . expression
    (123) empty -> .
    (65) expression -> . assignment_expression
    (66) expression -> . expression COMMA assignment_expression
    (67) assignment_expression -> . conditional_expression
    (68) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression COND_OP expression COLON conditional_expression
    (99) unary_expression -> . postfix_expression
    (100) unary_expression -> . INC unary_expression
    (101) unary_expression -> . DEC unary_expression
    (102) unary_expression -> . SUB_OP add_expression
    (103) unary_expression -> . NOT logical_or_expression
    (80) logical_or_expression -> . logical_and_expression
    (81) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (104) postfix_expression -> . primary_expression
    (105) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (106) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (107) postfix_expression -> . postfix_expression LPAREN RPAREN
    (108) postfix_expression -> . postfix_expression INC
    (109) postfix_expression -> . postfix_expression DEC
    (82) logical_and_expression -> . equality_expression
    (83) logical_and_expression -> . logical_and_expression AND equality_expression
    (110) primary_expression -> . identifier
    (111) primary_expression -> . constant
    (112) primary_expression -> . LPAREN expression RPAREN
    (84) equality_expression -> . relational_expression
    (85) equality_expression -> . equality_expression EQ relational_expression
    (86) equality_expression -> . equality_expression NEQ relational_expression
    (119) constant -> . FLOAT_LIT
    (120) constant -> . INT_LIT
    (121) constant -> . CHAR_LIT
    (122) constant -> . STR_LIT
    (87) relational_expression -> . add_expression
    (88) relational_expression -> . relational_expression LT add_expression
    (89) relational_expression -> . relational_expression GT add_expression
    (90) relational_expression -> . relational_expression LE add_expression
    (91) relational_expression -> . relational_expression GE add_expression
    (92) add_expression -> . mult_expression
    (93) add_expression -> . add_expression ADD_OP mult_expression
    (94) add_expression -> . add_expression SUB_OP mult_expression
    (95) mult_expression -> . unary_expression
    (96) mult_expression -> . mult_expression MULT_OP unary_expression
    (97) mult_expression -> . mult_expression DIV_OP unary_expression
    (98) mult_expression -> . mult_expression MOD_OP unary_expression

    CASE            shift and go to state 86
    DEFAULT         shift and go to state 80
    LBRACE          shift and go to state 43
    PRINT           shift and go to state 82
    SCAN            shift and go to state 79
    IF              shift and go to state 98
    SWITCH          shift and go to state 89
    WHILE           shift and go to state 83
    FOR             shift and go to state 92
    DO              shift and go to state 77
    CONTINUE        shift and go to state 103
    BREAK           shift and go to state 102
    RETURN          shift and go to state 78
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 25
    CHAR_ID         shift and go to state 7
    STR_ID          shift and go to state 13
    SEMI            reduce using rule 123 (empty -> .)
    INC             shift and go to state 33
    DEC             shift and go to state 3
    SUB_OP          shift and go to state 28
    NOT             shift and go to state 31
    LPAREN          shift and go to state 20
    FLOAT_LIT       shift and go to state 27
    INT_LIT         shift and go to state 29
    CHAR_LIT        shift and go to state 6
    STR_LIT         shift and go to state 4

    expression_statement           shift and go to state 76
    constant                       shift and go to state 1
    unary_expression               shift and go to state 2
    print_statement                shift and go to state 84
    iteration_statement            shift and go to state 85
    compound_statement             shift and go to state 87
    selection_statement            shift and go to state 88
    postfix_expression             shift and go to state 9
    relational_expression          shift and go to state 11
    statement                      shift and go to state 195
    logical_or_expression          shift and go to state 15
    empty                          shift and go to state 104
    assignment_expression          shift and go to state 59
    scan_statement                 shift and go to state 93
    mult_expression                shift and go to state 18
    expression_opt                 shift and go to state 94
    primary_expression             shift and go to state 19
    logical_and_expression         shift and go to state 21
    add_expression                 shift and go to state 22
    equality_expression            shift and go to state 23
    jump_statement                 shift and go to state 99
    labeled_statement              shift and go to state 100
    conditional_expression         shift and go to state 30
    identifier                     shift and go to state 138
    expression                     shift and go to state 108

state 164

    (105) postfix_expression -> postfix_expression LBRACKET expression RBRACKET .

    LBRACKET        reduce using rule 105 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 105 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    INC             reduce using rule 105 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DEC             reduce using rule 105 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    ASSIGN_OP       reduce using rule 105 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    ADD_ASSIGN      reduce using rule 105 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MIN_ASSIGN      reduce using rule 105 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MUL_ASSIGN      reduce using rule 105 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DIV_ASSIGN      reduce using rule 105 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MOD_ASSIGN      reduce using rule 105 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MULT_OP         reduce using rule 105 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DIV_OP          reduce using rule 105 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MOD_OP          reduce using rule 105 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    ADD_OP          reduce using rule 105 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    SUB_OP          reduce using rule 105 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LT              reduce using rule 105 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    GT              reduce using rule 105 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LE              reduce using rule 105 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    GE              reduce using rule 105 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQ              reduce using rule 105 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    NEQ             reduce using rule 105 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    OR              reduce using rule 105 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    AND             reduce using rule 105 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    COND_OP         reduce using rule 105 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    NOT             reduce using rule 105 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    FLOAT_ID        reduce using rule 105 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    INT_ID          reduce using rule 105 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    CHAR_ID         reduce using rule 105 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    STR_ID          reduce using rule 105 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    FLOAT_LIT       reduce using rule 105 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    INT_LIT         reduce using rule 105 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    CHAR_LIT        reduce using rule 105 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    STR_LIT         reduce using rule 105 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MAIN            reduce using rule 105 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 105 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 105 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    SEMI            reduce using rule 105 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 105 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    COLON           reduce using rule 105 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 105 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)


state 165

    (106) postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .

    LBRACKET        reduce using rule 106 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LPAREN          reduce using rule 106 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    INC             reduce using rule 106 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    DEC             reduce using rule 106 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    ASSIGN_OP       reduce using rule 106 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    ADD_ASSIGN      reduce using rule 106 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MIN_ASSIGN      reduce using rule 106 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MUL_ASSIGN      reduce using rule 106 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    DIV_ASSIGN      reduce using rule 106 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MOD_ASSIGN      reduce using rule 106 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MULT_OP         reduce using rule 106 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    DIV_OP          reduce using rule 106 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MOD_OP          reduce using rule 106 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    ADD_OP          reduce using rule 106 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    SUB_OP          reduce using rule 106 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LT              reduce using rule 106 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    GT              reduce using rule 106 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LE              reduce using rule 106 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    GE              reduce using rule 106 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    EQ              reduce using rule 106 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    NEQ             reduce using rule 106 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    OR              reduce using rule 106 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    AND             reduce using rule 106 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    COND_OP         reduce using rule 106 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    NOT             reduce using rule 106 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    FLOAT_ID        reduce using rule 106 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    INT_ID          reduce using rule 106 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    CHAR_ID         reduce using rule 106 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    STR_ID          reduce using rule 106 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    FLOAT_LIT       reduce using rule 106 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    INT_LIT         reduce using rule 106 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    CHAR_LIT        reduce using rule 106 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    STR_LIT         reduce using rule 106 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MAIN            reduce using rule 106 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RPAREN          reduce using rule 106 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    COMMA           reduce using rule 106 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    SEMI            reduce using rule 106 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RBRACKET        reduce using rule 106 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    COLON           reduce using rule 106 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RBRACE          reduce using rule 106 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)


state 166

    (114) argument_expression_list -> argument_expression_list COMMA . assignment_expression
    (67) assignment_expression -> . conditional_expression
    (68) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression COND_OP expression COLON conditional_expression
    (99) unary_expression -> . postfix_expression
    (100) unary_expression -> . INC unary_expression
    (101) unary_expression -> . DEC unary_expression
    (102) unary_expression -> . SUB_OP add_expression
    (103) unary_expression -> . NOT logical_or_expression
    (80) logical_or_expression -> . logical_and_expression
    (81) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (104) postfix_expression -> . primary_expression
    (105) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (106) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (107) postfix_expression -> . postfix_expression LPAREN RPAREN
    (108) postfix_expression -> . postfix_expression INC
    (109) postfix_expression -> . postfix_expression DEC
    (82) logical_and_expression -> . equality_expression
    (83) logical_and_expression -> . logical_and_expression AND equality_expression
    (110) primary_expression -> . identifier
    (111) primary_expression -> . constant
    (112) primary_expression -> . LPAREN expression RPAREN
    (84) equality_expression -> . relational_expression
    (85) equality_expression -> . equality_expression EQ relational_expression
    (86) equality_expression -> . equality_expression NEQ relational_expression
    (115) identifier -> . FLOAT_ID
    (116) identifier -> . INT_ID
    (117) identifier -> . CHAR_ID
    (118) identifier -> . STR_ID
    (119) constant -> . FLOAT_LIT
    (120) constant -> . INT_LIT
    (121) constant -> . CHAR_LIT
    (122) constant -> . STR_LIT
    (87) relational_expression -> . add_expression
    (88) relational_expression -> . relational_expression LT add_expression
    (89) relational_expression -> . relational_expression GT add_expression
    (90) relational_expression -> . relational_expression LE add_expression
    (91) relational_expression -> . relational_expression GE add_expression
    (92) add_expression -> . mult_expression
    (93) add_expression -> . add_expression ADD_OP mult_expression
    (94) add_expression -> . add_expression SUB_OP mult_expression
    (95) mult_expression -> . unary_expression
    (96) mult_expression -> . mult_expression MULT_OP unary_expression
    (97) mult_expression -> . mult_expression DIV_OP unary_expression
    (98) mult_expression -> . mult_expression MOD_OP unary_expression

    INC             shift and go to state 33
    DEC             shift and go to state 3
    SUB_OP          shift and go to state 28
    NOT             shift and go to state 31
    LPAREN          shift and go to state 20
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 25
    CHAR_ID         shift and go to state 7
    STR_ID          shift and go to state 13
    FLOAT_LIT       shift and go to state 27
    INT_LIT         shift and go to state 29
    CHAR_LIT        shift and go to state 6
    STR_LIT         shift and go to state 4

    constant                       shift and go to state 1
    assignment_expression          shift and go to state 196
    unary_expression               shift and go to state 2
    relational_expression          shift and go to state 11
    add_expression                 shift and go to state 22
    postfix_expression             shift and go to state 9
    conditional_expression         shift and go to state 30
    mult_expression                shift and go to state 18
    logical_and_expression         shift and go to state 21
    identifier                     shift and go to state 42
    logical_or_expression          shift and go to state 15
    equality_expression            shift and go to state 23
    primary_expression             shift and go to state 19

state 167

    (76) conditional_expression -> logical_or_expression COND_OP expression COLON . conditional_expression
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression COND_OP expression COLON conditional_expression
    (80) logical_or_expression -> . logical_and_expression
    (81) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (82) logical_and_expression -> . equality_expression
    (83) logical_and_expression -> . logical_and_expression AND equality_expression
    (84) equality_expression -> . relational_expression
    (85) equality_expression -> . equality_expression EQ relational_expression
    (86) equality_expression -> . equality_expression NEQ relational_expression
    (87) relational_expression -> . add_expression
    (88) relational_expression -> . relational_expression LT add_expression
    (89) relational_expression -> . relational_expression GT add_expression
    (90) relational_expression -> . relational_expression LE add_expression
    (91) relational_expression -> . relational_expression GE add_expression
    (92) add_expression -> . mult_expression
    (93) add_expression -> . add_expression ADD_OP mult_expression
    (94) add_expression -> . add_expression SUB_OP mult_expression
    (95) mult_expression -> . unary_expression
    (96) mult_expression -> . mult_expression MULT_OP unary_expression
    (97) mult_expression -> . mult_expression DIV_OP unary_expression
    (98) mult_expression -> . mult_expression MOD_OP unary_expression
    (99) unary_expression -> . postfix_expression
    (100) unary_expression -> . INC unary_expression
    (101) unary_expression -> . DEC unary_expression
    (102) unary_expression -> . SUB_OP add_expression
    (103) unary_expression -> . NOT logical_or_expression
    (104) postfix_expression -> . primary_expression
    (105) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (106) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (107) postfix_expression -> . postfix_expression LPAREN RPAREN
    (108) postfix_expression -> . postfix_expression INC
    (109) postfix_expression -> . postfix_expression DEC
    (110) primary_expression -> . identifier
    (111) primary_expression -> . constant
    (112) primary_expression -> . LPAREN expression RPAREN
    (115) identifier -> . FLOAT_ID
    (116) identifier -> . INT_ID
    (117) identifier -> . CHAR_ID
    (118) identifier -> . STR_ID
    (119) constant -> . FLOAT_LIT
    (120) constant -> . INT_LIT
    (121) constant -> . CHAR_LIT
    (122) constant -> . STR_LIT

    INC             shift and go to state 33
    DEC             shift and go to state 3
    SUB_OP          shift and go to state 28
    NOT             shift and go to state 31
    LPAREN          shift and go to state 20
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 25
    CHAR_ID         shift and go to state 7
    STR_ID          shift and go to state 13
    FLOAT_LIT       shift and go to state 27
    INT_LIT         shift and go to state 29
    CHAR_LIT        shift and go to state 6
    STR_LIT         shift and go to state 4

    constant                       shift and go to state 1
    unary_expression               shift and go to state 70
    add_expression                 shift and go to state 22
    postfix_expression             shift and go to state 9
    relational_expression          shift and go to state 11
    conditional_expression         shift and go to state 197
    mult_expression                shift and go to state 18
    logical_and_expression         shift and go to state 21
    identifier                     shift and go to state 42
    logical_or_expression          shift and go to state 15
    equality_expression            shift and go to state 23
    primary_expression             shift and go to state 19

state 168

    (66) expression -> expression COMMA assignment_expression .

    COMMA           reduce using rule 66 (expression -> expression COMMA assignment_expression .)
    SEMI            reduce using rule 66 (expression -> expression COMMA assignment_expression .)
    RPAREN          reduce using rule 66 (expression -> expression COMMA assignment_expression .)
    RBRACKET        reduce using rule 66 (expression -> expression COMMA assignment_expression .)
    COLON           reduce using rule 66 (expression -> expression COMMA assignment_expression .)


state 169

    (5) main -> MAIN LPAREN empty . RPAREN compound_statement

    RPAREN          shift and go to state 198


state 170

    (6) post_main -> fxn_var_statement post_main .

    $end            reduce using rule 6 (post_main -> fxn_var_statement post_main .)


state 171

    (27) fxn_declaration -> identifier LPAREN fxn_prot_args RPAREN .

    SEMI            reduce using rule 27 (fxn_declaration -> identifier LPAREN fxn_prot_args RPAREN .)
    LBRACE          reduce using rule 27 (fxn_declaration -> identifier LPAREN fxn_prot_args RPAREN .)


state 172

    (29) fxn_prot_args -> identifier COMMA . fxn_prot_args
    (29) fxn_prot_args -> . identifier COMMA fxn_prot_args
    (30) fxn_prot_args -> . identifier
    (115) identifier -> . FLOAT_ID
    (116) identifier -> . INT_ID
    (117) identifier -> . CHAR_ID
    (118) identifier -> . STR_ID

    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 25
    CHAR_ID         shift and go to state 7
    STR_ID          shift and go to state 13

    identifier                     shift and go to state 135
    fxn_prot_args                  shift and go to state 199

state 173

    (28) fxn_declaration -> identifier LPAREN empty RPAREN .

    SEMI            reduce using rule 28 (fxn_declaration -> identifier LPAREN empty RPAREN .)
    LBRACE          reduce using rule 28 (fxn_declaration -> identifier LPAREN empty RPAREN .)


state 174

    (59) iteration_statement -> DO statement WHILE . LPAREN expression RPAREN SEMI

    LPAREN          shift and go to state 200


state 175

    (62) jump_statement -> RETURN expression_opt SEMI .

    RBRACE          reduce using rule 62 (jump_statement -> RETURN expression_opt SEMI .)
    CASE            reduce using rule 62 (jump_statement -> RETURN expression_opt SEMI .)
    DEFAULT         reduce using rule 62 (jump_statement -> RETURN expression_opt SEMI .)
    LBRACE          reduce using rule 62 (jump_statement -> RETURN expression_opt SEMI .)
    PRINT           reduce using rule 62 (jump_statement -> RETURN expression_opt SEMI .)
    SCAN            reduce using rule 62 (jump_statement -> RETURN expression_opt SEMI .)
    IF              reduce using rule 62 (jump_statement -> RETURN expression_opt SEMI .)
    SWITCH          reduce using rule 62 (jump_statement -> RETURN expression_opt SEMI .)
    WHILE           reduce using rule 62 (jump_statement -> RETURN expression_opt SEMI .)
    FOR             reduce using rule 62 (jump_statement -> RETURN expression_opt SEMI .)
    DO              reduce using rule 62 (jump_statement -> RETURN expression_opt SEMI .)
    CONTINUE        reduce using rule 62 (jump_statement -> RETURN expression_opt SEMI .)
    BREAK           reduce using rule 62 (jump_statement -> RETURN expression_opt SEMI .)
    RETURN          reduce using rule 62 (jump_statement -> RETURN expression_opt SEMI .)
    FLOAT_ID        reduce using rule 62 (jump_statement -> RETURN expression_opt SEMI .)
    INT_ID          reduce using rule 62 (jump_statement -> RETURN expression_opt SEMI .)
    CHAR_ID         reduce using rule 62 (jump_statement -> RETURN expression_opt SEMI .)
    STR_ID          reduce using rule 62 (jump_statement -> RETURN expression_opt SEMI .)
    INC             reduce using rule 62 (jump_statement -> RETURN expression_opt SEMI .)
    DEC             reduce using rule 62 (jump_statement -> RETURN expression_opt SEMI .)
    SUB_OP          reduce using rule 62 (jump_statement -> RETURN expression_opt SEMI .)
    NOT             reduce using rule 62 (jump_statement -> RETURN expression_opt SEMI .)
    LPAREN          reduce using rule 62 (jump_statement -> RETURN expression_opt SEMI .)
    FLOAT_LIT       reduce using rule 62 (jump_statement -> RETURN expression_opt SEMI .)
    INT_LIT         reduce using rule 62 (jump_statement -> RETURN expression_opt SEMI .)
    CHAR_LIT        reduce using rule 62 (jump_statement -> RETURN expression_opt SEMI .)
    STR_LIT         reduce using rule 62 (jump_statement -> RETURN expression_opt SEMI .)
    SEMI            reduce using rule 62 (jump_statement -> RETURN expression_opt SEMI .)
    ELSE            reduce using rule 62 (jump_statement -> RETURN expression_opt SEMI .)
    ELSE_IF         reduce using rule 62 (jump_statement -> RETURN expression_opt SEMI .)


state 176

    (40) scan_statement -> SCAN LPAREN identifier . RPAREN

    RPAREN          shift and go to state 201


state 177

    (43) labeled_statement -> DEFAULT COLON statement .

    RBRACE          reduce using rule 43 (labeled_statement -> DEFAULT COLON statement .)
    CASE            reduce using rule 43 (labeled_statement -> DEFAULT COLON statement .)
    DEFAULT         reduce using rule 43 (labeled_statement -> DEFAULT COLON statement .)
    LBRACE          reduce using rule 43 (labeled_statement -> DEFAULT COLON statement .)
    PRINT           reduce using rule 43 (labeled_statement -> DEFAULT COLON statement .)
    SCAN            reduce using rule 43 (labeled_statement -> DEFAULT COLON statement .)
    IF              reduce using rule 43 (labeled_statement -> DEFAULT COLON statement .)
    SWITCH          reduce using rule 43 (labeled_statement -> DEFAULT COLON statement .)
    WHILE           reduce using rule 43 (labeled_statement -> DEFAULT COLON statement .)
    FOR             reduce using rule 43 (labeled_statement -> DEFAULT COLON statement .)
    DO              reduce using rule 43 (labeled_statement -> DEFAULT COLON statement .)
    CONTINUE        reduce using rule 43 (labeled_statement -> DEFAULT COLON statement .)
    BREAK           reduce using rule 43 (labeled_statement -> DEFAULT COLON statement .)
    RETURN          reduce using rule 43 (labeled_statement -> DEFAULT COLON statement .)
    FLOAT_ID        reduce using rule 43 (labeled_statement -> DEFAULT COLON statement .)
    INT_ID          reduce using rule 43 (labeled_statement -> DEFAULT COLON statement .)
    CHAR_ID         reduce using rule 43 (labeled_statement -> DEFAULT COLON statement .)
    STR_ID          reduce using rule 43 (labeled_statement -> DEFAULT COLON statement .)
    INC             reduce using rule 43 (labeled_statement -> DEFAULT COLON statement .)
    DEC             reduce using rule 43 (labeled_statement -> DEFAULT COLON statement .)
    SUB_OP          reduce using rule 43 (labeled_statement -> DEFAULT COLON statement .)
    NOT             reduce using rule 43 (labeled_statement -> DEFAULT COLON statement .)
    LPAREN          reduce using rule 43 (labeled_statement -> DEFAULT COLON statement .)
    FLOAT_LIT       reduce using rule 43 (labeled_statement -> DEFAULT COLON statement .)
    INT_LIT         reduce using rule 43 (labeled_statement -> DEFAULT COLON statement .)
    CHAR_LIT        reduce using rule 43 (labeled_statement -> DEFAULT COLON statement .)
    STR_LIT         reduce using rule 43 (labeled_statement -> DEFAULT COLON statement .)
    SEMI            reduce using rule 43 (labeled_statement -> DEFAULT COLON statement .)
    ELSE            reduce using rule 43 (labeled_statement -> DEFAULT COLON statement .)
    ELSE_IF         reduce using rule 43 (labeled_statement -> DEFAULT COLON statement .)


state 178

    (17) declarator -> identifier .

    RPAREN          reduce using rule 17 (declarator -> identifier .)
    LBRACKET        reduce using rule 17 (declarator -> identifier .)
    ASSIGN_OP       reduce using rule 17 (declarator -> identifier .)
    SEMI            reduce using rule 17 (declarator -> identifier .)
    COMMA           reduce using rule 17 (declarator -> identifier .)


state 179

    (18) declarator -> LPAREN . declarator RPAREN
    (17) declarator -> . identifier
    (18) declarator -> . LPAREN declarator RPAREN
    (19) declarator -> . declarator LBRACKET constant_expression_opt RBRACKET
    (115) identifier -> . FLOAT_ID
    (116) identifier -> . INT_ID
    (117) identifier -> . CHAR_ID
    (118) identifier -> . STR_ID

    LPAREN          shift and go to state 179
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 25
    CHAR_ID         shift and go to state 7
    STR_ID          shift and go to state 13

    identifier                     shift and go to state 178
    declarator                     shift and go to state 151

state 180

    (14) init_declarator_list -> init_declarator_list COMMA init_declarator .

    SEMI            reduce using rule 14 (init_declarator_list -> init_declarator_list COMMA init_declarator .)
    COMMA           reduce using rule 14 (init_declarator_list -> init_declarator_list COMMA init_declarator .)


state 181

    (39) print_statement -> PRINT LPAREN assignment_expression . RPAREN

    RPAREN          shift and go to state 202


state 182

    (57) iteration_statement -> WHILE LPAREN expression . RPAREN statement
    (66) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 203
    COMMA           shift and go to state 122


state 183

    (42) labeled_statement -> CASE constant_expression COLON . statement
    (31) statement -> . labeled_statement
    (32) statement -> . expression_statement
    (33) statement -> . compound_statement
    (34) statement -> . print_statement
    (35) statement -> . scan_statement
    (36) statement -> . selection_statement
    (37) statement -> . iteration_statement
    (38) statement -> . jump_statement
    (41) labeled_statement -> . identifier COLON statement
    (42) labeled_statement -> . CASE constant_expression COLON statement
    (43) labeled_statement -> . DEFAULT COLON statement
    (44) expression_statement -> . expression_opt SEMI
    (45) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (46) compound_statement -> . LBRACE statement_list RBRACE
    (47) compound_statement -> . LBRACE declaration_list RBRACE
    (48) compound_statement -> . LBRACE RBRACE
    (39) print_statement -> . PRINT LPAREN assignment_expression RPAREN
    (40) scan_statement -> . SCAN LPAREN identifier RPAREN
    (51) selection_statement -> . IF LPAREN expression RPAREN statement
    (52) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (53) selection_statement -> . IF LPAREN expression RPAREN statement else_if_statement ELSE statement
    (54) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (57) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (58) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (59) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (60) jump_statement -> . CONTINUE SEMI
    (61) jump_statement -> . BREAK SEMI
    (62) jump_statement -> . RETURN expression_opt SEMI
    (115) identifier -> . FLOAT_ID
    (116) identifier -> . INT_ID
    (117) identifier -> . CHAR_ID
    (118) identifier -> . STR_ID
    (63) expression_opt -> . empty
    (64) expression_opt -> . expression
    (123) empty -> .
    (65) expression -> . assignment_expression
    (66) expression -> . expression COMMA assignment_expression
    (67) assignment_expression -> . conditional_expression
    (68) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression COND_OP expression COLON conditional_expression
    (99) unary_expression -> . postfix_expression
    (100) unary_expression -> . INC unary_expression
    (101) unary_expression -> . DEC unary_expression
    (102) unary_expression -> . SUB_OP add_expression
    (103) unary_expression -> . NOT logical_or_expression
    (80) logical_or_expression -> . logical_and_expression
    (81) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (104) postfix_expression -> . primary_expression
    (105) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (106) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (107) postfix_expression -> . postfix_expression LPAREN RPAREN
    (108) postfix_expression -> . postfix_expression INC
    (109) postfix_expression -> . postfix_expression DEC
    (82) logical_and_expression -> . equality_expression
    (83) logical_and_expression -> . logical_and_expression AND equality_expression
    (110) primary_expression -> . identifier
    (111) primary_expression -> . constant
    (112) primary_expression -> . LPAREN expression RPAREN
    (84) equality_expression -> . relational_expression
    (85) equality_expression -> . equality_expression EQ relational_expression
    (86) equality_expression -> . equality_expression NEQ relational_expression
    (119) constant -> . FLOAT_LIT
    (120) constant -> . INT_LIT
    (121) constant -> . CHAR_LIT
    (122) constant -> . STR_LIT
    (87) relational_expression -> . add_expression
    (88) relational_expression -> . relational_expression LT add_expression
    (89) relational_expression -> . relational_expression GT add_expression
    (90) relational_expression -> . relational_expression LE add_expression
    (91) relational_expression -> . relational_expression GE add_expression
    (92) add_expression -> . mult_expression
    (93) add_expression -> . add_expression ADD_OP mult_expression
    (94) add_expression -> . add_expression SUB_OP mult_expression
    (95) mult_expression -> . unary_expression
    (96) mult_expression -> . mult_expression MULT_OP unary_expression
    (97) mult_expression -> . mult_expression DIV_OP unary_expression
    (98) mult_expression -> . mult_expression MOD_OP unary_expression

    CASE            shift and go to state 86
    DEFAULT         shift and go to state 80
    LBRACE          shift and go to state 43
    PRINT           shift and go to state 82
    SCAN            shift and go to state 79
    IF              shift and go to state 98
    SWITCH          shift and go to state 89
    WHILE           shift and go to state 83
    FOR             shift and go to state 92
    DO              shift and go to state 77
    CONTINUE        shift and go to state 103
    BREAK           shift and go to state 102
    RETURN          shift and go to state 78
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 25
    CHAR_ID         shift and go to state 7
    STR_ID          shift and go to state 13
    SEMI            reduce using rule 123 (empty -> .)
    INC             shift and go to state 33
    DEC             shift and go to state 3
    SUB_OP          shift and go to state 28
    NOT             shift and go to state 31
    LPAREN          shift and go to state 20
    FLOAT_LIT       shift and go to state 27
    INT_LIT         shift and go to state 29
    CHAR_LIT        shift and go to state 6
    STR_LIT         shift and go to state 4

    expression_statement           shift and go to state 76
    constant                       shift and go to state 1
    unary_expression               shift and go to state 2
    print_statement                shift and go to state 84
    iteration_statement            shift and go to state 85
    compound_statement             shift and go to state 87
    selection_statement            shift and go to state 88
    postfix_expression             shift and go to state 9
    relational_expression          shift and go to state 11
    statement                      shift and go to state 204
    logical_or_expression          shift and go to state 15
    empty                          shift and go to state 104
    assignment_expression          shift and go to state 59
    scan_statement                 shift and go to state 93
    mult_expression                shift and go to state 18
    expression_opt                 shift and go to state 94
    primary_expression             shift and go to state 19
    logical_and_expression         shift and go to state 21
    add_expression                 shift and go to state 22
    equality_expression            shift and go to state 23
    jump_statement                 shift and go to state 99
    labeled_statement              shift and go to state 100
    conditional_expression         shift and go to state 30
    identifier                     shift and go to state 138
    expression                     shift and go to state 108

state 184

    (54) selection_statement -> SWITCH LPAREN expression . RPAREN statement
    (66) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 205
    COMMA           shift and go to state 122


state 185

    (58) iteration_statement -> FOR LPAREN expression_opt . SEMI expression_opt SEMI expression_opt RPAREN statement

    SEMI            shift and go to state 206


state 186

    (18) declarator -> LPAREN declarator RPAREN .

    ASSIGN_OP       reduce using rule 18 (declarator -> LPAREN declarator RPAREN .)
    LBRACKET        reduce using rule 18 (declarator -> LPAREN declarator RPAREN .)
    SEMI            reduce using rule 18 (declarator -> LPAREN declarator RPAREN .)
    COMMA           reduce using rule 18 (declarator -> LPAREN declarator RPAREN .)
    RPAREN          reduce using rule 18 (declarator -> LPAREN declarator RPAREN .)


state 187

    (77) constant_expression_opt -> empty .

    RBRACKET        reduce using rule 77 (constant_expression_opt -> empty .)


state 188

    (19) declarator -> declarator LBRACKET constant_expression_opt . RBRACKET

    RBRACKET        shift and go to state 207


state 189

    (78) constant_expression_opt -> constant_expression .

    RBRACKET        reduce using rule 78 (constant_expression_opt -> constant_expression .)


state 190

    (16) init_declarator -> declarator ASSIGN_OP initializer .

    SEMI            reduce using rule 16 (init_declarator -> declarator ASSIGN_OP initializer .)
    COMMA           reduce using rule 16 (init_declarator -> declarator ASSIGN_OP initializer .)


state 191

    (20) initializer -> assignment_expression .

    RBRACE          reduce using rule 20 (initializer -> assignment_expression .)
    COMMA           reduce using rule 20 (initializer -> assignment_expression .)
    SEMI            reduce using rule 20 (initializer -> assignment_expression .)


state 192

    (21) initializer -> LBRACE . initializer_list RBRACE
    (22) initializer -> LBRACE . initializer_list COMMA RBRACE
    (23) initializer_list -> . initializer
    (24) initializer_list -> . initializer_list COMMA initializer
    (20) initializer -> . assignment_expression
    (21) initializer -> . LBRACE initializer_list RBRACE
    (22) initializer -> . LBRACE initializer_list COMMA RBRACE
    (67) assignment_expression -> . conditional_expression
    (68) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression COND_OP expression COLON conditional_expression
    (99) unary_expression -> . postfix_expression
    (100) unary_expression -> . INC unary_expression
    (101) unary_expression -> . DEC unary_expression
    (102) unary_expression -> . SUB_OP add_expression
    (103) unary_expression -> . NOT logical_or_expression
    (80) logical_or_expression -> . logical_and_expression
    (81) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (104) postfix_expression -> . primary_expression
    (105) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (106) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (107) postfix_expression -> . postfix_expression LPAREN RPAREN
    (108) postfix_expression -> . postfix_expression INC
    (109) postfix_expression -> . postfix_expression DEC
    (82) logical_and_expression -> . equality_expression
    (83) logical_and_expression -> . logical_and_expression AND equality_expression
    (110) primary_expression -> . identifier
    (111) primary_expression -> . constant
    (112) primary_expression -> . LPAREN expression RPAREN
    (84) equality_expression -> . relational_expression
    (85) equality_expression -> . equality_expression EQ relational_expression
    (86) equality_expression -> . equality_expression NEQ relational_expression
    (115) identifier -> . FLOAT_ID
    (116) identifier -> . INT_ID
    (117) identifier -> . CHAR_ID
    (118) identifier -> . STR_ID
    (119) constant -> . FLOAT_LIT
    (120) constant -> . INT_LIT
    (121) constant -> . CHAR_LIT
    (122) constant -> . STR_LIT
    (87) relational_expression -> . add_expression
    (88) relational_expression -> . relational_expression LT add_expression
    (89) relational_expression -> . relational_expression GT add_expression
    (90) relational_expression -> . relational_expression LE add_expression
    (91) relational_expression -> . relational_expression GE add_expression
    (92) add_expression -> . mult_expression
    (93) add_expression -> . add_expression ADD_OP mult_expression
    (94) add_expression -> . add_expression SUB_OP mult_expression
    (95) mult_expression -> . unary_expression
    (96) mult_expression -> . mult_expression MULT_OP unary_expression
    (97) mult_expression -> . mult_expression DIV_OP unary_expression
    (98) mult_expression -> . mult_expression MOD_OP unary_expression

    LBRACE          shift and go to state 192
    INC             shift and go to state 33
    DEC             shift and go to state 3
    SUB_OP          shift and go to state 28
    NOT             shift and go to state 31
    LPAREN          shift and go to state 20
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 25
    CHAR_ID         shift and go to state 7
    STR_ID          shift and go to state 13
    FLOAT_LIT       shift and go to state 27
    INT_LIT         shift and go to state 29
    CHAR_LIT        shift and go to state 6
    STR_LIT         shift and go to state 4

    constant                       shift and go to state 1
    assignment_expression          shift and go to state 191
    unary_expression               shift and go to state 2
    relational_expression          shift and go to state 11
    add_expression                 shift and go to state 22
    initializer_list               shift and go to state 209
    postfix_expression             shift and go to state 9
    initializer                    shift and go to state 208
    conditional_expression         shift and go to state 30
    mult_expression                shift and go to state 18
    logical_and_expression         shift and go to state 21
    identifier                     shift and go to state 42
    logical_or_expression          shift and go to state 15
    equality_expression            shift and go to state 23
    primary_expression             shift and go to state 19

state 193

    (51) selection_statement -> IF LPAREN expression . RPAREN statement
    (52) selection_statement -> IF LPAREN expression . RPAREN statement ELSE statement
    (53) selection_statement -> IF LPAREN expression . RPAREN statement else_if_statement ELSE statement
    (66) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 210
    COMMA           shift and go to state 122


state 194

    (45) compound_statement -> LBRACE declaration_list statement_list RBRACE .

    RBRACE          reduce using rule 45 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    CASE            reduce using rule 45 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    DEFAULT         reduce using rule 45 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    LBRACE          reduce using rule 45 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    PRINT           reduce using rule 45 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    SCAN            reduce using rule 45 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    IF              reduce using rule 45 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    SWITCH          reduce using rule 45 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    WHILE           reduce using rule 45 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    FOR             reduce using rule 45 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    DO              reduce using rule 45 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    CONTINUE        reduce using rule 45 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    BREAK           reduce using rule 45 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    RETURN          reduce using rule 45 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    FLOAT_ID        reduce using rule 45 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    INT_ID          reduce using rule 45 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    CHAR_ID         reduce using rule 45 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    STR_ID          reduce using rule 45 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    INC             reduce using rule 45 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    DEC             reduce using rule 45 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    SUB_OP          reduce using rule 45 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    NOT             reduce using rule 45 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    LPAREN          reduce using rule 45 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    FLOAT_LIT       reduce using rule 45 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    INT_LIT         reduce using rule 45 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    CHAR_LIT        reduce using rule 45 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    STR_LIT         reduce using rule 45 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    SEMI            reduce using rule 45 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    ELSE            reduce using rule 45 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    ELSE_IF         reduce using rule 45 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    $end            reduce using rule 45 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)
    MAIN            reduce using rule 45 (compound_statement -> LBRACE declaration_list statement_list RBRACE .)


state 195

    (41) labeled_statement -> identifier COLON statement .

    RBRACE          reduce using rule 41 (labeled_statement -> identifier COLON statement .)
    CASE            reduce using rule 41 (labeled_statement -> identifier COLON statement .)
    DEFAULT         reduce using rule 41 (labeled_statement -> identifier COLON statement .)
    LBRACE          reduce using rule 41 (labeled_statement -> identifier COLON statement .)
    PRINT           reduce using rule 41 (labeled_statement -> identifier COLON statement .)
    SCAN            reduce using rule 41 (labeled_statement -> identifier COLON statement .)
    IF              reduce using rule 41 (labeled_statement -> identifier COLON statement .)
    SWITCH          reduce using rule 41 (labeled_statement -> identifier COLON statement .)
    WHILE           reduce using rule 41 (labeled_statement -> identifier COLON statement .)
    FOR             reduce using rule 41 (labeled_statement -> identifier COLON statement .)
    DO              reduce using rule 41 (labeled_statement -> identifier COLON statement .)
    CONTINUE        reduce using rule 41 (labeled_statement -> identifier COLON statement .)
    BREAK           reduce using rule 41 (labeled_statement -> identifier COLON statement .)
    RETURN          reduce using rule 41 (labeled_statement -> identifier COLON statement .)
    FLOAT_ID        reduce using rule 41 (labeled_statement -> identifier COLON statement .)
    INT_ID          reduce using rule 41 (labeled_statement -> identifier COLON statement .)
    CHAR_ID         reduce using rule 41 (labeled_statement -> identifier COLON statement .)
    STR_ID          reduce using rule 41 (labeled_statement -> identifier COLON statement .)
    INC             reduce using rule 41 (labeled_statement -> identifier COLON statement .)
    DEC             reduce using rule 41 (labeled_statement -> identifier COLON statement .)
    SUB_OP          reduce using rule 41 (labeled_statement -> identifier COLON statement .)
    NOT             reduce using rule 41 (labeled_statement -> identifier COLON statement .)
    LPAREN          reduce using rule 41 (labeled_statement -> identifier COLON statement .)
    FLOAT_LIT       reduce using rule 41 (labeled_statement -> identifier COLON statement .)
    INT_LIT         reduce using rule 41 (labeled_statement -> identifier COLON statement .)
    CHAR_LIT        reduce using rule 41 (labeled_statement -> identifier COLON statement .)
    STR_LIT         reduce using rule 41 (labeled_statement -> identifier COLON statement .)
    SEMI            reduce using rule 41 (labeled_statement -> identifier COLON statement .)
    ELSE            reduce using rule 41 (labeled_statement -> identifier COLON statement .)
    ELSE_IF         reduce using rule 41 (labeled_statement -> identifier COLON statement .)


state 196

    (114) argument_expression_list -> argument_expression_list COMMA assignment_expression .

    RPAREN          reduce using rule 114 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)
    COMMA           reduce using rule 114 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)


state 197

    (76) conditional_expression -> logical_or_expression COND_OP expression COLON conditional_expression .

    RPAREN          reduce using rule 76 (conditional_expression -> logical_or_expression COND_OP expression COLON conditional_expression .)
    COMMA           reduce using rule 76 (conditional_expression -> logical_or_expression COND_OP expression COLON conditional_expression .)
    COLON           reduce using rule 76 (conditional_expression -> logical_or_expression COND_OP expression COLON conditional_expression .)
    INC             reduce using rule 76 (conditional_expression -> logical_or_expression COND_OP expression COLON conditional_expression .)
    DEC             reduce using rule 76 (conditional_expression -> logical_or_expression COND_OP expression COLON conditional_expression .)
    SUB_OP          reduce using rule 76 (conditional_expression -> logical_or_expression COND_OP expression COLON conditional_expression .)
    NOT             reduce using rule 76 (conditional_expression -> logical_or_expression COND_OP expression COLON conditional_expression .)
    LPAREN          reduce using rule 76 (conditional_expression -> logical_or_expression COND_OP expression COLON conditional_expression .)
    FLOAT_ID        reduce using rule 76 (conditional_expression -> logical_or_expression COND_OP expression COLON conditional_expression .)
    INT_ID          reduce using rule 76 (conditional_expression -> logical_or_expression COND_OP expression COLON conditional_expression .)
    CHAR_ID         reduce using rule 76 (conditional_expression -> logical_or_expression COND_OP expression COLON conditional_expression .)
    STR_ID          reduce using rule 76 (conditional_expression -> logical_or_expression COND_OP expression COLON conditional_expression .)
    FLOAT_LIT       reduce using rule 76 (conditional_expression -> logical_or_expression COND_OP expression COLON conditional_expression .)
    INT_LIT         reduce using rule 76 (conditional_expression -> logical_or_expression COND_OP expression COLON conditional_expression .)
    CHAR_LIT        reduce using rule 76 (conditional_expression -> logical_or_expression COND_OP expression COLON conditional_expression .)
    STR_LIT         reduce using rule 76 (conditional_expression -> logical_or_expression COND_OP expression COLON conditional_expression .)
    MAIN            reduce using rule 76 (conditional_expression -> logical_or_expression COND_OP expression COLON conditional_expression .)
    RBRACE          reduce using rule 76 (conditional_expression -> logical_or_expression COND_OP expression COLON conditional_expression .)
    SEMI            reduce using rule 76 (conditional_expression -> logical_or_expression COND_OP expression COLON conditional_expression .)
    RBRACKET        reduce using rule 76 (conditional_expression -> logical_or_expression COND_OP expression COLON conditional_expression .)


state 198

    (5) main -> MAIN LPAREN empty RPAREN . compound_statement
    (45) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (46) compound_statement -> . LBRACE statement_list RBRACE
    (47) compound_statement -> . LBRACE declaration_list RBRACE
    (48) compound_statement -> . LBRACE RBRACE

    LBRACE          shift and go to state 43

    compound_statement             shift and go to state 211

state 199

    (29) fxn_prot_args -> identifier COMMA fxn_prot_args .

    RPAREN          reduce using rule 29 (fxn_prot_args -> identifier COMMA fxn_prot_args .)


state 200

    (59) iteration_statement -> DO statement WHILE LPAREN . expression RPAREN SEMI
    (65) expression -> . assignment_expression
    (66) expression -> . expression COMMA assignment_expression
    (67) assignment_expression -> . conditional_expression
    (68) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression COND_OP expression COLON conditional_expression
    (99) unary_expression -> . postfix_expression
    (100) unary_expression -> . INC unary_expression
    (101) unary_expression -> . DEC unary_expression
    (102) unary_expression -> . SUB_OP add_expression
    (103) unary_expression -> . NOT logical_or_expression
    (80) logical_or_expression -> . logical_and_expression
    (81) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (104) postfix_expression -> . primary_expression
    (105) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (106) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (107) postfix_expression -> . postfix_expression LPAREN RPAREN
    (108) postfix_expression -> . postfix_expression INC
    (109) postfix_expression -> . postfix_expression DEC
    (82) logical_and_expression -> . equality_expression
    (83) logical_and_expression -> . logical_and_expression AND equality_expression
    (110) primary_expression -> . identifier
    (111) primary_expression -> . constant
    (112) primary_expression -> . LPAREN expression RPAREN
    (84) equality_expression -> . relational_expression
    (85) equality_expression -> . equality_expression EQ relational_expression
    (86) equality_expression -> . equality_expression NEQ relational_expression
    (115) identifier -> . FLOAT_ID
    (116) identifier -> . INT_ID
    (117) identifier -> . CHAR_ID
    (118) identifier -> . STR_ID
    (119) constant -> . FLOAT_LIT
    (120) constant -> . INT_LIT
    (121) constant -> . CHAR_LIT
    (122) constant -> . STR_LIT
    (87) relational_expression -> . add_expression
    (88) relational_expression -> . relational_expression LT add_expression
    (89) relational_expression -> . relational_expression GT add_expression
    (90) relational_expression -> . relational_expression LE add_expression
    (91) relational_expression -> . relational_expression GE add_expression
    (92) add_expression -> . mult_expression
    (93) add_expression -> . add_expression ADD_OP mult_expression
    (94) add_expression -> . add_expression SUB_OP mult_expression
    (95) mult_expression -> . unary_expression
    (96) mult_expression -> . mult_expression MULT_OP unary_expression
    (97) mult_expression -> . mult_expression DIV_OP unary_expression
    (98) mult_expression -> . mult_expression MOD_OP unary_expression

    INC             shift and go to state 33
    DEC             shift and go to state 3
    SUB_OP          shift and go to state 28
    NOT             shift and go to state 31
    LPAREN          shift and go to state 20
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 25
    CHAR_ID         shift and go to state 7
    STR_ID          shift and go to state 13
    FLOAT_LIT       shift and go to state 27
    INT_LIT         shift and go to state 29
    CHAR_LIT        shift and go to state 6
    STR_LIT         shift and go to state 4

    constant                       shift and go to state 1
    assignment_expression          shift and go to state 59
    unary_expression               shift and go to state 2
    relational_expression          shift and go to state 11
    add_expression                 shift and go to state 22
    postfix_expression             shift and go to state 9
    conditional_expression         shift and go to state 30
    mult_expression                shift and go to state 18
    logical_and_expression         shift and go to state 21
    identifier                     shift and go to state 42
    expression                     shift and go to state 212
    logical_or_expression          shift and go to state 15
    equality_expression            shift and go to state 23
    primary_expression             shift and go to state 19

state 201

    (40) scan_statement -> SCAN LPAREN identifier RPAREN .

    RBRACE          reduce using rule 40 (scan_statement -> SCAN LPAREN identifier RPAREN .)
    CASE            reduce using rule 40 (scan_statement -> SCAN LPAREN identifier RPAREN .)
    DEFAULT         reduce using rule 40 (scan_statement -> SCAN LPAREN identifier RPAREN .)
    LBRACE          reduce using rule 40 (scan_statement -> SCAN LPAREN identifier RPAREN .)
    PRINT           reduce using rule 40 (scan_statement -> SCAN LPAREN identifier RPAREN .)
    SCAN            reduce using rule 40 (scan_statement -> SCAN LPAREN identifier RPAREN .)
    IF              reduce using rule 40 (scan_statement -> SCAN LPAREN identifier RPAREN .)
    SWITCH          reduce using rule 40 (scan_statement -> SCAN LPAREN identifier RPAREN .)
    WHILE           reduce using rule 40 (scan_statement -> SCAN LPAREN identifier RPAREN .)
    FOR             reduce using rule 40 (scan_statement -> SCAN LPAREN identifier RPAREN .)
    DO              reduce using rule 40 (scan_statement -> SCAN LPAREN identifier RPAREN .)
    CONTINUE        reduce using rule 40 (scan_statement -> SCAN LPAREN identifier RPAREN .)
    BREAK           reduce using rule 40 (scan_statement -> SCAN LPAREN identifier RPAREN .)
    RETURN          reduce using rule 40 (scan_statement -> SCAN LPAREN identifier RPAREN .)
    FLOAT_ID        reduce using rule 40 (scan_statement -> SCAN LPAREN identifier RPAREN .)
    INT_ID          reduce using rule 40 (scan_statement -> SCAN LPAREN identifier RPAREN .)
    CHAR_ID         reduce using rule 40 (scan_statement -> SCAN LPAREN identifier RPAREN .)
    STR_ID          reduce using rule 40 (scan_statement -> SCAN LPAREN identifier RPAREN .)
    INC             reduce using rule 40 (scan_statement -> SCAN LPAREN identifier RPAREN .)
    DEC             reduce using rule 40 (scan_statement -> SCAN LPAREN identifier RPAREN .)
    SUB_OP          reduce using rule 40 (scan_statement -> SCAN LPAREN identifier RPAREN .)
    NOT             reduce using rule 40 (scan_statement -> SCAN LPAREN identifier RPAREN .)
    LPAREN          reduce using rule 40 (scan_statement -> SCAN LPAREN identifier RPAREN .)
    FLOAT_LIT       reduce using rule 40 (scan_statement -> SCAN LPAREN identifier RPAREN .)
    INT_LIT         reduce using rule 40 (scan_statement -> SCAN LPAREN identifier RPAREN .)
    CHAR_LIT        reduce using rule 40 (scan_statement -> SCAN LPAREN identifier RPAREN .)
    STR_LIT         reduce using rule 40 (scan_statement -> SCAN LPAREN identifier RPAREN .)
    SEMI            reduce using rule 40 (scan_statement -> SCAN LPAREN identifier RPAREN .)
    ELSE            reduce using rule 40 (scan_statement -> SCAN LPAREN identifier RPAREN .)
    ELSE_IF         reduce using rule 40 (scan_statement -> SCAN LPAREN identifier RPAREN .)


state 202

    (39) print_statement -> PRINT LPAREN assignment_expression RPAREN .

    RBRACE          reduce using rule 39 (print_statement -> PRINT LPAREN assignment_expression RPAREN .)
    CASE            reduce using rule 39 (print_statement -> PRINT LPAREN assignment_expression RPAREN .)
    DEFAULT         reduce using rule 39 (print_statement -> PRINT LPAREN assignment_expression RPAREN .)
    LBRACE          reduce using rule 39 (print_statement -> PRINT LPAREN assignment_expression RPAREN .)
    PRINT           reduce using rule 39 (print_statement -> PRINT LPAREN assignment_expression RPAREN .)
    SCAN            reduce using rule 39 (print_statement -> PRINT LPAREN assignment_expression RPAREN .)
    IF              reduce using rule 39 (print_statement -> PRINT LPAREN assignment_expression RPAREN .)
    SWITCH          reduce using rule 39 (print_statement -> PRINT LPAREN assignment_expression RPAREN .)
    WHILE           reduce using rule 39 (print_statement -> PRINT LPAREN assignment_expression RPAREN .)
    FOR             reduce using rule 39 (print_statement -> PRINT LPAREN assignment_expression RPAREN .)
    DO              reduce using rule 39 (print_statement -> PRINT LPAREN assignment_expression RPAREN .)
    CONTINUE        reduce using rule 39 (print_statement -> PRINT LPAREN assignment_expression RPAREN .)
    BREAK           reduce using rule 39 (print_statement -> PRINT LPAREN assignment_expression RPAREN .)
    RETURN          reduce using rule 39 (print_statement -> PRINT LPAREN assignment_expression RPAREN .)
    FLOAT_ID        reduce using rule 39 (print_statement -> PRINT LPAREN assignment_expression RPAREN .)
    INT_ID          reduce using rule 39 (print_statement -> PRINT LPAREN assignment_expression RPAREN .)
    CHAR_ID         reduce using rule 39 (print_statement -> PRINT LPAREN assignment_expression RPAREN .)
    STR_ID          reduce using rule 39 (print_statement -> PRINT LPAREN assignment_expression RPAREN .)
    INC             reduce using rule 39 (print_statement -> PRINT LPAREN assignment_expression RPAREN .)
    DEC             reduce using rule 39 (print_statement -> PRINT LPAREN assignment_expression RPAREN .)
    SUB_OP          reduce using rule 39 (print_statement -> PRINT LPAREN assignment_expression RPAREN .)
    NOT             reduce using rule 39 (print_statement -> PRINT LPAREN assignment_expression RPAREN .)
    LPAREN          reduce using rule 39 (print_statement -> PRINT LPAREN assignment_expression RPAREN .)
    FLOAT_LIT       reduce using rule 39 (print_statement -> PRINT LPAREN assignment_expression RPAREN .)
    INT_LIT         reduce using rule 39 (print_statement -> PRINT LPAREN assignment_expression RPAREN .)
    CHAR_LIT        reduce using rule 39 (print_statement -> PRINT LPAREN assignment_expression RPAREN .)
    STR_LIT         reduce using rule 39 (print_statement -> PRINT LPAREN assignment_expression RPAREN .)
    SEMI            reduce using rule 39 (print_statement -> PRINT LPAREN assignment_expression RPAREN .)
    ELSE            reduce using rule 39 (print_statement -> PRINT LPAREN assignment_expression RPAREN .)
    ELSE_IF         reduce using rule 39 (print_statement -> PRINT LPAREN assignment_expression RPAREN .)


state 203

    (57) iteration_statement -> WHILE LPAREN expression RPAREN . statement
    (31) statement -> . labeled_statement
    (32) statement -> . expression_statement
    (33) statement -> . compound_statement
    (34) statement -> . print_statement
    (35) statement -> . scan_statement
    (36) statement -> . selection_statement
    (37) statement -> . iteration_statement
    (38) statement -> . jump_statement
    (41) labeled_statement -> . identifier COLON statement
    (42) labeled_statement -> . CASE constant_expression COLON statement
    (43) labeled_statement -> . DEFAULT COLON statement
    (44) expression_statement -> . expression_opt SEMI
    (45) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (46) compound_statement -> . LBRACE statement_list RBRACE
    (47) compound_statement -> . LBRACE declaration_list RBRACE
    (48) compound_statement -> . LBRACE RBRACE
    (39) print_statement -> . PRINT LPAREN assignment_expression RPAREN
    (40) scan_statement -> . SCAN LPAREN identifier RPAREN
    (51) selection_statement -> . IF LPAREN expression RPAREN statement
    (52) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (53) selection_statement -> . IF LPAREN expression RPAREN statement else_if_statement ELSE statement
    (54) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (57) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (58) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (59) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (60) jump_statement -> . CONTINUE SEMI
    (61) jump_statement -> . BREAK SEMI
    (62) jump_statement -> . RETURN expression_opt SEMI
    (115) identifier -> . FLOAT_ID
    (116) identifier -> . INT_ID
    (117) identifier -> . CHAR_ID
    (118) identifier -> . STR_ID
    (63) expression_opt -> . empty
    (64) expression_opt -> . expression
    (123) empty -> .
    (65) expression -> . assignment_expression
    (66) expression -> . expression COMMA assignment_expression
    (67) assignment_expression -> . conditional_expression
    (68) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression COND_OP expression COLON conditional_expression
    (99) unary_expression -> . postfix_expression
    (100) unary_expression -> . INC unary_expression
    (101) unary_expression -> . DEC unary_expression
    (102) unary_expression -> . SUB_OP add_expression
    (103) unary_expression -> . NOT logical_or_expression
    (80) logical_or_expression -> . logical_and_expression
    (81) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (104) postfix_expression -> . primary_expression
    (105) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (106) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (107) postfix_expression -> . postfix_expression LPAREN RPAREN
    (108) postfix_expression -> . postfix_expression INC
    (109) postfix_expression -> . postfix_expression DEC
    (82) logical_and_expression -> . equality_expression
    (83) logical_and_expression -> . logical_and_expression AND equality_expression
    (110) primary_expression -> . identifier
    (111) primary_expression -> . constant
    (112) primary_expression -> . LPAREN expression RPAREN
    (84) equality_expression -> . relational_expression
    (85) equality_expression -> . equality_expression EQ relational_expression
    (86) equality_expression -> . equality_expression NEQ relational_expression
    (119) constant -> . FLOAT_LIT
    (120) constant -> . INT_LIT
    (121) constant -> . CHAR_LIT
    (122) constant -> . STR_LIT
    (87) relational_expression -> . add_expression
    (88) relational_expression -> . relational_expression LT add_expression
    (89) relational_expression -> . relational_expression GT add_expression
    (90) relational_expression -> . relational_expression LE add_expression
    (91) relational_expression -> . relational_expression GE add_expression
    (92) add_expression -> . mult_expression
    (93) add_expression -> . add_expression ADD_OP mult_expression
    (94) add_expression -> . add_expression SUB_OP mult_expression
    (95) mult_expression -> . unary_expression
    (96) mult_expression -> . mult_expression MULT_OP unary_expression
    (97) mult_expression -> . mult_expression DIV_OP unary_expression
    (98) mult_expression -> . mult_expression MOD_OP unary_expression

    CASE            shift and go to state 86
    DEFAULT         shift and go to state 80
    LBRACE          shift and go to state 43
    PRINT           shift and go to state 82
    SCAN            shift and go to state 79
    IF              shift and go to state 98
    SWITCH          shift and go to state 89
    WHILE           shift and go to state 83
    FOR             shift and go to state 92
    DO              shift and go to state 77
    CONTINUE        shift and go to state 103
    BREAK           shift and go to state 102
    RETURN          shift and go to state 78
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 25
    CHAR_ID         shift and go to state 7
    STR_ID          shift and go to state 13
    SEMI            reduce using rule 123 (empty -> .)
    INC             shift and go to state 33
    DEC             shift and go to state 3
    SUB_OP          shift and go to state 28
    NOT             shift and go to state 31
    LPAREN          shift and go to state 20
    FLOAT_LIT       shift and go to state 27
    INT_LIT         shift and go to state 29
    CHAR_LIT        shift and go to state 6
    STR_LIT         shift and go to state 4

    expression_statement           shift and go to state 76
    constant                       shift and go to state 1
    unary_expression               shift and go to state 2
    print_statement                shift and go to state 84
    iteration_statement            shift and go to state 85
    compound_statement             shift and go to state 87
    selection_statement            shift and go to state 88
    postfix_expression             shift and go to state 9
    relational_expression          shift and go to state 11
    statement                      shift and go to state 213
    logical_or_expression          shift and go to state 15
    empty                          shift and go to state 104
    assignment_expression          shift and go to state 59
    scan_statement                 shift and go to state 93
    mult_expression                shift and go to state 18
    expression_opt                 shift and go to state 94
    primary_expression             shift and go to state 19
    logical_and_expression         shift and go to state 21
    add_expression                 shift and go to state 22
    equality_expression            shift and go to state 23
    jump_statement                 shift and go to state 99
    labeled_statement              shift and go to state 100
    conditional_expression         shift and go to state 30
    identifier                     shift and go to state 138
    expression                     shift and go to state 108

state 204

    (42) labeled_statement -> CASE constant_expression COLON statement .

    RBRACE          reduce using rule 42 (labeled_statement -> CASE constant_expression COLON statement .)
    CASE            reduce using rule 42 (labeled_statement -> CASE constant_expression COLON statement .)
    DEFAULT         reduce using rule 42 (labeled_statement -> CASE constant_expression COLON statement .)
    LBRACE          reduce using rule 42 (labeled_statement -> CASE constant_expression COLON statement .)
    PRINT           reduce using rule 42 (labeled_statement -> CASE constant_expression COLON statement .)
    SCAN            reduce using rule 42 (labeled_statement -> CASE constant_expression COLON statement .)
    IF              reduce using rule 42 (labeled_statement -> CASE constant_expression COLON statement .)
    SWITCH          reduce using rule 42 (labeled_statement -> CASE constant_expression COLON statement .)
    WHILE           reduce using rule 42 (labeled_statement -> CASE constant_expression COLON statement .)
    FOR             reduce using rule 42 (labeled_statement -> CASE constant_expression COLON statement .)
    DO              reduce using rule 42 (labeled_statement -> CASE constant_expression COLON statement .)
    CONTINUE        reduce using rule 42 (labeled_statement -> CASE constant_expression COLON statement .)
    BREAK           reduce using rule 42 (labeled_statement -> CASE constant_expression COLON statement .)
    RETURN          reduce using rule 42 (labeled_statement -> CASE constant_expression COLON statement .)
    FLOAT_ID        reduce using rule 42 (labeled_statement -> CASE constant_expression COLON statement .)
    INT_ID          reduce using rule 42 (labeled_statement -> CASE constant_expression COLON statement .)
    CHAR_ID         reduce using rule 42 (labeled_statement -> CASE constant_expression COLON statement .)
    STR_ID          reduce using rule 42 (labeled_statement -> CASE constant_expression COLON statement .)
    INC             reduce using rule 42 (labeled_statement -> CASE constant_expression COLON statement .)
    DEC             reduce using rule 42 (labeled_statement -> CASE constant_expression COLON statement .)
    SUB_OP          reduce using rule 42 (labeled_statement -> CASE constant_expression COLON statement .)
    NOT             reduce using rule 42 (labeled_statement -> CASE constant_expression COLON statement .)
    LPAREN          reduce using rule 42 (labeled_statement -> CASE constant_expression COLON statement .)
    FLOAT_LIT       reduce using rule 42 (labeled_statement -> CASE constant_expression COLON statement .)
    INT_LIT         reduce using rule 42 (labeled_statement -> CASE constant_expression COLON statement .)
    CHAR_LIT        reduce using rule 42 (labeled_statement -> CASE constant_expression COLON statement .)
    STR_LIT         reduce using rule 42 (labeled_statement -> CASE constant_expression COLON statement .)
    SEMI            reduce using rule 42 (labeled_statement -> CASE constant_expression COLON statement .)
    ELSE            reduce using rule 42 (labeled_statement -> CASE constant_expression COLON statement .)
    ELSE_IF         reduce using rule 42 (labeled_statement -> CASE constant_expression COLON statement .)


state 205

    (54) selection_statement -> SWITCH LPAREN expression RPAREN . statement
    (31) statement -> . labeled_statement
    (32) statement -> . expression_statement
    (33) statement -> . compound_statement
    (34) statement -> . print_statement
    (35) statement -> . scan_statement
    (36) statement -> . selection_statement
    (37) statement -> . iteration_statement
    (38) statement -> . jump_statement
    (41) labeled_statement -> . identifier COLON statement
    (42) labeled_statement -> . CASE constant_expression COLON statement
    (43) labeled_statement -> . DEFAULT COLON statement
    (44) expression_statement -> . expression_opt SEMI
    (45) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (46) compound_statement -> . LBRACE statement_list RBRACE
    (47) compound_statement -> . LBRACE declaration_list RBRACE
    (48) compound_statement -> . LBRACE RBRACE
    (39) print_statement -> . PRINT LPAREN assignment_expression RPAREN
    (40) scan_statement -> . SCAN LPAREN identifier RPAREN
    (51) selection_statement -> . IF LPAREN expression RPAREN statement
    (52) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (53) selection_statement -> . IF LPAREN expression RPAREN statement else_if_statement ELSE statement
    (54) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (57) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (58) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (59) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (60) jump_statement -> . CONTINUE SEMI
    (61) jump_statement -> . BREAK SEMI
    (62) jump_statement -> . RETURN expression_opt SEMI
    (115) identifier -> . FLOAT_ID
    (116) identifier -> . INT_ID
    (117) identifier -> . CHAR_ID
    (118) identifier -> . STR_ID
    (63) expression_opt -> . empty
    (64) expression_opt -> . expression
    (123) empty -> .
    (65) expression -> . assignment_expression
    (66) expression -> . expression COMMA assignment_expression
    (67) assignment_expression -> . conditional_expression
    (68) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression COND_OP expression COLON conditional_expression
    (99) unary_expression -> . postfix_expression
    (100) unary_expression -> . INC unary_expression
    (101) unary_expression -> . DEC unary_expression
    (102) unary_expression -> . SUB_OP add_expression
    (103) unary_expression -> . NOT logical_or_expression
    (80) logical_or_expression -> . logical_and_expression
    (81) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (104) postfix_expression -> . primary_expression
    (105) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (106) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (107) postfix_expression -> . postfix_expression LPAREN RPAREN
    (108) postfix_expression -> . postfix_expression INC
    (109) postfix_expression -> . postfix_expression DEC
    (82) logical_and_expression -> . equality_expression
    (83) logical_and_expression -> . logical_and_expression AND equality_expression
    (110) primary_expression -> . identifier
    (111) primary_expression -> . constant
    (112) primary_expression -> . LPAREN expression RPAREN
    (84) equality_expression -> . relational_expression
    (85) equality_expression -> . equality_expression EQ relational_expression
    (86) equality_expression -> . equality_expression NEQ relational_expression
    (119) constant -> . FLOAT_LIT
    (120) constant -> . INT_LIT
    (121) constant -> . CHAR_LIT
    (122) constant -> . STR_LIT
    (87) relational_expression -> . add_expression
    (88) relational_expression -> . relational_expression LT add_expression
    (89) relational_expression -> . relational_expression GT add_expression
    (90) relational_expression -> . relational_expression LE add_expression
    (91) relational_expression -> . relational_expression GE add_expression
    (92) add_expression -> . mult_expression
    (93) add_expression -> . add_expression ADD_OP mult_expression
    (94) add_expression -> . add_expression SUB_OP mult_expression
    (95) mult_expression -> . unary_expression
    (96) mult_expression -> . mult_expression MULT_OP unary_expression
    (97) mult_expression -> . mult_expression DIV_OP unary_expression
    (98) mult_expression -> . mult_expression MOD_OP unary_expression

    CASE            shift and go to state 86
    DEFAULT         shift and go to state 80
    LBRACE          shift and go to state 43
    PRINT           shift and go to state 82
    SCAN            shift and go to state 79
    IF              shift and go to state 98
    SWITCH          shift and go to state 89
    WHILE           shift and go to state 83
    FOR             shift and go to state 92
    DO              shift and go to state 77
    CONTINUE        shift and go to state 103
    BREAK           shift and go to state 102
    RETURN          shift and go to state 78
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 25
    CHAR_ID         shift and go to state 7
    STR_ID          shift and go to state 13
    SEMI            reduce using rule 123 (empty -> .)
    INC             shift and go to state 33
    DEC             shift and go to state 3
    SUB_OP          shift and go to state 28
    NOT             shift and go to state 31
    LPAREN          shift and go to state 20
    FLOAT_LIT       shift and go to state 27
    INT_LIT         shift and go to state 29
    CHAR_LIT        shift and go to state 6
    STR_LIT         shift and go to state 4

    expression_statement           shift and go to state 76
    constant                       shift and go to state 1
    unary_expression               shift and go to state 2
    print_statement                shift and go to state 84
    iteration_statement            shift and go to state 85
    compound_statement             shift and go to state 87
    selection_statement            shift and go to state 88
    postfix_expression             shift and go to state 9
    relational_expression          shift and go to state 11
    statement                      shift and go to state 214
    logical_or_expression          shift and go to state 15
    empty                          shift and go to state 104
    assignment_expression          shift and go to state 59
    scan_statement                 shift and go to state 93
    mult_expression                shift and go to state 18
    expression_opt                 shift and go to state 94
    primary_expression             shift and go to state 19
    logical_and_expression         shift and go to state 21
    add_expression                 shift and go to state 22
    equality_expression            shift and go to state 23
    jump_statement                 shift and go to state 99
    labeled_statement              shift and go to state 100
    conditional_expression         shift and go to state 30
    identifier                     shift and go to state 138
    expression                     shift and go to state 108

state 206

    (58) iteration_statement -> FOR LPAREN expression_opt SEMI . expression_opt SEMI expression_opt RPAREN statement
    (63) expression_opt -> . empty
    (64) expression_opt -> . expression
    (123) empty -> .
    (65) expression -> . assignment_expression
    (66) expression -> . expression COMMA assignment_expression
    (67) assignment_expression -> . conditional_expression
    (68) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression COND_OP expression COLON conditional_expression
    (99) unary_expression -> . postfix_expression
    (100) unary_expression -> . INC unary_expression
    (101) unary_expression -> . DEC unary_expression
    (102) unary_expression -> . SUB_OP add_expression
    (103) unary_expression -> . NOT logical_or_expression
    (80) logical_or_expression -> . logical_and_expression
    (81) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (104) postfix_expression -> . primary_expression
    (105) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (106) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (107) postfix_expression -> . postfix_expression LPAREN RPAREN
    (108) postfix_expression -> . postfix_expression INC
    (109) postfix_expression -> . postfix_expression DEC
    (82) logical_and_expression -> . equality_expression
    (83) logical_and_expression -> . logical_and_expression AND equality_expression
    (110) primary_expression -> . identifier
    (111) primary_expression -> . constant
    (112) primary_expression -> . LPAREN expression RPAREN
    (84) equality_expression -> . relational_expression
    (85) equality_expression -> . equality_expression EQ relational_expression
    (86) equality_expression -> . equality_expression NEQ relational_expression
    (115) identifier -> . FLOAT_ID
    (116) identifier -> . INT_ID
    (117) identifier -> . CHAR_ID
    (118) identifier -> . STR_ID
    (119) constant -> . FLOAT_LIT
    (120) constant -> . INT_LIT
    (121) constant -> . CHAR_LIT
    (122) constant -> . STR_LIT
    (87) relational_expression -> . add_expression
    (88) relational_expression -> . relational_expression LT add_expression
    (89) relational_expression -> . relational_expression GT add_expression
    (90) relational_expression -> . relational_expression LE add_expression
    (91) relational_expression -> . relational_expression GE add_expression
    (92) add_expression -> . mult_expression
    (93) add_expression -> . add_expression ADD_OP mult_expression
    (94) add_expression -> . add_expression SUB_OP mult_expression
    (95) mult_expression -> . unary_expression
    (96) mult_expression -> . mult_expression MULT_OP unary_expression
    (97) mult_expression -> . mult_expression DIV_OP unary_expression
    (98) mult_expression -> . mult_expression MOD_OP unary_expression

    SEMI            reduce using rule 123 (empty -> .)
    INC             shift and go to state 33
    DEC             shift and go to state 3
    SUB_OP          shift and go to state 28
    NOT             shift and go to state 31
    LPAREN          shift and go to state 20
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 25
    CHAR_ID         shift and go to state 7
    STR_ID          shift and go to state 13
    FLOAT_LIT       shift and go to state 27
    INT_LIT         shift and go to state 29
    CHAR_LIT        shift and go to state 6
    STR_LIT         shift and go to state 4

    constant                       shift and go to state 1
    assignment_expression          shift and go to state 59
    unary_expression               shift and go to state 2
    relational_expression          shift and go to state 11
    add_expression                 shift and go to state 22
    postfix_expression             shift and go to state 9
    expression_opt                 shift and go to state 215
    equality_expression            shift and go to state 23
    conditional_expression         shift and go to state 30
    mult_expression                shift and go to state 18
    logical_and_expression         shift and go to state 21
    identifier                     shift and go to state 42
    expression                     shift and go to state 108
    logical_or_expression          shift and go to state 15
    empty                          shift and go to state 104
    primary_expression             shift and go to state 19

state 207

    (19) declarator -> declarator LBRACKET constant_expression_opt RBRACKET .

    ASSIGN_OP       reduce using rule 19 (declarator -> declarator LBRACKET constant_expression_opt RBRACKET .)
    LBRACKET        reduce using rule 19 (declarator -> declarator LBRACKET constant_expression_opt RBRACKET .)
    SEMI            reduce using rule 19 (declarator -> declarator LBRACKET constant_expression_opt RBRACKET .)
    COMMA           reduce using rule 19 (declarator -> declarator LBRACKET constant_expression_opt RBRACKET .)
    RPAREN          reduce using rule 19 (declarator -> declarator LBRACKET constant_expression_opt RBRACKET .)


state 208

    (23) initializer_list -> initializer .

    RBRACE          reduce using rule 23 (initializer_list -> initializer .)
    COMMA           reduce using rule 23 (initializer_list -> initializer .)


state 209

    (21) initializer -> LBRACE initializer_list . RBRACE
    (22) initializer -> LBRACE initializer_list . COMMA RBRACE
    (24) initializer_list -> initializer_list . COMMA initializer

    RBRACE          shift and go to state 217
    COMMA           shift and go to state 216


state 210

    (51) selection_statement -> IF LPAREN expression RPAREN . statement
    (52) selection_statement -> IF LPAREN expression RPAREN . statement ELSE statement
    (53) selection_statement -> IF LPAREN expression RPAREN . statement else_if_statement ELSE statement
    (31) statement -> . labeled_statement
    (32) statement -> . expression_statement
    (33) statement -> . compound_statement
    (34) statement -> . print_statement
    (35) statement -> . scan_statement
    (36) statement -> . selection_statement
    (37) statement -> . iteration_statement
    (38) statement -> . jump_statement
    (41) labeled_statement -> . identifier COLON statement
    (42) labeled_statement -> . CASE constant_expression COLON statement
    (43) labeled_statement -> . DEFAULT COLON statement
    (44) expression_statement -> . expression_opt SEMI
    (45) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (46) compound_statement -> . LBRACE statement_list RBRACE
    (47) compound_statement -> . LBRACE declaration_list RBRACE
    (48) compound_statement -> . LBRACE RBRACE
    (39) print_statement -> . PRINT LPAREN assignment_expression RPAREN
    (40) scan_statement -> . SCAN LPAREN identifier RPAREN
    (51) selection_statement -> . IF LPAREN expression RPAREN statement
    (52) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (53) selection_statement -> . IF LPAREN expression RPAREN statement else_if_statement ELSE statement
    (54) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (57) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (58) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (59) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (60) jump_statement -> . CONTINUE SEMI
    (61) jump_statement -> . BREAK SEMI
    (62) jump_statement -> . RETURN expression_opt SEMI
    (115) identifier -> . FLOAT_ID
    (116) identifier -> . INT_ID
    (117) identifier -> . CHAR_ID
    (118) identifier -> . STR_ID
    (63) expression_opt -> . empty
    (64) expression_opt -> . expression
    (123) empty -> .
    (65) expression -> . assignment_expression
    (66) expression -> . expression COMMA assignment_expression
    (67) assignment_expression -> . conditional_expression
    (68) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression COND_OP expression COLON conditional_expression
    (99) unary_expression -> . postfix_expression
    (100) unary_expression -> . INC unary_expression
    (101) unary_expression -> . DEC unary_expression
    (102) unary_expression -> . SUB_OP add_expression
    (103) unary_expression -> . NOT logical_or_expression
    (80) logical_or_expression -> . logical_and_expression
    (81) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (104) postfix_expression -> . primary_expression
    (105) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (106) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (107) postfix_expression -> . postfix_expression LPAREN RPAREN
    (108) postfix_expression -> . postfix_expression INC
    (109) postfix_expression -> . postfix_expression DEC
    (82) logical_and_expression -> . equality_expression
    (83) logical_and_expression -> . logical_and_expression AND equality_expression
    (110) primary_expression -> . identifier
    (111) primary_expression -> . constant
    (112) primary_expression -> . LPAREN expression RPAREN
    (84) equality_expression -> . relational_expression
    (85) equality_expression -> . equality_expression EQ relational_expression
    (86) equality_expression -> . equality_expression NEQ relational_expression
    (119) constant -> . FLOAT_LIT
    (120) constant -> . INT_LIT
    (121) constant -> . CHAR_LIT
    (122) constant -> . STR_LIT
    (87) relational_expression -> . add_expression
    (88) relational_expression -> . relational_expression LT add_expression
    (89) relational_expression -> . relational_expression GT add_expression
    (90) relational_expression -> . relational_expression LE add_expression
    (91) relational_expression -> . relational_expression GE add_expression
    (92) add_expression -> . mult_expression
    (93) add_expression -> . add_expression ADD_OP mult_expression
    (94) add_expression -> . add_expression SUB_OP mult_expression
    (95) mult_expression -> . unary_expression
    (96) mult_expression -> . mult_expression MULT_OP unary_expression
    (97) mult_expression -> . mult_expression DIV_OP unary_expression
    (98) mult_expression -> . mult_expression MOD_OP unary_expression

    CASE            shift and go to state 86
    DEFAULT         shift and go to state 80
    LBRACE          shift and go to state 43
    PRINT           shift and go to state 82
    SCAN            shift and go to state 79
    IF              shift and go to state 98
    SWITCH          shift and go to state 89
    WHILE           shift and go to state 83
    FOR             shift and go to state 92
    DO              shift and go to state 77
    CONTINUE        shift and go to state 103
    BREAK           shift and go to state 102
    RETURN          shift and go to state 78
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 25
    CHAR_ID         shift and go to state 7
    STR_ID          shift and go to state 13
    SEMI            reduce using rule 123 (empty -> .)
    INC             shift and go to state 33
    DEC             shift and go to state 3
    SUB_OP          shift and go to state 28
    NOT             shift and go to state 31
    LPAREN          shift and go to state 20
    FLOAT_LIT       shift and go to state 27
    INT_LIT         shift and go to state 29
    CHAR_LIT        shift and go to state 6
    STR_LIT         shift and go to state 4

    expression_statement           shift and go to state 76
    constant                       shift and go to state 1
    unary_expression               shift and go to state 2
    print_statement                shift and go to state 84
    iteration_statement            shift and go to state 85
    compound_statement             shift and go to state 87
    selection_statement            shift and go to state 88
    postfix_expression             shift and go to state 9
    relational_expression          shift and go to state 11
    statement                      shift and go to state 218
    logical_or_expression          shift and go to state 15
    empty                          shift and go to state 104
    assignment_expression          shift and go to state 59
    scan_statement                 shift and go to state 93
    mult_expression                shift and go to state 18
    expression_opt                 shift and go to state 94
    primary_expression             shift and go to state 19
    logical_and_expression         shift and go to state 21
    add_expression                 shift and go to state 22
    equality_expression            shift and go to state 23
    jump_statement                 shift and go to state 99
    labeled_statement              shift and go to state 100
    conditional_expression         shift and go to state 30
    identifier                     shift and go to state 138
    expression                     shift and go to state 108

state 211

    (5) main -> MAIN LPAREN empty RPAREN compound_statement .

    FLOAT_ID        reduce using rule 5 (main -> MAIN LPAREN empty RPAREN compound_statement .)
    INT_ID          reduce using rule 5 (main -> MAIN LPAREN empty RPAREN compound_statement .)
    CHAR_ID         reduce using rule 5 (main -> MAIN LPAREN empty RPAREN compound_statement .)
    STR_ID          reduce using rule 5 (main -> MAIN LPAREN empty RPAREN compound_statement .)
    $end            reduce using rule 5 (main -> MAIN LPAREN empty RPAREN compound_statement .)


state 212

    (59) iteration_statement -> DO statement WHILE LPAREN expression . RPAREN SEMI
    (66) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 219
    COMMA           shift and go to state 122


state 213

    (57) iteration_statement -> WHILE LPAREN expression RPAREN statement .

    RBRACE          reduce using rule 57 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CASE            reduce using rule 57 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 57 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 57 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    PRINT           reduce using rule 57 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SCAN            reduce using rule 57 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    IF              reduce using rule 57 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 57 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 57 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FOR             reduce using rule 57 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DO              reduce using rule 57 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 57 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 57 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 57 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FLOAT_ID        reduce using rule 57 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    INT_ID          reduce using rule 57 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CHAR_ID         reduce using rule 57 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    STR_ID          reduce using rule 57 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    INC             reduce using rule 57 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DEC             reduce using rule 57 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SUB_OP          reduce using rule 57 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    NOT             reduce using rule 57 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 57 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FLOAT_LIT       reduce using rule 57 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    INT_LIT         reduce using rule 57 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CHAR_LIT        reduce using rule 57 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    STR_LIT         reduce using rule 57 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SEMI            reduce using rule 57 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 57 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ELSE_IF         reduce using rule 57 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)


state 214

    (54) selection_statement -> SWITCH LPAREN expression RPAREN statement .

    RBRACE          reduce using rule 54 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CASE            reduce using rule 54 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 54 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 54 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    PRINT           reduce using rule 54 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SCAN            reduce using rule 54 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    IF              reduce using rule 54 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 54 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 54 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    FOR             reduce using rule 54 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DO              reduce using rule 54 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 54 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 54 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 54 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    FLOAT_ID        reduce using rule 54 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    INT_ID          reduce using rule 54 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CHAR_ID         reduce using rule 54 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    STR_ID          reduce using rule 54 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    INC             reduce using rule 54 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DEC             reduce using rule 54 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SUB_OP          reduce using rule 54 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    NOT             reduce using rule 54 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 54 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    FLOAT_LIT       reduce using rule 54 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    INT_LIT         reduce using rule 54 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CHAR_LIT        reduce using rule 54 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    STR_LIT         reduce using rule 54 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SEMI            reduce using rule 54 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    ELSE_IF         reduce using rule 54 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 54 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)


state 215

    (58) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt . SEMI expression_opt RPAREN statement

    SEMI            shift and go to state 220


state 216

    (22) initializer -> LBRACE initializer_list COMMA . RBRACE
    (24) initializer_list -> initializer_list COMMA . initializer
    (20) initializer -> . assignment_expression
    (21) initializer -> . LBRACE initializer_list RBRACE
    (22) initializer -> . LBRACE initializer_list COMMA RBRACE
    (67) assignment_expression -> . conditional_expression
    (68) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression COND_OP expression COLON conditional_expression
    (99) unary_expression -> . postfix_expression
    (100) unary_expression -> . INC unary_expression
    (101) unary_expression -> . DEC unary_expression
    (102) unary_expression -> . SUB_OP add_expression
    (103) unary_expression -> . NOT logical_or_expression
    (80) logical_or_expression -> . logical_and_expression
    (81) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (104) postfix_expression -> . primary_expression
    (105) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (106) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (107) postfix_expression -> . postfix_expression LPAREN RPAREN
    (108) postfix_expression -> . postfix_expression INC
    (109) postfix_expression -> . postfix_expression DEC
    (82) logical_and_expression -> . equality_expression
    (83) logical_and_expression -> . logical_and_expression AND equality_expression
    (110) primary_expression -> . identifier
    (111) primary_expression -> . constant
    (112) primary_expression -> . LPAREN expression RPAREN
    (84) equality_expression -> . relational_expression
    (85) equality_expression -> . equality_expression EQ relational_expression
    (86) equality_expression -> . equality_expression NEQ relational_expression
    (115) identifier -> . FLOAT_ID
    (116) identifier -> . INT_ID
    (117) identifier -> . CHAR_ID
    (118) identifier -> . STR_ID
    (119) constant -> . FLOAT_LIT
    (120) constant -> . INT_LIT
    (121) constant -> . CHAR_LIT
    (122) constant -> . STR_LIT
    (87) relational_expression -> . add_expression
    (88) relational_expression -> . relational_expression LT add_expression
    (89) relational_expression -> . relational_expression GT add_expression
    (90) relational_expression -> . relational_expression LE add_expression
    (91) relational_expression -> . relational_expression GE add_expression
    (92) add_expression -> . mult_expression
    (93) add_expression -> . add_expression ADD_OP mult_expression
    (94) add_expression -> . add_expression SUB_OP mult_expression
    (95) mult_expression -> . unary_expression
    (96) mult_expression -> . mult_expression MULT_OP unary_expression
    (97) mult_expression -> . mult_expression DIV_OP unary_expression
    (98) mult_expression -> . mult_expression MOD_OP unary_expression

    RBRACE          shift and go to state 222
    LBRACE          shift and go to state 192
    INC             shift and go to state 33
    DEC             shift and go to state 3
    SUB_OP          shift and go to state 28
    NOT             shift and go to state 31
    LPAREN          shift and go to state 20
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 25
    CHAR_ID         shift and go to state 7
    STR_ID          shift and go to state 13
    FLOAT_LIT       shift and go to state 27
    INT_LIT         shift and go to state 29
    CHAR_LIT        shift and go to state 6
    STR_LIT         shift and go to state 4

    constant                       shift and go to state 1
    assignment_expression          shift and go to state 191
    unary_expression               shift and go to state 2
    relational_expression          shift and go to state 11
    add_expression                 shift and go to state 22
    postfix_expression             shift and go to state 9
    initializer                    shift and go to state 221
    conditional_expression         shift and go to state 30
    mult_expression                shift and go to state 18
    logical_and_expression         shift and go to state 21
    identifier                     shift and go to state 42
    logical_or_expression          shift and go to state 15
    equality_expression            shift and go to state 23
    primary_expression             shift and go to state 19

state 217

    (21) initializer -> LBRACE initializer_list RBRACE .

    RBRACE          reduce using rule 21 (initializer -> LBRACE initializer_list RBRACE .)
    COMMA           reduce using rule 21 (initializer -> LBRACE initializer_list RBRACE .)
    SEMI            reduce using rule 21 (initializer -> LBRACE initializer_list RBRACE .)


state 218

    (51) selection_statement -> IF LPAREN expression RPAREN statement .
    (52) selection_statement -> IF LPAREN expression RPAREN statement . ELSE statement
    (53) selection_statement -> IF LPAREN expression RPAREN statement . else_if_statement ELSE statement
    (55) else_if_statement -> . ELSE_IF LPAREN expression RPAREN statement else_if_statement
    (56) else_if_statement -> . empty
    (123) empty -> .

  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for ELSE_IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
    RBRACE          reduce using rule 51 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CASE            reduce using rule 51 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 51 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 51 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PRINT           reduce using rule 51 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SCAN            reduce using rule 51 (selection_statement -> IF LPAREN expression RPAREN statement .)
    IF              reduce using rule 51 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 51 (selection_statement -> IF LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 51 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FOR             reduce using rule 51 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DO              reduce using rule 51 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 51 (selection_statement -> IF LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 51 (selection_statement -> IF LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 51 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FLOAT_ID        reduce using rule 51 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INT_ID          reduce using rule 51 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CHAR_ID         reduce using rule 51 (selection_statement -> IF LPAREN expression RPAREN statement .)
    STR_ID          reduce using rule 51 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INC             reduce using rule 51 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DEC             reduce using rule 51 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SUB_OP          reduce using rule 51 (selection_statement -> IF LPAREN expression RPAREN statement .)
    NOT             reduce using rule 51 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 51 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FLOAT_LIT       reduce using rule 51 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INT_LIT         reduce using rule 51 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CHAR_LIT        reduce using rule 51 (selection_statement -> IF LPAREN expression RPAREN statement .)
    STR_LIT         reduce using rule 51 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SEMI            reduce using rule 51 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ELSE            shift and go to state 223
    ELSE_IF         shift and go to state 224

  ! ELSE_IF         [ reduce using rule 51 (selection_statement -> IF LPAREN expression RPAREN statement .) ]
  ! ELSE            [ reduce using rule 51 (selection_statement -> IF LPAREN expression RPAREN statement .) ]
  ! ELSE            [ reduce using rule 123 (empty -> .) ]

    else_if_statement              shift and go to state 225
    empty                          shift and go to state 226

state 219

    (59) iteration_statement -> DO statement WHILE LPAREN expression RPAREN . SEMI

    SEMI            shift and go to state 227


state 220

    (58) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI . expression_opt RPAREN statement
    (63) expression_opt -> . empty
    (64) expression_opt -> . expression
    (123) empty -> .
    (65) expression -> . assignment_expression
    (66) expression -> . expression COMMA assignment_expression
    (67) assignment_expression -> . conditional_expression
    (68) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression COND_OP expression COLON conditional_expression
    (99) unary_expression -> . postfix_expression
    (100) unary_expression -> . INC unary_expression
    (101) unary_expression -> . DEC unary_expression
    (102) unary_expression -> . SUB_OP add_expression
    (103) unary_expression -> . NOT logical_or_expression
    (80) logical_or_expression -> . logical_and_expression
    (81) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (104) postfix_expression -> . primary_expression
    (105) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (106) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (107) postfix_expression -> . postfix_expression LPAREN RPAREN
    (108) postfix_expression -> . postfix_expression INC
    (109) postfix_expression -> . postfix_expression DEC
    (82) logical_and_expression -> . equality_expression
    (83) logical_and_expression -> . logical_and_expression AND equality_expression
    (110) primary_expression -> . identifier
    (111) primary_expression -> . constant
    (112) primary_expression -> . LPAREN expression RPAREN
    (84) equality_expression -> . relational_expression
    (85) equality_expression -> . equality_expression EQ relational_expression
    (86) equality_expression -> . equality_expression NEQ relational_expression
    (115) identifier -> . FLOAT_ID
    (116) identifier -> . INT_ID
    (117) identifier -> . CHAR_ID
    (118) identifier -> . STR_ID
    (119) constant -> . FLOAT_LIT
    (120) constant -> . INT_LIT
    (121) constant -> . CHAR_LIT
    (122) constant -> . STR_LIT
    (87) relational_expression -> . add_expression
    (88) relational_expression -> . relational_expression LT add_expression
    (89) relational_expression -> . relational_expression GT add_expression
    (90) relational_expression -> . relational_expression LE add_expression
    (91) relational_expression -> . relational_expression GE add_expression
    (92) add_expression -> . mult_expression
    (93) add_expression -> . add_expression ADD_OP mult_expression
    (94) add_expression -> . add_expression SUB_OP mult_expression
    (95) mult_expression -> . unary_expression
    (96) mult_expression -> . mult_expression MULT_OP unary_expression
    (97) mult_expression -> . mult_expression DIV_OP unary_expression
    (98) mult_expression -> . mult_expression MOD_OP unary_expression

    RPAREN          reduce using rule 123 (empty -> .)
    INC             shift and go to state 33
    DEC             shift and go to state 3
    SUB_OP          shift and go to state 28
    NOT             shift and go to state 31
    LPAREN          shift and go to state 20
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 25
    CHAR_ID         shift and go to state 7
    STR_ID          shift and go to state 13
    FLOAT_LIT       shift and go to state 27
    INT_LIT         shift and go to state 29
    CHAR_LIT        shift and go to state 6
    STR_LIT         shift and go to state 4

    constant                       shift and go to state 1
    assignment_expression          shift and go to state 59
    unary_expression               shift and go to state 2
    relational_expression          shift and go to state 11
    add_expression                 shift and go to state 22
    postfix_expression             shift and go to state 9
    expression_opt                 shift and go to state 228
    equality_expression            shift and go to state 23
    conditional_expression         shift and go to state 30
    mult_expression                shift and go to state 18
    logical_and_expression         shift and go to state 21
    identifier                     shift and go to state 42
    expression                     shift and go to state 108
    logical_or_expression          shift and go to state 15
    empty                          shift and go to state 104
    primary_expression             shift and go to state 19

state 221

    (24) initializer_list -> initializer_list COMMA initializer .

    RBRACE          reduce using rule 24 (initializer_list -> initializer_list COMMA initializer .)
    COMMA           reduce using rule 24 (initializer_list -> initializer_list COMMA initializer .)


state 222

    (22) initializer -> LBRACE initializer_list COMMA RBRACE .

    RBRACE          reduce using rule 22 (initializer -> LBRACE initializer_list COMMA RBRACE .)
    COMMA           reduce using rule 22 (initializer -> LBRACE initializer_list COMMA RBRACE .)
    SEMI            reduce using rule 22 (initializer -> LBRACE initializer_list COMMA RBRACE .)


state 223

    (52) selection_statement -> IF LPAREN expression RPAREN statement ELSE . statement
    (31) statement -> . labeled_statement
    (32) statement -> . expression_statement
    (33) statement -> . compound_statement
    (34) statement -> . print_statement
    (35) statement -> . scan_statement
    (36) statement -> . selection_statement
    (37) statement -> . iteration_statement
    (38) statement -> . jump_statement
    (41) labeled_statement -> . identifier COLON statement
    (42) labeled_statement -> . CASE constant_expression COLON statement
    (43) labeled_statement -> . DEFAULT COLON statement
    (44) expression_statement -> . expression_opt SEMI
    (45) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (46) compound_statement -> . LBRACE statement_list RBRACE
    (47) compound_statement -> . LBRACE declaration_list RBRACE
    (48) compound_statement -> . LBRACE RBRACE
    (39) print_statement -> . PRINT LPAREN assignment_expression RPAREN
    (40) scan_statement -> . SCAN LPAREN identifier RPAREN
    (51) selection_statement -> . IF LPAREN expression RPAREN statement
    (52) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (53) selection_statement -> . IF LPAREN expression RPAREN statement else_if_statement ELSE statement
    (54) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (57) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (58) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (59) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (60) jump_statement -> . CONTINUE SEMI
    (61) jump_statement -> . BREAK SEMI
    (62) jump_statement -> . RETURN expression_opt SEMI
    (115) identifier -> . FLOAT_ID
    (116) identifier -> . INT_ID
    (117) identifier -> . CHAR_ID
    (118) identifier -> . STR_ID
    (63) expression_opt -> . empty
    (64) expression_opt -> . expression
    (123) empty -> .
    (65) expression -> . assignment_expression
    (66) expression -> . expression COMMA assignment_expression
    (67) assignment_expression -> . conditional_expression
    (68) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression COND_OP expression COLON conditional_expression
    (99) unary_expression -> . postfix_expression
    (100) unary_expression -> . INC unary_expression
    (101) unary_expression -> . DEC unary_expression
    (102) unary_expression -> . SUB_OP add_expression
    (103) unary_expression -> . NOT logical_or_expression
    (80) logical_or_expression -> . logical_and_expression
    (81) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (104) postfix_expression -> . primary_expression
    (105) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (106) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (107) postfix_expression -> . postfix_expression LPAREN RPAREN
    (108) postfix_expression -> . postfix_expression INC
    (109) postfix_expression -> . postfix_expression DEC
    (82) logical_and_expression -> . equality_expression
    (83) logical_and_expression -> . logical_and_expression AND equality_expression
    (110) primary_expression -> . identifier
    (111) primary_expression -> . constant
    (112) primary_expression -> . LPAREN expression RPAREN
    (84) equality_expression -> . relational_expression
    (85) equality_expression -> . equality_expression EQ relational_expression
    (86) equality_expression -> . equality_expression NEQ relational_expression
    (119) constant -> . FLOAT_LIT
    (120) constant -> . INT_LIT
    (121) constant -> . CHAR_LIT
    (122) constant -> . STR_LIT
    (87) relational_expression -> . add_expression
    (88) relational_expression -> . relational_expression LT add_expression
    (89) relational_expression -> . relational_expression GT add_expression
    (90) relational_expression -> . relational_expression LE add_expression
    (91) relational_expression -> . relational_expression GE add_expression
    (92) add_expression -> . mult_expression
    (93) add_expression -> . add_expression ADD_OP mult_expression
    (94) add_expression -> . add_expression SUB_OP mult_expression
    (95) mult_expression -> . unary_expression
    (96) mult_expression -> . mult_expression MULT_OP unary_expression
    (97) mult_expression -> . mult_expression DIV_OP unary_expression
    (98) mult_expression -> . mult_expression MOD_OP unary_expression

    CASE            shift and go to state 86
    DEFAULT         shift and go to state 80
    LBRACE          shift and go to state 43
    PRINT           shift and go to state 82
    SCAN            shift and go to state 79
    IF              shift and go to state 98
    SWITCH          shift and go to state 89
    WHILE           shift and go to state 83
    FOR             shift and go to state 92
    DO              shift and go to state 77
    CONTINUE        shift and go to state 103
    BREAK           shift and go to state 102
    RETURN          shift and go to state 78
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 25
    CHAR_ID         shift and go to state 7
    STR_ID          shift and go to state 13
    SEMI            reduce using rule 123 (empty -> .)
    INC             shift and go to state 33
    DEC             shift and go to state 3
    SUB_OP          shift and go to state 28
    NOT             shift and go to state 31
    LPAREN          shift and go to state 20
    FLOAT_LIT       shift and go to state 27
    INT_LIT         shift and go to state 29
    CHAR_LIT        shift and go to state 6
    STR_LIT         shift and go to state 4

    expression_statement           shift and go to state 76
    constant                       shift and go to state 1
    unary_expression               shift and go to state 2
    print_statement                shift and go to state 84
    iteration_statement            shift and go to state 85
    compound_statement             shift and go to state 87
    selection_statement            shift and go to state 88
    postfix_expression             shift and go to state 9
    relational_expression          shift and go to state 11
    statement                      shift and go to state 229
    logical_or_expression          shift and go to state 15
    empty                          shift and go to state 104
    assignment_expression          shift and go to state 59
    scan_statement                 shift and go to state 93
    mult_expression                shift and go to state 18
    expression_opt                 shift and go to state 94
    primary_expression             shift and go to state 19
    logical_and_expression         shift and go to state 21
    add_expression                 shift and go to state 22
    equality_expression            shift and go to state 23
    jump_statement                 shift and go to state 99
    labeled_statement              shift and go to state 100
    conditional_expression         shift and go to state 30
    identifier                     shift and go to state 138
    expression                     shift and go to state 108

state 224

    (55) else_if_statement -> ELSE_IF . LPAREN expression RPAREN statement else_if_statement

    LPAREN          shift and go to state 230


state 225

    (53) selection_statement -> IF LPAREN expression RPAREN statement else_if_statement . ELSE statement

    ELSE            shift and go to state 231


state 226

    (56) else_if_statement -> empty .

    ELSE            reduce using rule 56 (else_if_statement -> empty .)


state 227

    (59) iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .

    RBRACE          reduce using rule 59 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    CASE            reduce using rule 59 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    DEFAULT         reduce using rule 59 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    LBRACE          reduce using rule 59 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    PRINT           reduce using rule 59 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    SCAN            reduce using rule 59 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    IF              reduce using rule 59 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    SWITCH          reduce using rule 59 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    WHILE           reduce using rule 59 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    FOR             reduce using rule 59 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    DO              reduce using rule 59 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    CONTINUE        reduce using rule 59 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    BREAK           reduce using rule 59 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    RETURN          reduce using rule 59 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    FLOAT_ID        reduce using rule 59 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    INT_ID          reduce using rule 59 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    CHAR_ID         reduce using rule 59 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    STR_ID          reduce using rule 59 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    INC             reduce using rule 59 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    DEC             reduce using rule 59 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    SUB_OP          reduce using rule 59 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    NOT             reduce using rule 59 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    LPAREN          reduce using rule 59 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    FLOAT_LIT       reduce using rule 59 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    INT_LIT         reduce using rule 59 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    CHAR_LIT        reduce using rule 59 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    STR_LIT         reduce using rule 59 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    SEMI            reduce using rule 59 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    ELSE            reduce using rule 59 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    ELSE_IF         reduce using rule 59 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)


state 228

    (58) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt . RPAREN statement

    RPAREN          shift and go to state 232


state 229

    (52) selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .

    RBRACE          reduce using rule 52 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CASE            reduce using rule 52 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DEFAULT         reduce using rule 52 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LBRACE          reduce using rule 52 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PRINT           reduce using rule 52 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SCAN            reduce using rule 52 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    IF              reduce using rule 52 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SWITCH          reduce using rule 52 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    WHILE           reduce using rule 52 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FOR             reduce using rule 52 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DO              reduce using rule 52 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CONTINUE        reduce using rule 52 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    BREAK           reduce using rule 52 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RETURN          reduce using rule 52 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FLOAT_ID        reduce using rule 52 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INT_ID          reduce using rule 52 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CHAR_ID         reduce using rule 52 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STR_ID          reduce using rule 52 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INC             reduce using rule 52 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DEC             reduce using rule 52 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SUB_OP          reduce using rule 52 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    NOT             reduce using rule 52 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LPAREN          reduce using rule 52 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FLOAT_LIT       reduce using rule 52 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INT_LIT         reduce using rule 52 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CHAR_LIT        reduce using rule 52 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STR_LIT         reduce using rule 52 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SEMI            reduce using rule 52 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ELSE_IF         reduce using rule 52 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ELSE            reduce using rule 52 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)


state 230

    (55) else_if_statement -> ELSE_IF LPAREN . expression RPAREN statement else_if_statement
    (65) expression -> . assignment_expression
    (66) expression -> . expression COMMA assignment_expression
    (67) assignment_expression -> . conditional_expression
    (68) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression COND_OP expression COLON conditional_expression
    (99) unary_expression -> . postfix_expression
    (100) unary_expression -> . INC unary_expression
    (101) unary_expression -> . DEC unary_expression
    (102) unary_expression -> . SUB_OP add_expression
    (103) unary_expression -> . NOT logical_or_expression
    (80) logical_or_expression -> . logical_and_expression
    (81) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (104) postfix_expression -> . primary_expression
    (105) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (106) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (107) postfix_expression -> . postfix_expression LPAREN RPAREN
    (108) postfix_expression -> . postfix_expression INC
    (109) postfix_expression -> . postfix_expression DEC
    (82) logical_and_expression -> . equality_expression
    (83) logical_and_expression -> . logical_and_expression AND equality_expression
    (110) primary_expression -> . identifier
    (111) primary_expression -> . constant
    (112) primary_expression -> . LPAREN expression RPAREN
    (84) equality_expression -> . relational_expression
    (85) equality_expression -> . equality_expression EQ relational_expression
    (86) equality_expression -> . equality_expression NEQ relational_expression
    (115) identifier -> . FLOAT_ID
    (116) identifier -> . INT_ID
    (117) identifier -> . CHAR_ID
    (118) identifier -> . STR_ID
    (119) constant -> . FLOAT_LIT
    (120) constant -> . INT_LIT
    (121) constant -> . CHAR_LIT
    (122) constant -> . STR_LIT
    (87) relational_expression -> . add_expression
    (88) relational_expression -> . relational_expression LT add_expression
    (89) relational_expression -> . relational_expression GT add_expression
    (90) relational_expression -> . relational_expression LE add_expression
    (91) relational_expression -> . relational_expression GE add_expression
    (92) add_expression -> . mult_expression
    (93) add_expression -> . add_expression ADD_OP mult_expression
    (94) add_expression -> . add_expression SUB_OP mult_expression
    (95) mult_expression -> . unary_expression
    (96) mult_expression -> . mult_expression MULT_OP unary_expression
    (97) mult_expression -> . mult_expression DIV_OP unary_expression
    (98) mult_expression -> . mult_expression MOD_OP unary_expression

    INC             shift and go to state 33
    DEC             shift and go to state 3
    SUB_OP          shift and go to state 28
    NOT             shift and go to state 31
    LPAREN          shift and go to state 20
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 25
    CHAR_ID         shift and go to state 7
    STR_ID          shift and go to state 13
    FLOAT_LIT       shift and go to state 27
    INT_LIT         shift and go to state 29
    CHAR_LIT        shift and go to state 6
    STR_LIT         shift and go to state 4

    assignment_expression          shift and go to state 59
    unary_expression               shift and go to state 2
    relational_expression          shift and go to state 11
    add_expression                 shift and go to state 22
    postfix_expression             shift and go to state 9
    conditional_expression         shift and go to state 30
    mult_expression                shift and go to state 18
    constant                       shift and go to state 1
    logical_and_expression         shift and go to state 21
    identifier                     shift and go to state 42
    expression                     shift and go to state 233
    logical_or_expression          shift and go to state 15
    equality_expression            shift and go to state 23
    primary_expression             shift and go to state 19

state 231

    (53) selection_statement -> IF LPAREN expression RPAREN statement else_if_statement ELSE . statement
    (31) statement -> . labeled_statement
    (32) statement -> . expression_statement
    (33) statement -> . compound_statement
    (34) statement -> . print_statement
    (35) statement -> . scan_statement
    (36) statement -> . selection_statement
    (37) statement -> . iteration_statement
    (38) statement -> . jump_statement
    (41) labeled_statement -> . identifier COLON statement
    (42) labeled_statement -> . CASE constant_expression COLON statement
    (43) labeled_statement -> . DEFAULT COLON statement
    (44) expression_statement -> . expression_opt SEMI
    (45) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (46) compound_statement -> . LBRACE statement_list RBRACE
    (47) compound_statement -> . LBRACE declaration_list RBRACE
    (48) compound_statement -> . LBRACE RBRACE
    (39) print_statement -> . PRINT LPAREN assignment_expression RPAREN
    (40) scan_statement -> . SCAN LPAREN identifier RPAREN
    (51) selection_statement -> . IF LPAREN expression RPAREN statement
    (52) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (53) selection_statement -> . IF LPAREN expression RPAREN statement else_if_statement ELSE statement
    (54) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (57) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (58) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (59) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (60) jump_statement -> . CONTINUE SEMI
    (61) jump_statement -> . BREAK SEMI
    (62) jump_statement -> . RETURN expression_opt SEMI
    (115) identifier -> . FLOAT_ID
    (116) identifier -> . INT_ID
    (117) identifier -> . CHAR_ID
    (118) identifier -> . STR_ID
    (63) expression_opt -> . empty
    (64) expression_opt -> . expression
    (123) empty -> .
    (65) expression -> . assignment_expression
    (66) expression -> . expression COMMA assignment_expression
    (67) assignment_expression -> . conditional_expression
    (68) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression COND_OP expression COLON conditional_expression
    (99) unary_expression -> . postfix_expression
    (100) unary_expression -> . INC unary_expression
    (101) unary_expression -> . DEC unary_expression
    (102) unary_expression -> . SUB_OP add_expression
    (103) unary_expression -> . NOT logical_or_expression
    (80) logical_or_expression -> . logical_and_expression
    (81) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (104) postfix_expression -> . primary_expression
    (105) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (106) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (107) postfix_expression -> . postfix_expression LPAREN RPAREN
    (108) postfix_expression -> . postfix_expression INC
    (109) postfix_expression -> . postfix_expression DEC
    (82) logical_and_expression -> . equality_expression
    (83) logical_and_expression -> . logical_and_expression AND equality_expression
    (110) primary_expression -> . identifier
    (111) primary_expression -> . constant
    (112) primary_expression -> . LPAREN expression RPAREN
    (84) equality_expression -> . relational_expression
    (85) equality_expression -> . equality_expression EQ relational_expression
    (86) equality_expression -> . equality_expression NEQ relational_expression
    (119) constant -> . FLOAT_LIT
    (120) constant -> . INT_LIT
    (121) constant -> . CHAR_LIT
    (122) constant -> . STR_LIT
    (87) relational_expression -> . add_expression
    (88) relational_expression -> . relational_expression LT add_expression
    (89) relational_expression -> . relational_expression GT add_expression
    (90) relational_expression -> . relational_expression LE add_expression
    (91) relational_expression -> . relational_expression GE add_expression
    (92) add_expression -> . mult_expression
    (93) add_expression -> . add_expression ADD_OP mult_expression
    (94) add_expression -> . add_expression SUB_OP mult_expression
    (95) mult_expression -> . unary_expression
    (96) mult_expression -> . mult_expression MULT_OP unary_expression
    (97) mult_expression -> . mult_expression DIV_OP unary_expression
    (98) mult_expression -> . mult_expression MOD_OP unary_expression

    CASE            shift and go to state 86
    DEFAULT         shift and go to state 80
    LBRACE          shift and go to state 43
    PRINT           shift and go to state 82
    SCAN            shift and go to state 79
    IF              shift and go to state 98
    SWITCH          shift and go to state 89
    WHILE           shift and go to state 83
    FOR             shift and go to state 92
    DO              shift and go to state 77
    CONTINUE        shift and go to state 103
    BREAK           shift and go to state 102
    RETURN          shift and go to state 78
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 25
    CHAR_ID         shift and go to state 7
    STR_ID          shift and go to state 13
    SEMI            reduce using rule 123 (empty -> .)
    INC             shift and go to state 33
    DEC             shift and go to state 3
    SUB_OP          shift and go to state 28
    NOT             shift and go to state 31
    LPAREN          shift and go to state 20
    FLOAT_LIT       shift and go to state 27
    INT_LIT         shift and go to state 29
    CHAR_LIT        shift and go to state 6
    STR_LIT         shift and go to state 4

    expression_statement           shift and go to state 76
    constant                       shift and go to state 1
    unary_expression               shift and go to state 2
    print_statement                shift and go to state 84
    iteration_statement            shift and go to state 85
    compound_statement             shift and go to state 87
    selection_statement            shift and go to state 88
    postfix_expression             shift and go to state 9
    relational_expression          shift and go to state 11
    statement                      shift and go to state 234
    logical_or_expression          shift and go to state 15
    empty                          shift and go to state 104
    assignment_expression          shift and go to state 59
    scan_statement                 shift and go to state 93
    mult_expression                shift and go to state 18
    expression_opt                 shift and go to state 94
    primary_expression             shift and go to state 19
    logical_and_expression         shift and go to state 21
    add_expression                 shift and go to state 22
    equality_expression            shift and go to state 23
    jump_statement                 shift and go to state 99
    labeled_statement              shift and go to state 100
    conditional_expression         shift and go to state 30
    identifier                     shift and go to state 138
    expression                     shift and go to state 108

state 232

    (58) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN . statement
    (31) statement -> . labeled_statement
    (32) statement -> . expression_statement
    (33) statement -> . compound_statement
    (34) statement -> . print_statement
    (35) statement -> . scan_statement
    (36) statement -> . selection_statement
    (37) statement -> . iteration_statement
    (38) statement -> . jump_statement
    (41) labeled_statement -> . identifier COLON statement
    (42) labeled_statement -> . CASE constant_expression COLON statement
    (43) labeled_statement -> . DEFAULT COLON statement
    (44) expression_statement -> . expression_opt SEMI
    (45) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (46) compound_statement -> . LBRACE statement_list RBRACE
    (47) compound_statement -> . LBRACE declaration_list RBRACE
    (48) compound_statement -> . LBRACE RBRACE
    (39) print_statement -> . PRINT LPAREN assignment_expression RPAREN
    (40) scan_statement -> . SCAN LPAREN identifier RPAREN
    (51) selection_statement -> . IF LPAREN expression RPAREN statement
    (52) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (53) selection_statement -> . IF LPAREN expression RPAREN statement else_if_statement ELSE statement
    (54) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (57) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (58) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (59) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (60) jump_statement -> . CONTINUE SEMI
    (61) jump_statement -> . BREAK SEMI
    (62) jump_statement -> . RETURN expression_opt SEMI
    (115) identifier -> . FLOAT_ID
    (116) identifier -> . INT_ID
    (117) identifier -> . CHAR_ID
    (118) identifier -> . STR_ID
    (63) expression_opt -> . empty
    (64) expression_opt -> . expression
    (123) empty -> .
    (65) expression -> . assignment_expression
    (66) expression -> . expression COMMA assignment_expression
    (67) assignment_expression -> . conditional_expression
    (68) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression COND_OP expression COLON conditional_expression
    (99) unary_expression -> . postfix_expression
    (100) unary_expression -> . INC unary_expression
    (101) unary_expression -> . DEC unary_expression
    (102) unary_expression -> . SUB_OP add_expression
    (103) unary_expression -> . NOT logical_or_expression
    (80) logical_or_expression -> . logical_and_expression
    (81) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (104) postfix_expression -> . primary_expression
    (105) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (106) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (107) postfix_expression -> . postfix_expression LPAREN RPAREN
    (108) postfix_expression -> . postfix_expression INC
    (109) postfix_expression -> . postfix_expression DEC
    (82) logical_and_expression -> . equality_expression
    (83) logical_and_expression -> . logical_and_expression AND equality_expression
    (110) primary_expression -> . identifier
    (111) primary_expression -> . constant
    (112) primary_expression -> . LPAREN expression RPAREN
    (84) equality_expression -> . relational_expression
    (85) equality_expression -> . equality_expression EQ relational_expression
    (86) equality_expression -> . equality_expression NEQ relational_expression
    (119) constant -> . FLOAT_LIT
    (120) constant -> . INT_LIT
    (121) constant -> . CHAR_LIT
    (122) constant -> . STR_LIT
    (87) relational_expression -> . add_expression
    (88) relational_expression -> . relational_expression LT add_expression
    (89) relational_expression -> . relational_expression GT add_expression
    (90) relational_expression -> . relational_expression LE add_expression
    (91) relational_expression -> . relational_expression GE add_expression
    (92) add_expression -> . mult_expression
    (93) add_expression -> . add_expression ADD_OP mult_expression
    (94) add_expression -> . add_expression SUB_OP mult_expression
    (95) mult_expression -> . unary_expression
    (96) mult_expression -> . mult_expression MULT_OP unary_expression
    (97) mult_expression -> . mult_expression DIV_OP unary_expression
    (98) mult_expression -> . mult_expression MOD_OP unary_expression

    CASE            shift and go to state 86
    DEFAULT         shift and go to state 80
    LBRACE          shift and go to state 43
    PRINT           shift and go to state 82
    SCAN            shift and go to state 79
    IF              shift and go to state 98
    SWITCH          shift and go to state 89
    WHILE           shift and go to state 83
    FOR             shift and go to state 92
    DO              shift and go to state 77
    CONTINUE        shift and go to state 103
    BREAK           shift and go to state 102
    RETURN          shift and go to state 78
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 25
    CHAR_ID         shift and go to state 7
    STR_ID          shift and go to state 13
    SEMI            reduce using rule 123 (empty -> .)
    INC             shift and go to state 33
    DEC             shift and go to state 3
    SUB_OP          shift and go to state 28
    NOT             shift and go to state 31
    LPAREN          shift and go to state 20
    FLOAT_LIT       shift and go to state 27
    INT_LIT         shift and go to state 29
    CHAR_LIT        shift and go to state 6
    STR_LIT         shift and go to state 4

    expression_statement           shift and go to state 76
    constant                       shift and go to state 1
    unary_expression               shift and go to state 2
    print_statement                shift and go to state 84
    iteration_statement            shift and go to state 85
    compound_statement             shift and go to state 87
    selection_statement            shift and go to state 88
    postfix_expression             shift and go to state 9
    relational_expression          shift and go to state 11
    statement                      shift and go to state 235
    logical_or_expression          shift and go to state 15
    empty                          shift and go to state 104
    assignment_expression          shift and go to state 59
    scan_statement                 shift and go to state 93
    mult_expression                shift and go to state 18
    expression_opt                 shift and go to state 94
    primary_expression             shift and go to state 19
    logical_and_expression         shift and go to state 21
    add_expression                 shift and go to state 22
    equality_expression            shift and go to state 23
    jump_statement                 shift and go to state 99
    labeled_statement              shift and go to state 100
    conditional_expression         shift and go to state 30
    identifier                     shift and go to state 138
    expression                     shift and go to state 108

state 233

    (55) else_if_statement -> ELSE_IF LPAREN expression . RPAREN statement else_if_statement
    (66) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 236
    COMMA           shift and go to state 122


state 234

    (53) selection_statement -> IF LPAREN expression RPAREN statement else_if_statement ELSE statement .

    RBRACE          reduce using rule 53 (selection_statement -> IF LPAREN expression RPAREN statement else_if_statement ELSE statement .)
    CASE            reduce using rule 53 (selection_statement -> IF LPAREN expression RPAREN statement else_if_statement ELSE statement .)
    DEFAULT         reduce using rule 53 (selection_statement -> IF LPAREN expression RPAREN statement else_if_statement ELSE statement .)
    LBRACE          reduce using rule 53 (selection_statement -> IF LPAREN expression RPAREN statement else_if_statement ELSE statement .)
    PRINT           reduce using rule 53 (selection_statement -> IF LPAREN expression RPAREN statement else_if_statement ELSE statement .)
    SCAN            reduce using rule 53 (selection_statement -> IF LPAREN expression RPAREN statement else_if_statement ELSE statement .)
    IF              reduce using rule 53 (selection_statement -> IF LPAREN expression RPAREN statement else_if_statement ELSE statement .)
    SWITCH          reduce using rule 53 (selection_statement -> IF LPAREN expression RPAREN statement else_if_statement ELSE statement .)
    WHILE           reduce using rule 53 (selection_statement -> IF LPAREN expression RPAREN statement else_if_statement ELSE statement .)
    FOR             reduce using rule 53 (selection_statement -> IF LPAREN expression RPAREN statement else_if_statement ELSE statement .)
    DO              reduce using rule 53 (selection_statement -> IF LPAREN expression RPAREN statement else_if_statement ELSE statement .)
    CONTINUE        reduce using rule 53 (selection_statement -> IF LPAREN expression RPAREN statement else_if_statement ELSE statement .)
    BREAK           reduce using rule 53 (selection_statement -> IF LPAREN expression RPAREN statement else_if_statement ELSE statement .)
    RETURN          reduce using rule 53 (selection_statement -> IF LPAREN expression RPAREN statement else_if_statement ELSE statement .)
    FLOAT_ID        reduce using rule 53 (selection_statement -> IF LPAREN expression RPAREN statement else_if_statement ELSE statement .)
    INT_ID          reduce using rule 53 (selection_statement -> IF LPAREN expression RPAREN statement else_if_statement ELSE statement .)
    CHAR_ID         reduce using rule 53 (selection_statement -> IF LPAREN expression RPAREN statement else_if_statement ELSE statement .)
    STR_ID          reduce using rule 53 (selection_statement -> IF LPAREN expression RPAREN statement else_if_statement ELSE statement .)
    INC             reduce using rule 53 (selection_statement -> IF LPAREN expression RPAREN statement else_if_statement ELSE statement .)
    DEC             reduce using rule 53 (selection_statement -> IF LPAREN expression RPAREN statement else_if_statement ELSE statement .)
    SUB_OP          reduce using rule 53 (selection_statement -> IF LPAREN expression RPAREN statement else_if_statement ELSE statement .)
    NOT             reduce using rule 53 (selection_statement -> IF LPAREN expression RPAREN statement else_if_statement ELSE statement .)
    LPAREN          reduce using rule 53 (selection_statement -> IF LPAREN expression RPAREN statement else_if_statement ELSE statement .)
    FLOAT_LIT       reduce using rule 53 (selection_statement -> IF LPAREN expression RPAREN statement else_if_statement ELSE statement .)
    INT_LIT         reduce using rule 53 (selection_statement -> IF LPAREN expression RPAREN statement else_if_statement ELSE statement .)
    CHAR_LIT        reduce using rule 53 (selection_statement -> IF LPAREN expression RPAREN statement else_if_statement ELSE statement .)
    STR_LIT         reduce using rule 53 (selection_statement -> IF LPAREN expression RPAREN statement else_if_statement ELSE statement .)
    SEMI            reduce using rule 53 (selection_statement -> IF LPAREN expression RPAREN statement else_if_statement ELSE statement .)
    ELSE_IF         reduce using rule 53 (selection_statement -> IF LPAREN expression RPAREN statement else_if_statement ELSE statement .)
    ELSE            reduce using rule 53 (selection_statement -> IF LPAREN expression RPAREN statement else_if_statement ELSE statement .)


state 235

    (58) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .

    RBRACE          reduce using rule 58 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    CASE            reduce using rule 58 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    DEFAULT         reduce using rule 58 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    LBRACE          reduce using rule 58 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    PRINT           reduce using rule 58 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    SCAN            reduce using rule 58 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    IF              reduce using rule 58 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    SWITCH          reduce using rule 58 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    WHILE           reduce using rule 58 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    FOR             reduce using rule 58 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    DO              reduce using rule 58 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    CONTINUE        reduce using rule 58 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    BREAK           reduce using rule 58 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    RETURN          reduce using rule 58 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    FLOAT_ID        reduce using rule 58 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    INT_ID          reduce using rule 58 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    CHAR_ID         reduce using rule 58 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    STR_ID          reduce using rule 58 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    INC             reduce using rule 58 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    DEC             reduce using rule 58 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    SUB_OP          reduce using rule 58 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    NOT             reduce using rule 58 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    LPAREN          reduce using rule 58 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    FLOAT_LIT       reduce using rule 58 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    INT_LIT         reduce using rule 58 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    CHAR_LIT        reduce using rule 58 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    STR_LIT         reduce using rule 58 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    SEMI            reduce using rule 58 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    ELSE            reduce using rule 58 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    ELSE_IF         reduce using rule 58 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)


state 236

    (55) else_if_statement -> ELSE_IF LPAREN expression RPAREN . statement else_if_statement
    (31) statement -> . labeled_statement
    (32) statement -> . expression_statement
    (33) statement -> . compound_statement
    (34) statement -> . print_statement
    (35) statement -> . scan_statement
    (36) statement -> . selection_statement
    (37) statement -> . iteration_statement
    (38) statement -> . jump_statement
    (41) labeled_statement -> . identifier COLON statement
    (42) labeled_statement -> . CASE constant_expression COLON statement
    (43) labeled_statement -> . DEFAULT COLON statement
    (44) expression_statement -> . expression_opt SEMI
    (45) compound_statement -> . LBRACE declaration_list statement_list RBRACE
    (46) compound_statement -> . LBRACE statement_list RBRACE
    (47) compound_statement -> . LBRACE declaration_list RBRACE
    (48) compound_statement -> . LBRACE RBRACE
    (39) print_statement -> . PRINT LPAREN assignment_expression RPAREN
    (40) scan_statement -> . SCAN LPAREN identifier RPAREN
    (51) selection_statement -> . IF LPAREN expression RPAREN statement
    (52) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (53) selection_statement -> . IF LPAREN expression RPAREN statement else_if_statement ELSE statement
    (54) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (57) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (58) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (59) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (60) jump_statement -> . CONTINUE SEMI
    (61) jump_statement -> . BREAK SEMI
    (62) jump_statement -> . RETURN expression_opt SEMI
    (115) identifier -> . FLOAT_ID
    (116) identifier -> . INT_ID
    (117) identifier -> . CHAR_ID
    (118) identifier -> . STR_ID
    (63) expression_opt -> . empty
    (64) expression_opt -> . expression
    (123) empty -> .
    (65) expression -> . assignment_expression
    (66) expression -> . expression COMMA assignment_expression
    (67) assignment_expression -> . conditional_expression
    (68) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (75) conditional_expression -> . logical_or_expression
    (76) conditional_expression -> . logical_or_expression COND_OP expression COLON conditional_expression
    (99) unary_expression -> . postfix_expression
    (100) unary_expression -> . INC unary_expression
    (101) unary_expression -> . DEC unary_expression
    (102) unary_expression -> . SUB_OP add_expression
    (103) unary_expression -> . NOT logical_or_expression
    (80) logical_or_expression -> . logical_and_expression
    (81) logical_or_expression -> . logical_and_expression OR logical_or_expression
    (104) postfix_expression -> . primary_expression
    (105) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (106) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (107) postfix_expression -> . postfix_expression LPAREN RPAREN
    (108) postfix_expression -> . postfix_expression INC
    (109) postfix_expression -> . postfix_expression DEC
    (82) logical_and_expression -> . equality_expression
    (83) logical_and_expression -> . logical_and_expression AND equality_expression
    (110) primary_expression -> . identifier
    (111) primary_expression -> . constant
    (112) primary_expression -> . LPAREN expression RPAREN
    (84) equality_expression -> . relational_expression
    (85) equality_expression -> . equality_expression EQ relational_expression
    (86) equality_expression -> . equality_expression NEQ relational_expression
    (119) constant -> . FLOAT_LIT
    (120) constant -> . INT_LIT
    (121) constant -> . CHAR_LIT
    (122) constant -> . STR_LIT
    (87) relational_expression -> . add_expression
    (88) relational_expression -> . relational_expression LT add_expression
    (89) relational_expression -> . relational_expression GT add_expression
    (90) relational_expression -> . relational_expression LE add_expression
    (91) relational_expression -> . relational_expression GE add_expression
    (92) add_expression -> . mult_expression
    (93) add_expression -> . add_expression ADD_OP mult_expression
    (94) add_expression -> . add_expression SUB_OP mult_expression
    (95) mult_expression -> . unary_expression
    (96) mult_expression -> . mult_expression MULT_OP unary_expression
    (97) mult_expression -> . mult_expression DIV_OP unary_expression
    (98) mult_expression -> . mult_expression MOD_OP unary_expression

    CASE            shift and go to state 86
    DEFAULT         shift and go to state 80
    LBRACE          shift and go to state 43
    PRINT           shift and go to state 82
    SCAN            shift and go to state 79
    IF              shift and go to state 98
    SWITCH          shift and go to state 89
    WHILE           shift and go to state 83
    FOR             shift and go to state 92
    DO              shift and go to state 77
    CONTINUE        shift and go to state 103
    BREAK           shift and go to state 102
    RETURN          shift and go to state 78
    FLOAT_ID        shift and go to state 5
    INT_ID          shift and go to state 25
    CHAR_ID         shift and go to state 7
    STR_ID          shift and go to state 13
    SEMI            reduce using rule 123 (empty -> .)
    INC             shift and go to state 33
    DEC             shift and go to state 3
    SUB_OP          shift and go to state 28
    NOT             shift and go to state 31
    LPAREN          shift and go to state 20
    FLOAT_LIT       shift and go to state 27
    INT_LIT         shift and go to state 29
    CHAR_LIT        shift and go to state 6
    STR_LIT         shift and go to state 4

    expression_statement           shift and go to state 76
    constant                       shift and go to state 1
    unary_expression               shift and go to state 2
    print_statement                shift and go to state 84
    iteration_statement            shift and go to state 85
    compound_statement             shift and go to state 87
    selection_statement            shift and go to state 88
    postfix_expression             shift and go to state 9
    relational_expression          shift and go to state 11
    statement                      shift and go to state 237
    logical_or_expression          shift and go to state 15
    empty                          shift and go to state 104
    assignment_expression          shift and go to state 59
    scan_statement                 shift and go to state 93
    mult_expression                shift and go to state 18
    expression_opt                 shift and go to state 94
    primary_expression             shift and go to state 19
    logical_and_expression         shift and go to state 21
    add_expression                 shift and go to state 22
    equality_expression            shift and go to state 23
    jump_statement                 shift and go to state 99
    labeled_statement              shift and go to state 100
    conditional_expression         shift and go to state 30
    identifier                     shift and go to state 138
    expression                     shift and go to state 108

state 237

    (55) else_if_statement -> ELSE_IF LPAREN expression RPAREN statement . else_if_statement
    (55) else_if_statement -> . ELSE_IF LPAREN expression RPAREN statement else_if_statement
    (56) else_if_statement -> . empty
    (123) empty -> .

    ELSE_IF         shift and go to state 224
    ELSE            reduce using rule 123 (empty -> .)

    else_if_statement              shift and go to state 238
    empty                          shift and go to state 226

state 238

    (55) else_if_statement -> ELSE_IF LPAREN expression RPAREN statement else_if_statement .

    ELSE            reduce using rule 55 (else_if_statement -> ELSE_IF LPAREN expression RPAREN statement else_if_statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LPAREN in state 9 resolved as shift
WARNING: shift/reduce conflict for INC in state 9 resolved as shift
WARNING: shift/reduce conflict for DEC in state 9 resolved as shift
WARNING: shift/reduce conflict for LT in state 11 resolved as shift
WARNING: shift/reduce conflict for GT in state 11 resolved as shift
WARNING: shift/reduce conflict for LE in state 11 resolved as shift
WARNING: shift/reduce conflict for GE in state 11 resolved as shift
WARNING: shift/reduce conflict for MULT_OP in state 18 resolved as shift
WARNING: shift/reduce conflict for DIV_OP in state 18 resolved as shift
WARNING: shift/reduce conflict for MOD_OP in state 18 resolved as shift
WARNING: shift/reduce conflict for OR in state 21 resolved as shift
WARNING: shift/reduce conflict for AND in state 21 resolved as shift
WARNING: shift/reduce conflict for ADD_OP in state 22 resolved as shift
WARNING: shift/reduce conflict for SUB_OP in state 22 resolved as shift
WARNING: shift/reduce conflict for EQ in state 23 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 23 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 32 resolved as shift
WARNING: shift/reduce conflict for ADD_OP in state 71 resolved as shift
WARNING: shift/reduce conflict for SUB_OP in state 71 resolved as shift
WARNING: shift/reduce conflict for ADD_OP in state 113 resolved as shift
WARNING: shift/reduce conflict for SUB_OP in state 113 resolved as shift
WARNING: shift/reduce conflict for ADD_OP in state 114 resolved as shift
WARNING: shift/reduce conflict for SUB_OP in state 114 resolved as shift
WARNING: shift/reduce conflict for ADD_OP in state 115 resolved as shift
WARNING: shift/reduce conflict for SUB_OP in state 115 resolved as shift
WARNING: shift/reduce conflict for ADD_OP in state 116 resolved as shift
WARNING: shift/reduce conflict for SUB_OP in state 116 resolved as shift
WARNING: shift/reduce conflict for EQ in state 123 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 123 resolved as shift
WARNING: shift/reduce conflict for MULT_OP in state 125 resolved as shift
WARNING: shift/reduce conflict for DIV_OP in state 125 resolved as shift
WARNING: shift/reduce conflict for MOD_OP in state 125 resolved as shift
WARNING: shift/reduce conflict for MULT_OP in state 126 resolved as shift
WARNING: shift/reduce conflict for DIV_OP in state 126 resolved as shift
WARNING: shift/reduce conflict for MOD_OP in state 126 resolved as shift
WARNING: shift/reduce conflict for LT in state 127 resolved as shift
WARNING: shift/reduce conflict for GT in state 127 resolved as shift
WARNING: shift/reduce conflict for LE in state 127 resolved as shift
WARNING: shift/reduce conflict for GE in state 127 resolved as shift
WARNING: shift/reduce conflict for LT in state 128 resolved as shift
WARNING: shift/reduce conflict for GT in state 128 resolved as shift
WARNING: shift/reduce conflict for LE in state 128 resolved as shift
WARNING: shift/reduce conflict for GE in state 128 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 218 resolved as shift
WARNING: shift/reduce conflict for ELSE_IF in state 218 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 218 resolved as shift
WARNING: reduce/reduce conflict in state 107 resolved using rule (declarator -> identifier)
WARNING: rejected rule (primary_expression -> identifier) in state 107
WARNING: reduce/reduce conflict in state 152 resolved using rule (declarator -> identifier)
WARNING: rejected rule (primary_expression -> identifier) in state 152
